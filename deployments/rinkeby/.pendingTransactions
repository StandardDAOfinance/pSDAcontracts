{
  "0xfda6032be3d4083422a7eacbffd625efae52852192ba7ccbf027340f5effc655": {
    "name": "TestDAI",
    "deployment": {
      "_format": "hh-sol-artifact-1",
      "contractName": "TestDAI",
      "sourceName": "contracts/token/TestDAI.sol",
      "abi": [
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "name": "Approval",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "approvedSeller",
              "type": "address"
            }
          ],
          "name": "ApprovedSellerAdded",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "approvedSeller",
              "type": "address"
            }
          ],
          "name": "ApprovedSellerRemoved",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "controllerAddress",
              "type": "address"
            }
          ],
          "name": "ControllerAdded",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "controllerAddress",
              "type": "address"
            }
          ],
          "name": "ControllerRemoved",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint8",
              "name": "version",
              "type": "uint8"
            }
          ],
          "name": "Initialized",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "previousOwner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "OwnershipTransferred",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "Paused",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "name": "Transfer",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "Unpaused",
          "type": "event"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_controller",
              "type": "address"
            }
          ],
          "name": "addController",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "allowBurn",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "allowMint",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            }
          ],
          "name": "allowance",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "approve",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "approveTransfer",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "seller",
              "type": "address"
            }
          ],
          "name": "approvedSeller",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "balanceOf",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "burn",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "burnFrom",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "cap",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "decimals",
          "outputs": [
            {
              "internalType": "uint8",
              "name": "",
              "type": "uint8"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "subtractedValue",
              "type": "uint256"
            }
          ],
          "name": "decreaseAllowance",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "addedValue",
              "type": "uint256"
            }
          ],
          "name": "increaseAllowance",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "name_",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol_",
              "type": "string"
            }
          ],
          "name": "initialize",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_address",
              "type": "address"
            }
          ],
          "name": "isController",
          "outputs": [
            {
              "internalType": "bool",
              "name": "allowed",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "mint",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "mintTo",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "name",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "owner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "paused",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "relinquishControl",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "renounceOwnership",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "requireSellerApproval",
          "outputs": [
            {
              "internalType": "bool",
              "name": "_requireSellerApproval",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bool",
              "name": "allowBurn_",
              "type": "bool"
            }
          ],
          "name": "setAllowBurn",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bool",
              "name": "allowMint_",
              "type": "bool"
            }
          ],
          "name": "setAllowMint",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "cap_",
              "type": "uint256"
            }
          ],
          "name": "setCap",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "symbol",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "totalSupply",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "transfer",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "transferFrom",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "transferOwnership",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        }
      ],
      "bytecode": "0x60806040523480156200001157600080fd5b506000805460ff191690556200002733620000c4565b62000050336001600160a01b03166000908152600360205260409020805460ff19166001179055565b600b805461ffff19166101011790556040805180820182526007808252665465737444414960c81b6020808401919091528351808501909452908352665445535444414960c81b90830152620000a69162000116565b620000be336b033b2e3c9fd0803ce8000000620001aa565b6200065f565b600280546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60098054620001259062000622565b1590506200017a5760405162461bcd60e51b815260206004820152601c60248201527f455243323020746f6b656e206e616d6520616c7265616479207365740000000060448201526064015b60405180910390fd5b81516200018f90600990602085019062000555565b508051620001a590600a90602084019062000555565b505050565b6000620001b660055490565b1115620002325760055481620001d66200032560201b620004881760201c565b620001e29190620005fb565b1115620002325760405162461bcd60e51b815260206004820152601960248201527f45524332304361707065643a2063617020657863656564656400000000000000604482015260640162000171565b6001600160a01b0382166200028a5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640162000171565b62000298600083836200032b565b8060086000828254620002ac9190620005fb565b90915550506001600160a01b03821660009081526006602052604081208054839290620002db908490620005fb565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b60085490565b60005460ff1615620003805760405162461bcd60e51b815260206004820152601b60248201527f746f6b656e207472616e73666572207768696c65207061757365640000000000604482015260640162000171565b6001600160a01b03831615620001a5576001600160a01b0383166000908152600760209081526040808320909152902054620001a5908490819084906000198114620004275781811015620004185760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640162000171565b6200042784848484036200042d565b50505050565b6001600160a01b038316620004915760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840162000171565b6001600160a01b038216620004f45760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840162000171565b6001600160a01b0383811660008181526007602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b828054620005639062000622565b90600052602060002090601f016020900481019282620005875760008555620005d2565b82601f10620005a257805160ff1916838001178555620005d2565b82800160010185558215620005d2579182015b82811115620005d2578251825591602001919060010190620005b5565b50620005e0929150620005e4565b5090565b5b80821115620005e05760008155600101620005e5565b600082198211156200061d57634e487b7160e01b600052601160045260246000fd5b500190565b600181811c908216806200063757607f821691505b602082108114156200065957634e487b7160e01b600052602260045260246000fd5b50919050565b61189a806200066f6000396000f3fe608060405234801561001057600080fd5b50600436106101805760003560e01c806306fdde0314610185578063095ea7b3146101a357806318160ddd146101c65780631b8dca74146101d857806323b872dd146101e3578063313ce567146101f6578063355274ea1461020557806335e061fc1461020d578063395093511461021d57806342966c6814610230578063449a52f81461024557806347786d37146102585780634cd88b761461026b5780635c975abb1461027e5780635e81078d1461028957806370a082311461029c578063715018a6146102c557806379cc6790146102cd5780638d222f36146102e05780638da5cb5b146102f357806395d89b4114610313578063a0712d681461031b578063a457c2d71461032e578063a7fc7a0714610341578063a9059cbb14610354578063b429afeb14610367578063b93ea6a11461037a578063dd62ed3e1461038a578063e1c28bef1461039d578063e26c6f1b146103a5578063f2fde38b146103b8578063fa02c4b7146103cb575b600080fd5b61018d6103de565b60405161019a9190611640565b60405180910390f35b6101b66101b1366004611578565b610470565b604051901515815260200161019a565b6008545b60405190815260200161019a565b600b5460ff166101b6565b6101b66101f136600461153c565b61048e565b6040516012815260200161019a565b6005546101ca565b600b54610100900460ff166101b6565b6101b661022b366004611578565b6104b2565b61024361023e366004611627565b6104d4565b005b610243610253366004611578565b610511565b610243610266366004611627565b6105a2565b6102436102793660046115c4565b6105e3565b60005460ff166101b6565b6102436102973660046115a2565b61065c565b6101ca6102aa3660046114e7565b6001600160a01b031660009081526006602052604090205490565b6102436106ce565b6102436102db366004611578565b610709565b6101b66102ee3660046114e7565b610745565b6102fb610768565b6040516001600160a01b03909116815260200161019a565b61018d610777565b610243610329366004611627565b610786565b6101b661033c366004611578565b610813565b61024361034f3660046114e7565b61088e565b6101b6610362366004611578565b610917565b6101b66103753660046114e7565b610925565b600054610100900460ff166101b6565b6101ca610398366004611509565b610946565b610243610971565b6102436103b33660046115a2565b6109da565b6102436103c63660046114e7565b610a51565b6101b66103d9366004611578565b610af6565b6060600980546103ed906117dd565b80601f0160208091040260200160405190810160405280929190818152602001828054610419906117dd565b80156104665780601f1061043b57610100808354040283529160200191610466565b820191906000526020600020905b81548152906001019060200180831161044957829003601f168201915b5050505050905090565b60003361047e818585610b6b565b5060019392505050565b60085490565b60003361049c858285610c8f565b6104a7858585610d09565b506001949350505050565b60003361047e8185856104c58383610946565b6104cf91906117ae565b610b6b565b600b54610100900460ff166105045760405162461bcd60e51b81526004016104fb90611749565b60405180910390fd5b61050e3382610ed0565b50565b3360009081526003602052604090205460ff1615156001148061053357503033145b806105565750610541610768565b6001600160a01b0316306001600160a01b0316145b6105725760405162461bcd60e51b81526004016104fb9061177a565b600b5460ff166105945760405162461bcd60e51b81526004016104fb90611718565b61059e8282611018565b5050565b600554156105de5760405162461bcd60e51b8152602060048201526009602482015268696d6d757461626c6560b81b60448201526064016104fb565b600555565b60006105ef6001611163565b90508015610607576004805461ff0019166101001790555b61061183836111f2565b8015610657576004805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b3360009081526003602052604090205460ff1615156001148061067e57503033145b806106a1575061068c610768565b6001600160a01b0316306001600160a01b0316145b6106bd5760405162461bcd60e51b81526004016104fb9061177a565b600b805460ff191682151517905550565b336106d7610768565b6001600160a01b0316146106fd5760405162461bcd60e51b81526004016104fb906116e3565b6107076000611274565b565b600b54610100900460ff166107305760405162461bcd60e51b81526004016104fb90611749565b61073b823383610c8f565b61059e8282610ed0565b6001600160a01b03811660009081526001602052604081205460ff165b92915050565b6002546001600160a01b031690565b6060600a80546103ed906117dd565b3360009081526003602052604090205460ff161515600114806107a857503033145b806107cb57506107b6610768565b6001600160a01b0316306001600160a01b0316145b6107e75760405162461bcd60e51b81526004016104fb9061177a565b600b5460ff166108095760405162461bcd60e51b81526004016104fb90611718565b61050e3382611018565b600033816108218286610946565b9050838110156108815760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016104fb565b6104a78286868403610b6b565b3360009081526003602052604090205460ff161515600114806108b057503033145b806108d357506108be610768565b6001600160a01b0316306001600160a01b0316145b6108ef5760405162461bcd60e51b81526004016104fb9061177a565b61050e816001600160a01b03166000908152600360205260409020805460ff19166001179055565b60003361047e818585610d09565b6001600160a01b03811660009081526003602052604081205460ff16610762565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205490565b3360009081526003602052604090205460ff1615156001148061099357503033145b806109b657506109a1610768565b6001600160a01b0316306001600160a01b0316145b6109d25760405162461bcd60e51b81526004016104fb9061177a565b6107076112c6565b3360009081526003602052604090205460ff161515600114806109fc57503033145b80610a1f5750610a0a610768565b6001600160a01b0316306001600160a01b0316145b610a3b5760405162461bcd60e51b81526004016104fb9061177a565b600b805461ff0019166101008315150217905550565b33610a5a610768565b6001600160a01b031614610a805760405162461bcd60e51b81526004016104fb906116e3565b6001600160a01b038116610ae55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104fb565b610aee81611274565b61050e6112c6565b3360009081526003602052604081205460ff16151560011480610b1857503033145b80610b3b5750610b26610768565b6001600160a01b0316306001600160a01b0316145b610b575760405162461bcd60e51b81526004016104fb9061177a565b610b62838484610b6b565b50600192915050565b6001600160a01b038316610bcd5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016104fb565b6001600160a01b038216610c2e5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016104fb565b6001600160a01b0383811660008181526007602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000610c9b8484610946565b90506000198114610d035781811015610cf65760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016104fb565b610d038484848403610b6b565b50505050565b6001600160a01b038316610d6d5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016104fb565b6001600160a01b038216610dcf5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016104fb565b610dda838383611340565b6001600160a01b03831660009081526006602052604090205481811015610e525760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016104fb565b6001600160a01b03808516600090815260066020526040808220858503905591851681529081208054849290610e899084906117ae565b92505081905550826001600160a01b0316846001600160a01b031660008051602061184583398151915284604051610ec391815260200190565b60405180910390a3610d03565b6001600160a01b038216610f305760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016104fb565b610f3c82600083611340565b6001600160a01b03821660009081526006602052604090205481811015610fb05760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016104fb565b6001600160a01b0383166000908152600660205260408120838303905560088054849290610fdf9084906117c6565b90915550506040518281526000906001600160a01b038516906000805160206118458339815191529060200160405180910390a3505050565b600061102360055490565b111561108a576005548161103660085490565b61104091906117ae565b111561108a5760405162461bcd60e51b8152602060048201526019602482015278115490cc8c10d85c1c19590e8818d85c08195e18d959591959603a1b60448201526064016104fb565b6001600160a01b0382166110e05760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016104fb565b6110ec60008383611340565b80600860008282546110fe91906117ae565b90915550506001600160a01b0382166000908152600660205260408120805483929061112b9084906117ae565b90915550506040518181526001600160a01b038316906000906000805160206118458339815191529060200160405180910390a35050565b600454600090610100900460ff16156111ac578160ff1660011480156111885750303b155b6111a45760405162461bcd60e51b81526004016104fb90611695565b506000919050565b60045460ff8084169116106111d35760405162461bcd60e51b81526004016104fb90611695565b506004805460ff191660ff92909216919091179055600190565b919050565b600980546111ff906117dd565b15905061124d5760405162461bcd60e51b815260206004820152601c60248201527b115490cc8c081d1bdad95b881b985b5948185b1c9958591e481cd95d60221b60448201526064016104fb565b81516112609060099060208501906113ab565b50805161065790600a9060208401906113ab565b600280546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b3360009081526003602052604090205460ff161515600114806112e857503033145b8061130b57506112f6610768565b6001600160a01b0316306001600160a01b0316145b6113275760405162461bcd60e51b81526004016104fb9061177a565b336000908152600360205260409020805460ff19169055565b60005460ff16156113915760405162461bcd60e51b815260206004820152601b60248201527a1d1bdad95b881d1c985b9cd9995c881dda1a5b19481c185d5cd959602a1b60448201526064016104fb565b6001600160a01b0383161561065757610657838483610c8f565b8280546113b7906117dd565b90600052602060002090601f0160209004810192826113d9576000855561141f565b82601f106113f257805160ff191683800117855561141f565b8280016001018555821561141f579182015b8281111561141f578251825591602001919060010190611404565b5061142b92915061142f565b5090565b5b8082111561142b5760008155600101611430565b80356001600160a01b03811681146111ed57600080fd5b600082601f83011261146c57600080fd5b81356001600160401b03808211156114865761148661182e565b604051601f8301601f19908116603f011681019082821181831017156114ae576114ae61182e565b816040528381528660208588010111156114c757600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000602082840312156114f957600080fd5b61150282611444565b9392505050565b6000806040838503121561151c57600080fd5b61152583611444565b915061153360208401611444565b90509250929050565b60008060006060848603121561155157600080fd5b61155a84611444565b925061156860208501611444565b9150604084013590509250925092565b6000806040838503121561158b57600080fd5b61159483611444565b946020939093013593505050565b6000602082840312156115b457600080fd5b8135801515811461150257600080fd5b600080604083850312156115d757600080fd5b82356001600160401b03808211156115ee57600080fd5b6115fa8683870161145b565b9350602085013591508082111561161057600080fd5b5061161d8582860161145b565b9150509250929050565b60006020828403121561163957600080fd5b5035919050565b600060208083528351808285015260005b8181101561166d57858101830151858201604001528201611651565b8181111561167f576000604083870101525b50601f01601f1916929092016040019392505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526017908201527636b4b73a34b7339034b9903737ba1030b63637bbb2b21760491b604082015260600190565b602080825260179082015276213ab93734b7339034b9903737ba1030b63637bbb2b21760491b604082015260600190565b6020808252601a908201527931b0b63632b91034b9903737ba10309031b7b73a3937b63632b960311b604082015260600190565b600082198211156117c1576117c1611818565b500190565b6000828210156117d8576117d8611818565b500390565b600181811c908216806117f157607f821691505b6020821081141561181257634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220a3b00e10cd093354a835a227a41378fb1603ed59adca0bb17c63196201ca0f3b64736f6c63430008060033",
      "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101805760003560e01c806306fdde0314610185578063095ea7b3146101a357806318160ddd146101c65780631b8dca74146101d857806323b872dd146101e3578063313ce567146101f6578063355274ea1461020557806335e061fc1461020d578063395093511461021d57806342966c6814610230578063449a52f81461024557806347786d37146102585780634cd88b761461026b5780635c975abb1461027e5780635e81078d1461028957806370a082311461029c578063715018a6146102c557806379cc6790146102cd5780638d222f36146102e05780638da5cb5b146102f357806395d89b4114610313578063a0712d681461031b578063a457c2d71461032e578063a7fc7a0714610341578063a9059cbb14610354578063b429afeb14610367578063b93ea6a11461037a578063dd62ed3e1461038a578063e1c28bef1461039d578063e26c6f1b146103a5578063f2fde38b146103b8578063fa02c4b7146103cb575b600080fd5b61018d6103de565b60405161019a9190611640565b60405180910390f35b6101b66101b1366004611578565b610470565b604051901515815260200161019a565b6008545b60405190815260200161019a565b600b5460ff166101b6565b6101b66101f136600461153c565b61048e565b6040516012815260200161019a565b6005546101ca565b600b54610100900460ff166101b6565b6101b661022b366004611578565b6104b2565b61024361023e366004611627565b6104d4565b005b610243610253366004611578565b610511565b610243610266366004611627565b6105a2565b6102436102793660046115c4565b6105e3565b60005460ff166101b6565b6102436102973660046115a2565b61065c565b6101ca6102aa3660046114e7565b6001600160a01b031660009081526006602052604090205490565b6102436106ce565b6102436102db366004611578565b610709565b6101b66102ee3660046114e7565b610745565b6102fb610768565b6040516001600160a01b03909116815260200161019a565b61018d610777565b610243610329366004611627565b610786565b6101b661033c366004611578565b610813565b61024361034f3660046114e7565b61088e565b6101b6610362366004611578565b610917565b6101b66103753660046114e7565b610925565b600054610100900460ff166101b6565b6101ca610398366004611509565b610946565b610243610971565b6102436103b33660046115a2565b6109da565b6102436103c63660046114e7565b610a51565b6101b66103d9366004611578565b610af6565b6060600980546103ed906117dd565b80601f0160208091040260200160405190810160405280929190818152602001828054610419906117dd565b80156104665780601f1061043b57610100808354040283529160200191610466565b820191906000526020600020905b81548152906001019060200180831161044957829003601f168201915b5050505050905090565b60003361047e818585610b6b565b5060019392505050565b60085490565b60003361049c858285610c8f565b6104a7858585610d09565b506001949350505050565b60003361047e8185856104c58383610946565b6104cf91906117ae565b610b6b565b600b54610100900460ff166105045760405162461bcd60e51b81526004016104fb90611749565b60405180910390fd5b61050e3382610ed0565b50565b3360009081526003602052604090205460ff1615156001148061053357503033145b806105565750610541610768565b6001600160a01b0316306001600160a01b0316145b6105725760405162461bcd60e51b81526004016104fb9061177a565b600b5460ff166105945760405162461bcd60e51b81526004016104fb90611718565b61059e8282611018565b5050565b600554156105de5760405162461bcd60e51b8152602060048201526009602482015268696d6d757461626c6560b81b60448201526064016104fb565b600555565b60006105ef6001611163565b90508015610607576004805461ff0019166101001790555b61061183836111f2565b8015610657576004805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b3360009081526003602052604090205460ff1615156001148061067e57503033145b806106a1575061068c610768565b6001600160a01b0316306001600160a01b0316145b6106bd5760405162461bcd60e51b81526004016104fb9061177a565b600b805460ff191682151517905550565b336106d7610768565b6001600160a01b0316146106fd5760405162461bcd60e51b81526004016104fb906116e3565b6107076000611274565b565b600b54610100900460ff166107305760405162461bcd60e51b81526004016104fb90611749565b61073b823383610c8f565b61059e8282610ed0565b6001600160a01b03811660009081526001602052604081205460ff165b92915050565b6002546001600160a01b031690565b6060600a80546103ed906117dd565b3360009081526003602052604090205460ff161515600114806107a857503033145b806107cb57506107b6610768565b6001600160a01b0316306001600160a01b0316145b6107e75760405162461bcd60e51b81526004016104fb9061177a565b600b5460ff166108095760405162461bcd60e51b81526004016104fb90611718565b61050e3382611018565b600033816108218286610946565b9050838110156108815760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016104fb565b6104a78286868403610b6b565b3360009081526003602052604090205460ff161515600114806108b057503033145b806108d357506108be610768565b6001600160a01b0316306001600160a01b0316145b6108ef5760405162461bcd60e51b81526004016104fb9061177a565b61050e816001600160a01b03166000908152600360205260409020805460ff19166001179055565b60003361047e818585610d09565b6001600160a01b03811660009081526003602052604081205460ff16610762565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205490565b3360009081526003602052604090205460ff1615156001148061099357503033145b806109b657506109a1610768565b6001600160a01b0316306001600160a01b0316145b6109d25760405162461bcd60e51b81526004016104fb9061177a565b6107076112c6565b3360009081526003602052604090205460ff161515600114806109fc57503033145b80610a1f5750610a0a610768565b6001600160a01b0316306001600160a01b0316145b610a3b5760405162461bcd60e51b81526004016104fb9061177a565b600b805461ff0019166101008315150217905550565b33610a5a610768565b6001600160a01b031614610a805760405162461bcd60e51b81526004016104fb906116e3565b6001600160a01b038116610ae55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104fb565b610aee81611274565b61050e6112c6565b3360009081526003602052604081205460ff16151560011480610b1857503033145b80610b3b5750610b26610768565b6001600160a01b0316306001600160a01b0316145b610b575760405162461bcd60e51b81526004016104fb9061177a565b610b62838484610b6b565b50600192915050565b6001600160a01b038316610bcd5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016104fb565b6001600160a01b038216610c2e5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016104fb565b6001600160a01b0383811660008181526007602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000610c9b8484610946565b90506000198114610d035781811015610cf65760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016104fb565b610d038484848403610b6b565b50505050565b6001600160a01b038316610d6d5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016104fb565b6001600160a01b038216610dcf5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016104fb565b610dda838383611340565b6001600160a01b03831660009081526006602052604090205481811015610e525760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016104fb565b6001600160a01b03808516600090815260066020526040808220858503905591851681529081208054849290610e899084906117ae565b92505081905550826001600160a01b0316846001600160a01b031660008051602061184583398151915284604051610ec391815260200190565b60405180910390a3610d03565b6001600160a01b038216610f305760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016104fb565b610f3c82600083611340565b6001600160a01b03821660009081526006602052604090205481811015610fb05760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016104fb565b6001600160a01b0383166000908152600660205260408120838303905560088054849290610fdf9084906117c6565b90915550506040518281526000906001600160a01b038516906000805160206118458339815191529060200160405180910390a3505050565b600061102360055490565b111561108a576005548161103660085490565b61104091906117ae565b111561108a5760405162461bcd60e51b8152602060048201526019602482015278115490cc8c10d85c1c19590e8818d85c08195e18d959591959603a1b60448201526064016104fb565b6001600160a01b0382166110e05760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016104fb565b6110ec60008383611340565b80600860008282546110fe91906117ae565b90915550506001600160a01b0382166000908152600660205260408120805483929061112b9084906117ae565b90915550506040518181526001600160a01b038316906000906000805160206118458339815191529060200160405180910390a35050565b600454600090610100900460ff16156111ac578160ff1660011480156111885750303b155b6111a45760405162461bcd60e51b81526004016104fb90611695565b506000919050565b60045460ff8084169116106111d35760405162461bcd60e51b81526004016104fb90611695565b506004805460ff191660ff92909216919091179055600190565b919050565b600980546111ff906117dd565b15905061124d5760405162461bcd60e51b815260206004820152601c60248201527b115490cc8c081d1bdad95b881b985b5948185b1c9958591e481cd95d60221b60448201526064016104fb565b81516112609060099060208501906113ab565b50805161065790600a9060208401906113ab565b600280546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b3360009081526003602052604090205460ff161515600114806112e857503033145b8061130b57506112f6610768565b6001600160a01b0316306001600160a01b0316145b6113275760405162461bcd60e51b81526004016104fb9061177a565b336000908152600360205260409020805460ff19169055565b60005460ff16156113915760405162461bcd60e51b815260206004820152601b60248201527a1d1bdad95b881d1c985b9cd9995c881dda1a5b19481c185d5cd959602a1b60448201526064016104fb565b6001600160a01b0383161561065757610657838483610c8f565b8280546113b7906117dd565b90600052602060002090601f0160209004810192826113d9576000855561141f565b82601f106113f257805160ff191683800117855561141f565b8280016001018555821561141f579182015b8281111561141f578251825591602001919060010190611404565b5061142b92915061142f565b5090565b5b8082111561142b5760008155600101611430565b80356001600160a01b03811681146111ed57600080fd5b600082601f83011261146c57600080fd5b81356001600160401b03808211156114865761148661182e565b604051601f8301601f19908116603f011681019082821181831017156114ae576114ae61182e565b816040528381528660208588010111156114c757600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000602082840312156114f957600080fd5b61150282611444565b9392505050565b6000806040838503121561151c57600080fd5b61152583611444565b915061153360208401611444565b90509250929050565b60008060006060848603121561155157600080fd5b61155a84611444565b925061156860208501611444565b9150604084013590509250925092565b6000806040838503121561158b57600080fd5b61159483611444565b946020939093013593505050565b6000602082840312156115b457600080fd5b8135801515811461150257600080fd5b600080604083850312156115d757600080fd5b82356001600160401b03808211156115ee57600080fd5b6115fa8683870161145b565b9350602085013591508082111561161057600080fd5b5061161d8582860161145b565b9150509250929050565b60006020828403121561163957600080fd5b5035919050565b600060208083528351808285015260005b8181101561166d57858101830151858201604001528201611651565b8181111561167f576000604083870101525b50601f01601f1916929092016040019392505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526017908201527636b4b73a34b7339034b9903737ba1030b63637bbb2b21760491b604082015260600190565b602080825260179082015276213ab93734b7339034b9903737ba1030b63637bbb2b21760491b604082015260600190565b6020808252601a908201527931b0b63632b91034b9903737ba10309031b7b73a3937b63632b960311b604082015260600190565b600082198211156117c1576117c1611818565b500190565b6000828210156117d8576117d8611818565b500390565b600181811c908216806117f157607f821691505b6020821081141561181257634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220a3b00e10cd093354a835a227a41378fb1603ed59adca0bb17c63196201ca0f3b64736f6c63430008060033",
      "linkReferences": {},
      "deployedLinkReferences": {},
      "devdoc": {
        "kind": "dev",
        "methods": {
          "addController(address)": {
            "details": "Add an address allowed to control this contract"
          },
          "allowBurn()": {
            "details": "set allow burn"
          },
          "allowance(address,address)": {
            "details": "See {IERC20-allowance}."
          },
          "approve(address,uint256)": {
            "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
          },
          "approveTransfer(address,uint256)": {
            "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
          },
          "balanceOf(address)": {
            "details": "See {IERC20-balanceOf}."
          },
          "burn(uint256)": {
            "details": "Destroys `amount` tokens from the caller. See {ERC20-_burn}."
          },
          "burnFrom(address,uint256)": {
            "details": "Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`."
          },
          "cap()": {
            "details": "Returns the cap on the token's total supply."
          },
          "decimals()": {
            "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
          },
          "decreaseAllowance(address,uint256)": {
            "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
          },
          "increaseAllowance(address,uint256)": {
            "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
          },
          "isController(address)": {
            "details": "Check if this address is a controller"
          },
          "mint(uint256)": {
            "details": "Destroys `amount` tokens from the caller. See {ERC20-_mint}."
          },
          "mintTo(address,uint256)": {
            "details": "Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_mint} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`."
          },
          "name()": {
            "details": "Returns the name of the token."
          },
          "owner()": {
            "details": "Returns the address of the current owner."
          },
          "paused()": {
            "details": "Returns true if the contract is paused, and false otherwise."
          },
          "relinquishControl()": {
            "details": "Remove the sender address from the list of controllers"
          },
          "renounceOwnership()": {
            "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
          },
          "setAllowBurn(bool)": {
            "details": "set allow burn flag"
          },
          "setAllowMint(bool)": {
            "details": "set allow mint flag"
          },
          "symbol()": {
            "details": "Returns the symbol of the token, usually a shorter version of the name."
          },
          "totalSupply()": {
            "details": "See {IERC20-totalSupply}."
          },
          "transfer(address,uint256)": {
            "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
          },
          "transferFrom(address,address,uint256)": {
            "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
          },
          "transferOwnership(address)": {
            "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
          }
        },
        "version": 1
      },
      "evm": {
        "bytecode": {
          "functionDebugData": {
            "@_23": {
              "entryPoint": null,
              "id": 23,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_291": {
              "entryPoint": null,
              "id": 291,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_6817": {
              "entryPoint": null,
              "id": 6817,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_8175": {
              "entryPoint": null,
              "id": 8175,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_addController_1115": {
              "entryPoint": null,
              "id": 1115,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_afterTokenTransfer_7698": {
              "entryPoint": null,
              "id": 7698,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@_approve_7613": {
              "entryPoint": 1069,
              "id": 7613,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@_beforeTokenTransfer_7687": {
              "entryPoint": 811,
              "id": 7687,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@_initializeToken_7052": {
              "entryPoint": 278,
              "id": 7052,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_mint_7496": {
              "entryPoint": 426,
              "id": 7496,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_msgSender_1035": {
              "entryPoint": null,
              "id": 1035,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@_spendAllowance_7656": {
              "entryPoint": null,
              "id": 7656,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@_transferOwnership_103": {
              "entryPoint": 196,
              "id": 103,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@allowance_7197": {
              "entryPoint": null,
              "id": 7197,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@cap_7127": {
              "entryPoint": null,
              "id": 7127,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@paused_300": {
              "entryPoint": null,
              "id": 300,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@totalSupply_7104": {
              "entryPoint": 805,
              "id": 7104,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_a19197f3e02d3e1cbde1d2c6c62a4f90a6efd641d75db007071ca4ee16948014__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_b80809d1aa1457ca4f3a22b37b5844c6ef16ca06c98e63183067df6d724f2917__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_c0532a65ade852f12d67926b1625bbc98f7eb7c650703bf531fd4e07ded2c49f__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_add_t_uint256": {
              "entryPoint": 1531,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "extract_byte_array_length": {
              "entryPoint": 1570,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            }
          },
          "generatedSources": [
            {
              "ast": {
                "nodeType": "YulBlock",
                "src": "0:3401:78",
                "statements": [
                  {
                    "nodeType": "YulBlock",
                    "src": "6:3:78",
                    "statements": []
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "188:224:78",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "205:9:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "216:2:78",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "198:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "198:21:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "198:21:78"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "239:9:78"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "250:2:78",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "235:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "235:18:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "255:2:78",
                                "type": "",
                                "value": "34"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "228:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "228:30:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "228:30:78"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "278:9:78"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "289:2:78",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "274:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "274:18:78"
                              },
                              {
                                "hexValue": "45524332303a20617070726f766520746f20746865207a65726f206164647265",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "294:34:78",
                                "type": "",
                                "value": "ERC20: approve to the zero addre"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "267:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "267:62:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "267:62:78"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "349:9:78"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "360:2:78",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "345:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "345:18:78"
                              },
                              {
                                "hexValue": "7373",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "365:4:78",
                                "type": "",
                                "value": "ss"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "338:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "338:32:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "338:32:78"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "379:27:78",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "391:9:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "402:3:78",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "387:3:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "387:19:78"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "379:4:78"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "165:9:78",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "179:4:78",
                        "type": ""
                      }
                    ],
                    "src": "14:398:78"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "591:179:78",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "608:9:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "619:2:78",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "601:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "601:21:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "601:21:78"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "642:9:78"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "653:2:78",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "638:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "638:18:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "658:2:78",
                                "type": "",
                                "value": "29"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "631:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "631:30:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "631:30:78"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "681:9:78"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "692:2:78",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "677:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "677:18:78"
                              },
                              {
                                "hexValue": "45524332303a20696e73756666696369656e7420616c6c6f77616e6365",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "697:31:78",
                                "type": "",
                                "value": "ERC20: insufficient allowance"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "670:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "670:59:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "670:59:78"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "738:26:78",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "750:9:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "761:2:78",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "746:3:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "746:18:78"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "738:4:78"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "568:9:78",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "582:4:78",
                        "type": ""
                      }
                    ],
                    "src": "417:353:78"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "949:178:78",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "966:9:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "977:2:78",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "959:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "959:21:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "959:21:78"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1000:9:78"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1011:2:78",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "996:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "996:18:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1016:2:78",
                                "type": "",
                                "value": "28"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "989:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "989:30:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "989:30:78"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1039:9:78"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1050:2:78",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1035:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1035:18:78"
                              },
                              {
                                "hexValue": "455243323020746f6b656e206e616d6520616c726561647920736574",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "1055:30:78",
                                "type": "",
                                "value": "ERC20 token name already set"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1028:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1028:58:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1028:58:78"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1095:26:78",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1107:9:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1118:2:78",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1103:3:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1103:18:78"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "1095:4:78"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_a19197f3e02d3e1cbde1d2c6c62a4f90a6efd641d75db007071ca4ee16948014__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "926:9:78",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "940:4:78",
                        "type": ""
                      }
                    ],
                    "src": "775:352:78"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1306:177:78",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1323:9:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1334:2:78",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1316:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1316:21:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1316:21:78"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1357:9:78"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1368:2:78",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1353:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1353:18:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1373:2:78",
                                "type": "",
                                "value": "27"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1346:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1346:30:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1346:30:78"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1396:9:78"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1407:2:78",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1392:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1392:18:78"
                              },
                              {
                                "hexValue": "746f6b656e207472616e73666572207768696c6520706175736564",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "1412:29:78",
                                "type": "",
                                "value": "token transfer while paused"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1385:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1385:57:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1385:57:78"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1451:26:78",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1463:9:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1474:2:78",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1459:3:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1459:18:78"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "1451:4:78"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_b80809d1aa1457ca4f3a22b37b5844c6ef16ca06c98e63183067df6d724f2917__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1283:9:78",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "1297:4:78",
                        "type": ""
                      }
                    ],
                    "src": "1132:351:78"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1662:175:78",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1679:9:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1690:2:78",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1672:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1672:21:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1672:21:78"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1713:9:78"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1724:2:78",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1709:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1709:18:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1729:2:78",
                                "type": "",
                                "value": "25"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1702:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1702:30:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1702:30:78"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1752:9:78"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1763:2:78",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1748:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1748:18:78"
                              },
                              {
                                "hexValue": "45524332304361707065643a20636170206578636565646564",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "1768:27:78",
                                "type": "",
                                "value": "ERC20Capped: cap exceeded"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1741:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1741:55:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1741:55:78"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1805:26:78",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1817:9:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1828:2:78",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1813:3:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1813:18:78"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "1805:4:78"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_c0532a65ade852f12d67926b1625bbc98f7eb7c650703bf531fd4e07ded2c49f__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1639:9:78",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "1653:4:78",
                        "type": ""
                      }
                    ],
                    "src": "1488:349:78"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2016:226:78",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2033:9:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2044:2:78",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2026:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2026:21:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2026:21:78"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2067:9:78"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2078:2:78",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2063:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2063:18:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2083:2:78",
                                "type": "",
                                "value": "36"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2056:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2056:30:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2056:30:78"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2106:9:78"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2117:2:78",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2102:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2102:18:78"
                              },
                              {
                                "hexValue": "45524332303a20617070726f76652066726f6d20746865207a65726f20616464",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "2122:34:78",
                                "type": "",
                                "value": "ERC20: approve from the zero add"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2095:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2095:62:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2095:62:78"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2177:9:78"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2188:2:78",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2173:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2173:18:78"
                              },
                              {
                                "hexValue": "72657373",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "2193:6:78",
                                "type": "",
                                "value": "ress"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2166:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2166:34:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2166:34:78"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2209:27:78",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2221:9:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2232:3:78",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2217:3:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2217:19:78"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "2209:4:78"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1993:9:78",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "2007:4:78",
                        "type": ""
                      }
                    ],
                    "src": "1842:400:78"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2421:181:78",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2438:9:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2449:2:78",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2431:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2431:21:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2431:21:78"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2472:9:78"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2483:2:78",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2468:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2468:18:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2488:2:78",
                                "type": "",
                                "value": "31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2461:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2461:30:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2461:30:78"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2511:9:78"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2522:2:78",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2507:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2507:18:78"
                              },
                              {
                                "hexValue": "45524332303a206d696e7420746f20746865207a65726f2061646472657373",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "2527:33:78",
                                "type": "",
                                "value": "ERC20: mint to the zero address"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2500:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2500:61:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2500:61:78"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2570:26:78",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2582:9:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2593:2:78",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2578:3:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2578:18:78"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "2570:4:78"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2398:9:78",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "2412:4:78",
                        "type": ""
                      }
                    ],
                    "src": "2247:355:78"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2708:76:78",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "2718:26:78",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2730:9:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2741:2:78",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2726:3:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2726:18:78"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "2718:4:78"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2760:9:78"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "2771:6:78"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2753:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2753:25:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2753:25:78"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2677:9:78",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "2688:6:78",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "2699:4:78",
                        "type": ""
                      }
                    ],
                    "src": "2607:177:78"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2837:177:78",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2872:111:78",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2893:1:78",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2900:3:78",
                                          "type": "",
                                          "value": "224"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2905:10:78",
                                          "type": "",
                                          "value": "0x4e487b71"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shl",
                                        "nodeType": "YulIdentifier",
                                        "src": "2896:3:78"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2896:20:78"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "2886:6:78"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2886:31:78"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2886:31:78"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2937:1:78",
                                      "type": "",
                                      "value": "4"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2940:4:78",
                                      "type": "",
                                      "value": "0x11"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "2930:6:78"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2930:15:78"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2930:15:78"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2965:1:78",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2968:4:78",
                                      "type": "",
                                      "value": "0x24"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2958:6:78"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2958:15:78"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2958:15:78"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "2853:1:78"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "2860:1:78"
                                  }
                                ],
                                "functionName": {
                                  "name": "not",
                                  "nodeType": "YulIdentifier",
                                  "src": "2856:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2856:6:78"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "2850:2:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2850:13:78"
                          },
                          "nodeType": "YulIf",
                          "src": "2847:2:78"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2992:16:78",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "3003:1:78"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "3006:1:78"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2999:3:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2999:9:78"
                          },
                          "variableNames": [
                            {
                              "name": "sum",
                              "nodeType": "YulIdentifier",
                              "src": "2992:3:78"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_add_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "2820:1:78",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "2823:1:78",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "sum",
                        "nodeType": "YulTypedName",
                        "src": "2829:3:78",
                        "type": ""
                      }
                    ],
                    "src": "2789:225:78"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3074:325:78",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "3084:22:78",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3098:1:78",
                                "type": "",
                                "value": "1"
                              },
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "3101:4:78"
                              }
                            ],
                            "functionName": {
                              "name": "shr",
                              "nodeType": "YulIdentifier",
                              "src": "3094:3:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3094:12:78"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nodeType": "YulIdentifier",
                              "src": "3084:6:78"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3115:38:78",
                          "value": {
                            "arguments": [
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "3145:4:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3151:1:78",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "3141:3:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3141:12:78"
                          },
                          "variables": [
                            {
                              "name": "outOfPlaceEncoding",
                              "nodeType": "YulTypedName",
                              "src": "3119:18:78",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3192:31:78",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "3194:27:78",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "length",
                                      "nodeType": "YulIdentifier",
                                      "src": "3208:6:78"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3216:4:78",
                                      "type": "",
                                      "value": "0x7f"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nodeType": "YulIdentifier",
                                    "src": "3204:3:78"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3204:17:78"
                                },
                                "variableNames": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "3194:6:78"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nodeType": "YulIdentifier",
                                "src": "3172:18:78"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "3165:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3165:26:78"
                          },
                          "nodeType": "YulIf",
                          "src": "3162:2:78"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3282:111:78",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3303:1:78",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "3310:3:78",
                                          "type": "",
                                          "value": "224"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "3315:10:78",
                                          "type": "",
                                          "value": "0x4e487b71"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shl",
                                        "nodeType": "YulIdentifier",
                                        "src": "3306:3:78"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3306:20:78"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "3296:6:78"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3296:31:78"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3296:31:78"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3347:1:78",
                                      "type": "",
                                      "value": "4"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3350:4:78",
                                      "type": "",
                                      "value": "0x22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "3340:6:78"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3340:15:78"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3340:15:78"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3375:1:78",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3378:4:78",
                                      "type": "",
                                      "value": "0x24"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3368:6:78"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3368:15:78"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3368:15:78"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nodeType": "YulIdentifier",
                                "src": "3238:18:78"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "3261:6:78"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3269:2:78",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "3258:2:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3258:14:78"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "3235:2:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3235:38:78"
                          },
                          "nodeType": "YulIf",
                          "src": "3232:2:78"
                        }
                      ]
                    },
                    "name": "extract_byte_array_length",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "data",
                        "nodeType": "YulTypedName",
                        "src": "3054:4:78",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "3063:6:78",
                        "type": ""
                      }
                    ],
                    "src": "3019:380:78"
                  }
                ]
              },
              "contents": "{\n    { }\n    function abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ERC20: approve to the zero addre\")\n        mstore(add(headStart, 96), \"ss\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"ERC20: insufficient allowance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_a19197f3e02d3e1cbde1d2c6c62a4f90a6efd641d75db007071ca4ee16948014__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 28)\n        mstore(add(headStart, 64), \"ERC20 token name already set\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_b80809d1aa1457ca4f3a22b37b5844c6ef16ca06c98e63183067df6d724f2917__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 27)\n        mstore(add(headStart, 64), \"token transfer while paused\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_c0532a65ade852f12d67926b1625bbc98f7eb7c650703bf531fd4e07ded2c49f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 25)\n        mstore(add(headStart, 64), \"ERC20Capped: cap exceeded\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC20: approve from the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"ERC20: mint to the zero address\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n        sum := add(x, y)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n}",
              "id": 78,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "linkReferences": {},
          "object": "60806040523480156200001157600080fd5b506000805460ff191690556200002733620000c4565b62000050336001600160a01b03166000908152600360205260409020805460ff19166001179055565b600b805461ffff19166101011790556040805180820182526007808252665465737444414960c81b6020808401919091528351808501909452908352665445535444414960c81b90830152620000a69162000116565b620000be336b033b2e3c9fd0803ce8000000620001aa565b6200065f565b600280546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60098054620001259062000622565b1590506200017a5760405162461bcd60e51b815260206004820152601c60248201527f455243323020746f6b656e206e616d6520616c7265616479207365740000000060448201526064015b60405180910390fd5b81516200018f90600990602085019062000555565b508051620001a590600a90602084019062000555565b505050565b6000620001b660055490565b1115620002325760055481620001d66200032560201b620004881760201c565b620001e29190620005fb565b1115620002325760405162461bcd60e51b815260206004820152601960248201527f45524332304361707065643a2063617020657863656564656400000000000000604482015260640162000171565b6001600160a01b0382166200028a5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640162000171565b62000298600083836200032b565b8060086000828254620002ac9190620005fb565b90915550506001600160a01b03821660009081526006602052604081208054839290620002db908490620005fb565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b60085490565b60005460ff1615620003805760405162461bcd60e51b815260206004820152601b60248201527f746f6b656e207472616e73666572207768696c65207061757365640000000000604482015260640162000171565b6001600160a01b03831615620001a5576001600160a01b0383166000908152600760209081526040808320909152902054620001a5908490819084906000198114620004275781811015620004185760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640162000171565b6200042784848484036200042d565b50505050565b6001600160a01b038316620004915760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840162000171565b6001600160a01b038216620004f45760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840162000171565b6001600160a01b0383811660008181526007602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b828054620005639062000622565b90600052602060002090601f016020900481019282620005875760008555620005d2565b82601f10620005a257805160ff1916838001178555620005d2565b82800160010185558215620005d2579182015b82811115620005d2578251825591602001919060010190620005b5565b50620005e0929150620005e4565b5090565b5b80821115620005e05760008155600101620005e5565b600082198211156200061d57634e487b7160e01b600052601160045260246000fd5b500190565b600181811c908216806200063757607f821691505b602082108114156200065957634e487b7160e01b600052602260045260246000fd5b50919050565b61189a806200066f6000396000f3fe608060405234801561001057600080fd5b50600436106101805760003560e01c806306fdde0314610185578063095ea7b3146101a357806318160ddd146101c65780631b8dca74146101d857806323b872dd146101e3578063313ce567146101f6578063355274ea1461020557806335e061fc1461020d578063395093511461021d57806342966c6814610230578063449a52f81461024557806347786d37146102585780634cd88b761461026b5780635c975abb1461027e5780635e81078d1461028957806370a082311461029c578063715018a6146102c557806379cc6790146102cd5780638d222f36146102e05780638da5cb5b146102f357806395d89b4114610313578063a0712d681461031b578063a457c2d71461032e578063a7fc7a0714610341578063a9059cbb14610354578063b429afeb14610367578063b93ea6a11461037a578063dd62ed3e1461038a578063e1c28bef1461039d578063e26c6f1b146103a5578063f2fde38b146103b8578063fa02c4b7146103cb575b600080fd5b61018d6103de565b60405161019a9190611640565b60405180910390f35b6101b66101b1366004611578565b610470565b604051901515815260200161019a565b6008545b60405190815260200161019a565b600b5460ff166101b6565b6101b66101f136600461153c565b61048e565b6040516012815260200161019a565b6005546101ca565b600b54610100900460ff166101b6565b6101b661022b366004611578565b6104b2565b61024361023e366004611627565b6104d4565b005b610243610253366004611578565b610511565b610243610266366004611627565b6105a2565b6102436102793660046115c4565b6105e3565b60005460ff166101b6565b6102436102973660046115a2565b61065c565b6101ca6102aa3660046114e7565b6001600160a01b031660009081526006602052604090205490565b6102436106ce565b6102436102db366004611578565b610709565b6101b66102ee3660046114e7565b610745565b6102fb610768565b6040516001600160a01b03909116815260200161019a565b61018d610777565b610243610329366004611627565b610786565b6101b661033c366004611578565b610813565b61024361034f3660046114e7565b61088e565b6101b6610362366004611578565b610917565b6101b66103753660046114e7565b610925565b600054610100900460ff166101b6565b6101ca610398366004611509565b610946565b610243610971565b6102436103b33660046115a2565b6109da565b6102436103c63660046114e7565b610a51565b6101b66103d9366004611578565b610af6565b6060600980546103ed906117dd565b80601f0160208091040260200160405190810160405280929190818152602001828054610419906117dd565b80156104665780601f1061043b57610100808354040283529160200191610466565b820191906000526020600020905b81548152906001019060200180831161044957829003601f168201915b5050505050905090565b60003361047e818585610b6b565b5060019392505050565b60085490565b60003361049c858285610c8f565b6104a7858585610d09565b506001949350505050565b60003361047e8185856104c58383610946565b6104cf91906117ae565b610b6b565b600b54610100900460ff166105045760405162461bcd60e51b81526004016104fb90611749565b60405180910390fd5b61050e3382610ed0565b50565b3360009081526003602052604090205460ff1615156001148061053357503033145b806105565750610541610768565b6001600160a01b0316306001600160a01b0316145b6105725760405162461bcd60e51b81526004016104fb9061177a565b600b5460ff166105945760405162461bcd60e51b81526004016104fb90611718565b61059e8282611018565b5050565b600554156105de5760405162461bcd60e51b8152602060048201526009602482015268696d6d757461626c6560b81b60448201526064016104fb565b600555565b60006105ef6001611163565b90508015610607576004805461ff0019166101001790555b61061183836111f2565b8015610657576004805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b3360009081526003602052604090205460ff1615156001148061067e57503033145b806106a1575061068c610768565b6001600160a01b0316306001600160a01b0316145b6106bd5760405162461bcd60e51b81526004016104fb9061177a565b600b805460ff191682151517905550565b336106d7610768565b6001600160a01b0316146106fd5760405162461bcd60e51b81526004016104fb906116e3565b6107076000611274565b565b600b54610100900460ff166107305760405162461bcd60e51b81526004016104fb90611749565b61073b823383610c8f565b61059e8282610ed0565b6001600160a01b03811660009081526001602052604081205460ff165b92915050565b6002546001600160a01b031690565b6060600a80546103ed906117dd565b3360009081526003602052604090205460ff161515600114806107a857503033145b806107cb57506107b6610768565b6001600160a01b0316306001600160a01b0316145b6107e75760405162461bcd60e51b81526004016104fb9061177a565b600b5460ff166108095760405162461bcd60e51b81526004016104fb90611718565b61050e3382611018565b600033816108218286610946565b9050838110156108815760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016104fb565b6104a78286868403610b6b565b3360009081526003602052604090205460ff161515600114806108b057503033145b806108d357506108be610768565b6001600160a01b0316306001600160a01b0316145b6108ef5760405162461bcd60e51b81526004016104fb9061177a565b61050e816001600160a01b03166000908152600360205260409020805460ff19166001179055565b60003361047e818585610d09565b6001600160a01b03811660009081526003602052604081205460ff16610762565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205490565b3360009081526003602052604090205460ff1615156001148061099357503033145b806109b657506109a1610768565b6001600160a01b0316306001600160a01b0316145b6109d25760405162461bcd60e51b81526004016104fb9061177a565b6107076112c6565b3360009081526003602052604090205460ff161515600114806109fc57503033145b80610a1f5750610a0a610768565b6001600160a01b0316306001600160a01b0316145b610a3b5760405162461bcd60e51b81526004016104fb9061177a565b600b805461ff0019166101008315150217905550565b33610a5a610768565b6001600160a01b031614610a805760405162461bcd60e51b81526004016104fb906116e3565b6001600160a01b038116610ae55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104fb565b610aee81611274565b61050e6112c6565b3360009081526003602052604081205460ff16151560011480610b1857503033145b80610b3b5750610b26610768565b6001600160a01b0316306001600160a01b0316145b610b575760405162461bcd60e51b81526004016104fb9061177a565b610b62838484610b6b565b50600192915050565b6001600160a01b038316610bcd5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016104fb565b6001600160a01b038216610c2e5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016104fb565b6001600160a01b0383811660008181526007602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000610c9b8484610946565b90506000198114610d035781811015610cf65760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016104fb565b610d038484848403610b6b565b50505050565b6001600160a01b038316610d6d5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016104fb565b6001600160a01b038216610dcf5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016104fb565b610dda838383611340565b6001600160a01b03831660009081526006602052604090205481811015610e525760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016104fb565b6001600160a01b03808516600090815260066020526040808220858503905591851681529081208054849290610e899084906117ae565b92505081905550826001600160a01b0316846001600160a01b031660008051602061184583398151915284604051610ec391815260200190565b60405180910390a3610d03565b6001600160a01b038216610f305760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016104fb565b610f3c82600083611340565b6001600160a01b03821660009081526006602052604090205481811015610fb05760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016104fb565b6001600160a01b0383166000908152600660205260408120838303905560088054849290610fdf9084906117c6565b90915550506040518281526000906001600160a01b038516906000805160206118458339815191529060200160405180910390a3505050565b600061102360055490565b111561108a576005548161103660085490565b61104091906117ae565b111561108a5760405162461bcd60e51b8152602060048201526019602482015278115490cc8c10d85c1c19590e8818d85c08195e18d959591959603a1b60448201526064016104fb565b6001600160a01b0382166110e05760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016104fb565b6110ec60008383611340565b80600860008282546110fe91906117ae565b90915550506001600160a01b0382166000908152600660205260408120805483929061112b9084906117ae565b90915550506040518181526001600160a01b038316906000906000805160206118458339815191529060200160405180910390a35050565b600454600090610100900460ff16156111ac578160ff1660011480156111885750303b155b6111a45760405162461bcd60e51b81526004016104fb90611695565b506000919050565b60045460ff8084169116106111d35760405162461bcd60e51b81526004016104fb90611695565b506004805460ff191660ff92909216919091179055600190565b919050565b600980546111ff906117dd565b15905061124d5760405162461bcd60e51b815260206004820152601c60248201527b115490cc8c081d1bdad95b881b985b5948185b1c9958591e481cd95d60221b60448201526064016104fb565b81516112609060099060208501906113ab565b50805161065790600a9060208401906113ab565b600280546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b3360009081526003602052604090205460ff161515600114806112e857503033145b8061130b57506112f6610768565b6001600160a01b0316306001600160a01b0316145b6113275760405162461bcd60e51b81526004016104fb9061177a565b336000908152600360205260409020805460ff19169055565b60005460ff16156113915760405162461bcd60e51b815260206004820152601b60248201527a1d1bdad95b881d1c985b9cd9995c881dda1a5b19481c185d5cd959602a1b60448201526064016104fb565b6001600160a01b0383161561065757610657838483610c8f565b8280546113b7906117dd565b90600052602060002090601f0160209004810192826113d9576000855561141f565b82601f106113f257805160ff191683800117855561141f565b8280016001018555821561141f579182015b8281111561141f578251825591602001919060010190611404565b5061142b92915061142f565b5090565b5b8082111561142b5760008155600101611430565b80356001600160a01b03811681146111ed57600080fd5b600082601f83011261146c57600080fd5b81356001600160401b03808211156114865761148661182e565b604051601f8301601f19908116603f011681019082821181831017156114ae576114ae61182e565b816040528381528660208588010111156114c757600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000602082840312156114f957600080fd5b61150282611444565b9392505050565b6000806040838503121561151c57600080fd5b61152583611444565b915061153360208401611444565b90509250929050565b60008060006060848603121561155157600080fd5b61155a84611444565b925061156860208501611444565b9150604084013590509250925092565b6000806040838503121561158b57600080fd5b61159483611444565b946020939093013593505050565b6000602082840312156115b457600080fd5b8135801515811461150257600080fd5b600080604083850312156115d757600080fd5b82356001600160401b03808211156115ee57600080fd5b6115fa8683870161145b565b9350602085013591508082111561161057600080fd5b5061161d8582860161145b565b9150509250929050565b60006020828403121561163957600080fd5b5035919050565b600060208083528351808285015260005b8181101561166d57858101830151858201604001528201611651565b8181111561167f576000604083870101525b50601f01601f1916929092016040019392505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526017908201527636b4b73a34b7339034b9903737ba1030b63637bbb2b21760491b604082015260600190565b602080825260179082015276213ab93734b7339034b9903737ba1030b63637bbb2b21760491b604082015260600190565b6020808252601a908201527931b0b63632b91034b9903737ba10309031b7b73a3937b63632b960311b604082015260600190565b600082198211156117c1576117c1611818565b500190565b6000828210156117d8576117d8611818565b500390565b600181811c908216806117f157607f821691505b6020821081141561181257634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220a3b00e10cd093354a835a227a41378fb1603ed59adca0bb17c63196201ca0f3b64736f6c63430008060033",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH3 0x27 CALLER PUSH3 0xC4 JUMP JUMPDEST PUSH3 0x50 CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0xB DUP1 SLOAD PUSH2 0xFFFF NOT AND PUSH2 0x101 OR SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x7 DUP1 DUP3 MSTORE PUSH7 0x54657374444149 PUSH1 0xC8 SHL PUSH1 0x20 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP4 MLOAD DUP1 DUP6 ADD SWAP1 SWAP5 MSTORE SWAP1 DUP4 MSTORE PUSH7 0x54455354444149 PUSH1 0xC8 SHL SWAP1 DUP4 ADD MSTORE PUSH3 0xA6 SWAP2 PUSH3 0x116 JUMP JUMPDEST PUSH3 0xBE CALLER PUSH12 0x33B2E3C9FD0803CE8000000 PUSH3 0x1AA JUMP JUMPDEST PUSH3 0x65F JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x9 DUP1 SLOAD PUSH3 0x125 SWAP1 PUSH3 0x622 JUMP JUMPDEST ISZERO SWAP1 POP PUSH3 0x17A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243323020746F6B656E206E616D6520616C72656164792073657400000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 MLOAD PUSH3 0x18F SWAP1 PUSH1 0x9 SWAP1 PUSH1 0x20 DUP6 ADD SWAP1 PUSH3 0x555 JUMP JUMPDEST POP DUP1 MLOAD PUSH3 0x1A5 SWAP1 PUSH1 0xA SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH3 0x555 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x1B6 PUSH1 0x5 SLOAD SWAP1 JUMP JUMPDEST GT ISZERO PUSH3 0x232 JUMPI PUSH1 0x5 SLOAD DUP2 PUSH3 0x1D6 PUSH3 0x325 PUSH1 0x20 SHL PUSH3 0x488 OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x1E2 SWAP2 SWAP1 PUSH3 0x5FB JUMP JUMPDEST GT ISZERO PUSH3 0x232 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332304361707065643A2063617020657863656564656400000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x171 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH3 0x28A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x171 JUMP JUMPDEST PUSH3 0x298 PUSH1 0x0 DUP4 DUP4 PUSH3 0x32B JUMP JUMPDEST DUP1 PUSH1 0x8 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH3 0x2AC SWAP2 SWAP1 PUSH3 0x5FB JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH3 0x2DB SWAP1 DUP5 SWAP1 PUSH3 0x5FB JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH1 0x0 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x8 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO PUSH3 0x380 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x746F6B656E207472616E73666572207768696C65207061757365640000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x171 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO PUSH3 0x1A5 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH3 0x1A5 SWAP1 DUP5 SWAP1 DUP2 SWAP1 DUP5 SWAP1 PUSH1 0x0 NOT DUP2 EQ PUSH3 0x427 JUMPI DUP2 DUP2 LT ISZERO PUSH3 0x418 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x171 JUMP JUMPDEST PUSH3 0x427 DUP5 DUP5 DUP5 DUP5 SUB PUSH3 0x42D JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH3 0x491 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x171 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH3 0x4F4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x171 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH3 0x563 SWAP1 PUSH3 0x622 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0x587 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0x5D2 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0x5A2 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0x5D2 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0x5D2 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0x5D2 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x5B5 JUMP JUMPDEST POP PUSH3 0x5E0 SWAP3 SWAP2 POP PUSH3 0x5E4 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x5E0 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x5E5 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH3 0x61D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x637 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH3 0x659 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x189A DUP1 PUSH3 0x66F PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x180 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x185 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x1A3 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x1C6 JUMPI DUP1 PUSH4 0x1B8DCA74 EQ PUSH2 0x1D8 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1E3 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x1F6 JUMPI DUP1 PUSH4 0x355274EA EQ PUSH2 0x205 JUMPI DUP1 PUSH4 0x35E061FC EQ PUSH2 0x20D JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x21D JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x230 JUMPI DUP1 PUSH4 0x449A52F8 EQ PUSH2 0x245 JUMPI DUP1 PUSH4 0x47786D37 EQ PUSH2 0x258 JUMPI DUP1 PUSH4 0x4CD88B76 EQ PUSH2 0x26B JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x27E JUMPI DUP1 PUSH4 0x5E81078D EQ PUSH2 0x289 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x29C JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x2C5 JUMPI DUP1 PUSH4 0x79CC6790 EQ PUSH2 0x2CD JUMPI DUP1 PUSH4 0x8D222F36 EQ PUSH2 0x2E0 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x2F3 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x313 JUMPI DUP1 PUSH4 0xA0712D68 EQ PUSH2 0x31B JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x32E JUMPI DUP1 PUSH4 0xA7FC7A07 EQ PUSH2 0x341 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x354 JUMPI DUP1 PUSH4 0xB429AFEB EQ PUSH2 0x367 JUMPI DUP1 PUSH4 0xB93EA6A1 EQ PUSH2 0x37A JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x38A JUMPI DUP1 PUSH4 0xE1C28BEF EQ PUSH2 0x39D JUMPI DUP1 PUSH4 0xE26C6F1B EQ PUSH2 0x3A5 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x3B8 JUMPI DUP1 PUSH4 0xFA02C4B7 EQ PUSH2 0x3CB JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x18D PUSH2 0x3DE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x19A SWAP2 SWAP1 PUSH2 0x1640 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1B6 PUSH2 0x1B1 CALLDATASIZE PUSH1 0x4 PUSH2 0x1578 JUMP JUMPDEST PUSH2 0x470 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x19A JUMP JUMPDEST PUSH1 0x8 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x19A JUMP JUMPDEST PUSH1 0xB SLOAD PUSH1 0xFF AND PUSH2 0x1B6 JUMP JUMPDEST PUSH2 0x1B6 PUSH2 0x1F1 CALLDATASIZE PUSH1 0x4 PUSH2 0x153C JUMP JUMPDEST PUSH2 0x48E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x19A JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH2 0x1CA JUMP JUMPDEST PUSH1 0xB SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1B6 JUMP JUMPDEST PUSH2 0x1B6 PUSH2 0x22B CALLDATASIZE PUSH1 0x4 PUSH2 0x1578 JUMP JUMPDEST PUSH2 0x4B2 JUMP JUMPDEST PUSH2 0x243 PUSH2 0x23E CALLDATASIZE PUSH1 0x4 PUSH2 0x1627 JUMP JUMPDEST PUSH2 0x4D4 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x243 PUSH2 0x253 CALLDATASIZE PUSH1 0x4 PUSH2 0x1578 JUMP JUMPDEST PUSH2 0x511 JUMP JUMPDEST PUSH2 0x243 PUSH2 0x266 CALLDATASIZE PUSH1 0x4 PUSH2 0x1627 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST PUSH2 0x243 PUSH2 0x279 CALLDATASIZE PUSH1 0x4 PUSH2 0x15C4 JUMP JUMPDEST PUSH2 0x5E3 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF AND PUSH2 0x1B6 JUMP JUMPDEST PUSH2 0x243 PUSH2 0x297 CALLDATASIZE PUSH1 0x4 PUSH2 0x15A2 JUMP JUMPDEST PUSH2 0x65C JUMP JUMPDEST PUSH2 0x1CA PUSH2 0x2AA CALLDATASIZE PUSH1 0x4 PUSH2 0x14E7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x243 PUSH2 0x6CE JUMP JUMPDEST PUSH2 0x243 PUSH2 0x2DB CALLDATASIZE PUSH1 0x4 PUSH2 0x1578 JUMP JUMPDEST PUSH2 0x709 JUMP JUMPDEST PUSH2 0x1B6 PUSH2 0x2EE CALLDATASIZE PUSH1 0x4 PUSH2 0x14E7 JUMP JUMPDEST PUSH2 0x745 JUMP JUMPDEST PUSH2 0x2FB PUSH2 0x768 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x19A JUMP JUMPDEST PUSH2 0x18D PUSH2 0x777 JUMP JUMPDEST PUSH2 0x243 PUSH2 0x329 CALLDATASIZE PUSH1 0x4 PUSH2 0x1627 JUMP JUMPDEST PUSH2 0x786 JUMP JUMPDEST PUSH2 0x1B6 PUSH2 0x33C CALLDATASIZE PUSH1 0x4 PUSH2 0x1578 JUMP JUMPDEST PUSH2 0x813 JUMP JUMPDEST PUSH2 0x243 PUSH2 0x34F CALLDATASIZE PUSH1 0x4 PUSH2 0x14E7 JUMP JUMPDEST PUSH2 0x88E JUMP JUMPDEST PUSH2 0x1B6 PUSH2 0x362 CALLDATASIZE PUSH1 0x4 PUSH2 0x1578 JUMP JUMPDEST PUSH2 0x917 JUMP JUMPDEST PUSH2 0x1B6 PUSH2 0x375 CALLDATASIZE PUSH1 0x4 PUSH2 0x14E7 JUMP JUMPDEST PUSH2 0x925 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1B6 JUMP JUMPDEST PUSH2 0x1CA PUSH2 0x398 CALLDATASIZE PUSH1 0x4 PUSH2 0x1509 JUMP JUMPDEST PUSH2 0x946 JUMP JUMPDEST PUSH2 0x243 PUSH2 0x971 JUMP JUMPDEST PUSH2 0x243 PUSH2 0x3B3 CALLDATASIZE PUSH1 0x4 PUSH2 0x15A2 JUMP JUMPDEST PUSH2 0x9DA JUMP JUMPDEST PUSH2 0x243 PUSH2 0x3C6 CALLDATASIZE PUSH1 0x4 PUSH2 0x14E7 JUMP JUMPDEST PUSH2 0xA51 JUMP JUMPDEST PUSH2 0x1B6 PUSH2 0x3D9 CALLDATASIZE PUSH1 0x4 PUSH2 0x1578 JUMP JUMPDEST PUSH2 0xAF6 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x9 DUP1 SLOAD PUSH2 0x3ED SWAP1 PUSH2 0x17DD JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x419 SWAP1 PUSH2 0x17DD JUMP JUMPDEST DUP1 ISZERO PUSH2 0x466 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x43B JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x466 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x449 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x47E DUP2 DUP6 DUP6 PUSH2 0xB6B JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x8 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x49C DUP6 DUP3 DUP6 PUSH2 0xC8F JUMP JUMPDEST PUSH2 0x4A7 DUP6 DUP6 DUP6 PUSH2 0xD09 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x47E DUP2 DUP6 DUP6 PUSH2 0x4C5 DUP4 DUP4 PUSH2 0x946 JUMP JUMPDEST PUSH2 0x4CF SWAP2 SWAP1 PUSH2 0x17AE JUMP JUMPDEST PUSH2 0xB6B JUMP JUMPDEST PUSH1 0xB SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x504 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4FB SWAP1 PUSH2 0x1749 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x50E CALLER DUP3 PUSH2 0xED0 JUMP JUMPDEST POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x1 EQ DUP1 PUSH2 0x533 JUMPI POP ADDRESS CALLER EQ JUMPDEST DUP1 PUSH2 0x556 JUMPI POP PUSH2 0x541 PUSH2 0x768 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST PUSH2 0x572 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4FB SWAP1 PUSH2 0x177A JUMP JUMPDEST PUSH1 0xB SLOAD PUSH1 0xFF AND PUSH2 0x594 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4FB SWAP1 PUSH2 0x1718 JUMP JUMPDEST PUSH2 0x59E DUP3 DUP3 PUSH2 0x1018 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x5 SLOAD ISZERO PUSH2 0x5DE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x9 PUSH1 0x24 DUP3 ADD MSTORE PUSH9 0x696D6D757461626C65 PUSH1 0xB8 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4FB JUMP JUMPDEST PUSH1 0x5 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5EF PUSH1 0x1 PUSH2 0x1163 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x607 JUMPI PUSH1 0x4 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE JUMPDEST PUSH2 0x611 DUP4 DUP4 PUSH2 0x11F2 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x657 JUMPI PUSH1 0x4 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x1 EQ DUP1 PUSH2 0x67E JUMPI POP ADDRESS CALLER EQ JUMPDEST DUP1 PUSH2 0x6A1 JUMPI POP PUSH2 0x68C PUSH2 0x768 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST PUSH2 0x6BD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4FB SWAP1 PUSH2 0x177A JUMP JUMPDEST PUSH1 0xB DUP1 SLOAD PUSH1 0xFF NOT AND DUP3 ISZERO ISZERO OR SWAP1 SSTORE POP JUMP JUMPDEST CALLER PUSH2 0x6D7 PUSH2 0x768 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x6FD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4FB SWAP1 PUSH2 0x16E3 JUMP JUMPDEST PUSH2 0x707 PUSH1 0x0 PUSH2 0x1274 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0xB SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x730 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4FB SWAP1 PUSH2 0x1749 JUMP JUMPDEST PUSH2 0x73B DUP3 CALLER DUP4 PUSH2 0xC8F JUMP JUMPDEST PUSH2 0x59E DUP3 DUP3 PUSH2 0xED0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0xFF AND JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0xA DUP1 SLOAD PUSH2 0x3ED SWAP1 PUSH2 0x17DD JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x1 EQ DUP1 PUSH2 0x7A8 JUMPI POP ADDRESS CALLER EQ JUMPDEST DUP1 PUSH2 0x7CB JUMPI POP PUSH2 0x7B6 PUSH2 0x768 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST PUSH2 0x7E7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4FB SWAP1 PUSH2 0x177A JUMP JUMPDEST PUSH1 0xB SLOAD PUSH1 0xFF AND PUSH2 0x809 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4FB SWAP1 PUSH2 0x1718 JUMP JUMPDEST PUSH2 0x50E CALLER DUP3 PUSH2 0x1018 JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 PUSH2 0x821 DUP3 DUP7 PUSH2 0x946 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x881 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4FB JUMP JUMPDEST PUSH2 0x4A7 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0xB6B JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x1 EQ DUP1 PUSH2 0x8B0 JUMPI POP ADDRESS CALLER EQ JUMPDEST DUP1 PUSH2 0x8D3 JUMPI POP PUSH2 0x8BE PUSH2 0x768 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST PUSH2 0x8EF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4FB SWAP1 PUSH2 0x177A JUMP JUMPDEST PUSH2 0x50E DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x47E DUP2 DUP6 DUP6 PUSH2 0xD09 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x762 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x1 EQ DUP1 PUSH2 0x993 JUMPI POP ADDRESS CALLER EQ JUMPDEST DUP1 PUSH2 0x9B6 JUMPI POP PUSH2 0x9A1 PUSH2 0x768 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST PUSH2 0x9D2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4FB SWAP1 PUSH2 0x177A JUMP JUMPDEST PUSH2 0x707 PUSH2 0x12C6 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x1 EQ DUP1 PUSH2 0x9FC JUMPI POP ADDRESS CALLER EQ JUMPDEST DUP1 PUSH2 0xA1F JUMPI POP PUSH2 0xA0A PUSH2 0x768 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST PUSH2 0xA3B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4FB SWAP1 PUSH2 0x177A JUMP JUMPDEST PUSH1 0xB DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMP JUMPDEST CALLER PUSH2 0xA5A PUSH2 0x768 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xA80 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4FB SWAP1 PUSH2 0x16E3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xAE5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4FB JUMP JUMPDEST PUSH2 0xAEE DUP2 PUSH2 0x1274 JUMP JUMPDEST PUSH2 0x50E PUSH2 0x12C6 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x1 EQ DUP1 PUSH2 0xB18 JUMPI POP ADDRESS CALLER EQ JUMPDEST DUP1 PUSH2 0xB3B JUMPI POP PUSH2 0xB26 PUSH2 0x768 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST PUSH2 0xB57 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4FB SWAP1 PUSH2 0x177A JUMP JUMPDEST PUSH2 0xB62 DUP4 DUP5 DUP5 PUSH2 0xB6B JUMP JUMPDEST POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xBCD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4FB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xC2E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4FB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC9B DUP5 DUP5 PUSH2 0x946 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 NOT DUP2 EQ PUSH2 0xD03 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0xCF6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4FB JUMP JUMPDEST PUSH2 0xD03 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0xB6B JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xD6D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4FB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xDCF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4FB JUMP JUMPDEST PUSH2 0xDDA DUP4 DUP4 DUP4 PUSH2 0x1340 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0xE52 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4FB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP2 DUP6 AND DUP2 MSTORE SWAP1 DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0xE89 SWAP1 DUP5 SWAP1 PUSH2 0x17AE JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1845 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH1 0x40 MLOAD PUSH2 0xEC3 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0xD03 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xF30 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E2066726F6D20746865207A65726F20616464726573 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x73 PUSH1 0xF8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4FB JUMP JUMPDEST PUSH2 0xF3C DUP3 PUSH1 0x0 DUP4 PUSH2 0x1340 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0xFB0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E20616D6F756E7420657863656564732062616C616E PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x6365 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4FB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP4 DUP4 SUB SWAP1 SSTORE PUSH1 0x8 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0xFDF SWAP1 DUP5 SWAP1 PUSH2 0x17C6 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1845 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1023 PUSH1 0x5 SLOAD SWAP1 JUMP JUMPDEST GT ISZERO PUSH2 0x108A JUMPI PUSH1 0x5 SLOAD DUP2 PUSH2 0x1036 PUSH1 0x8 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x1040 SWAP2 SWAP1 PUSH2 0x17AE JUMP JUMPDEST GT ISZERO PUSH2 0x108A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH25 0x115490CC8C10D85C1C19590E8818D85C08195E18D959591959 PUSH1 0x3A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4FB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x10E0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4FB JUMP JUMPDEST PUSH2 0x10EC PUSH1 0x0 DUP4 DUP4 PUSH2 0x1340 JUMP JUMPDEST DUP1 PUSH1 0x8 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x10FE SWAP2 SWAP1 PUSH2 0x17AE JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x112B SWAP1 DUP5 SWAP1 PUSH2 0x17AE JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH1 0x0 SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1845 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x0 SWAP1 PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x11AC JUMPI DUP2 PUSH1 0xFF AND PUSH1 0x1 EQ DUP1 ISZERO PUSH2 0x1188 JUMPI POP ADDRESS EXTCODESIZE ISZERO JUMPDEST PUSH2 0x11A4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4FB SWAP1 PUSH2 0x1695 JUMP JUMPDEST POP PUSH1 0x0 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0xFF DUP1 DUP5 AND SWAP2 AND LT PUSH2 0x11D3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4FB SWAP1 PUSH2 0x1695 JUMP JUMPDEST POP PUSH1 0x4 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0xFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x1 SWAP1 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x9 DUP1 SLOAD PUSH2 0x11FF SWAP1 PUSH2 0x17DD JUMP JUMPDEST ISZERO SWAP1 POP PUSH2 0x124D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH28 0x115490CC8C081D1BDAD95B881B985B5948185B1C9958591E481CD95D PUSH1 0x22 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4FB JUMP JUMPDEST DUP2 MLOAD PUSH2 0x1260 SWAP1 PUSH1 0x9 SWAP1 PUSH1 0x20 DUP6 ADD SWAP1 PUSH2 0x13AB JUMP JUMPDEST POP DUP1 MLOAD PUSH2 0x657 SWAP1 PUSH1 0xA SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH2 0x13AB JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x1 EQ DUP1 PUSH2 0x12E8 JUMPI POP ADDRESS CALLER EQ JUMPDEST DUP1 PUSH2 0x130B JUMPI POP PUSH2 0x12F6 PUSH2 0x768 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST PUSH2 0x1327 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4FB SWAP1 PUSH2 0x177A JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1391 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH27 0x1D1BDAD95B881D1C985B9CD9995C881DDA1A5B19481C185D5CD959 PUSH1 0x2A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4FB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO PUSH2 0x657 JUMPI PUSH2 0x657 DUP4 DUP5 DUP4 PUSH2 0xC8F JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0x13B7 SWAP1 PUSH2 0x17DD JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x13D9 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x141F JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x13F2 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x141F JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x141F JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x141F JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x1404 JUMP JUMPDEST POP PUSH2 0x142B SWAP3 SWAP2 POP PUSH2 0x142F JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x142B JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x1430 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x11ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x146C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x1486 JUMPI PUSH2 0x1486 PUSH2 0x182E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x14AE JUMPI PUSH2 0x14AE PUSH2 0x182E JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE DUP7 PUSH1 0x20 DUP6 DUP9 ADD ADD GT ISZERO PUSH2 0x14C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 PUSH1 0x20 DUP8 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP6 DUP4 ADD ADD MSTORE DUP1 SWAP5 POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x14F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1502 DUP3 PUSH2 0x1444 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x151C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1525 DUP4 PUSH2 0x1444 JUMP JUMPDEST SWAP2 POP PUSH2 0x1533 PUSH1 0x20 DUP5 ADD PUSH2 0x1444 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1551 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x155A DUP5 PUSH2 0x1444 JUMP JUMPDEST SWAP3 POP PUSH2 0x1568 PUSH1 0x20 DUP6 ADD PUSH2 0x1444 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x158B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1594 DUP4 PUSH2 0x1444 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x15B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1502 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x15D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x15EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x15FA DUP7 DUP4 DUP8 ADD PUSH2 0x145B JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1610 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x161D DUP6 DUP3 DUP7 ADD PUSH2 0x145B JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1639 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x166D JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x1651 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x167F JUMPI PUSH1 0x0 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2E SWAP1 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x40 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH23 0x36B4B73A34B7339034B9903737BA1030B63637BBB2B217 PUSH1 0x49 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH23 0x213AB93734B7339034B9903737BA1030B63637BBB2B217 PUSH1 0x49 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1A SWAP1 DUP3 ADD MSTORE PUSH26 0x31B0B63632B91034B9903737BA10309031B7B73A3937B63632B9 PUSH1 0x31 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x17C1 JUMPI PUSH2 0x17C1 PUSH2 0x1818 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x17D8 JUMPI PUSH2 0x17D8 PUSH2 0x1818 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x17F1 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x1812 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID 0xDD CALLCODE MSTORE 0xAD SHL 0xE2 0xC8 SWAP12 PUSH10 0xC2B068FC378DAA952BA7 CALL PUSH4 0xC4A11628 CREATE2 GAS 0x4D CREATE2 0x23 0xB3 0xEF LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG3 0xB0 0xE LT 0xCD MULMOD CALLER SLOAD 0xA8 CALLDATALOAD LOG2 0x27 LOG4 SGT PUSH25 0xFB1603ED59ADCA0BB17C63196201CA0F3B64736F6C63430008 MOD STOP CALLER ",
          "sourceMap": "86:216:68:-:0;;;118:182;;;;;;;;;-1:-1:-1;991:5:8;981:15;;-1:-1:-1;;981:15:8;;;921:32:0;719:10:15;921:18:0;:32::i;:::-;2083:26:63;2098:10;-1:-1:-1;;;;;804:25:17;;;;;:12;:25;;;;;:32;;-1:-1:-1;;804:32:17;832:4;804:32;;;740:103;2083:26:63;2119:10;:17;;-1:-1:-1;;2146:17:63;;;;;198:38:68::1;::::0;;;;::::1;::::0;;::::1;::::0;;;-1:-1:-1;;;198:38:68::1;::::0;;::::1;::::0;;;;;;;;::::1;::::0;;;;;;-1:-1:-1;;;198:38:68;;::::1;::::0;::::1;::::0;:16:::1;:38::i;:::-;246:47;252:10;264:28;246:5;:47::i;:::-;86:216:::0;;2270:187:0;2362:6;;;-1:-1:-1;;;;;2378:17:0;;;-1:-1:-1;;;;;;2378:17:0;;;;;;;2410:40;;2362:6;;;2378:17;2362:6;;2410:40;;2343:16;;2410:40;2333:124;2270:187;:::o;5150:211:63:-;5253:5;5247:19;;;;;:::i;:::-;:24;;-1:-1:-1;5239:65:63;;;;-1:-1:-1;;;5239:65:63;;977:2:78;5239:65:63;;;959:21:78;1016:2;996:18;;;989:30;1055;1035:18;;;1028:58;1103:18;;5239:65:63;;;;;;;;;5314:13;;;;:5;;:13;;;;;:::i;:::-;-1:-1:-1;5337:17:63;;;;:7;;:17;;;;;:::i;:::-;;5150:211;;:::o;12638:488::-;12724:1;12716:5;7077:4;;;7007:81;12716:5;:9;12713:89;;;7077:4;;12757:6;12735:19;:17;;;;;:19;;:::i;:::-;:28;;;;:::i;:::-;:37;;12727:75;;;;-1:-1:-1;;;12727:75:63;;1690:2:78;12727:75:63;;;1672:21:78;1729:2;1709:18;;;1702:30;1768:27;1748:18;;;1741:55;1813:18;;12727:75:63;1662:175:78;12727:75:63;-1:-1:-1;;;;;12820:21:63;;12812:65;;;;-1:-1:-1;;;12812:65:63;;2449:2:78;12812:65:63;;;2431:21:78;2488:2;2468:18;;;2461:30;2527:33;2507:18;;;2500:61;2578:18;;12812:65:63;2421:181:78;12812:65:63;12888:49;12917:1;12921:7;12930:6;12888:20;:49::i;:::-;12964:6;12948:12;;:22;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;;;12980:18:63;;;;;;:9;:18;;;;;:28;;13002:6;;12980:18;:28;;13002:6;;12980:28;:::i;:::-;;;;-1:-1:-1;;13023:37:63;;2753:25:78;;;-1:-1:-1;;;;;13023:37:63;;;13040:1;;13023:37;;2741:2:78;2726:18;13023:37:63;;;;;;;12638:488;;:::o;6635:106::-;6722:12;;;6635:106::o;16121:250::-;1145:4:8;1168:7;;;16255:9:63;16247:49;;;;-1:-1:-1;;;16247:49:63;;1334:2:78;16247:49:63;;;1316:21:78;1373:2;1353:18;;;1346:30;1412:29;1392:18;;;1385:57;1459:18;;16247:49:63;1306:177:78;16247:49:63;-1:-1:-1;;;;;16309:18:63;;;16306:58;;-1:-1:-1;;;;;7841:18:63;;15226:24;7841:18;;;:11;:18;;;;;;;;:27;;;;;;16329:35;;7841:18;;;;16357:6;;-1:-1:-1;;15292:37:63;;15288:243;;15373:6;15353:16;:26;;15345:68;;;;-1:-1:-1;;;15345:68:63;;619:2:78;15345:68:63;;;601:21:78;658:2;638:18;;;631:30;697:31;677:18;;;670:59;746:18;;15345:68:63;591:179:78;15345:68:63;15455:51;15464:5;15471:7;15480:25;;;15455:8;:51::i;:::-;15216:321;15096:441;;;:::o;14445:370::-;-1:-1:-1;;;;;14576:19:63;;14568:68;;;;-1:-1:-1;;;14568:68:63;;2044:2:78;14568:68:63;;;2026:21:78;2083:2;2063:18;;;2056:30;2122:34;2102:18;;;2095:62;-1:-1:-1;;;2173:18:78;;;2166:34;2217:19;;14568:68:63;2016:226:78;14568:68:63;-1:-1:-1;;;;;14654:21:63;;14646:68;;;;-1:-1:-1;;;14646:68:63;;216:2:78;14646:68:63;;;198:21:78;255:2;235:18;;;228:30;294:34;274:18;;;267:62;-1:-1:-1;;;345:18:78;;;338:32;387:19;;14646:68:63;188:224:78;14646:68:63;-1:-1:-1;;;;;14725:18:63;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;14776:32;;2753:25:78;;;14776:32:63;;2726:18:78;14776:32:63;;;;;;;14445:370;;;:::o;86:216:68:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;86:216:68;;;-1:-1:-1;86:216:68;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;2789:225:78;2829:3;2860:1;2856:6;2853:1;2850:13;2847:2;;;2905:10;2900:3;2896:20;2893:1;2886:31;2940:4;2937:1;2930:15;2968:4;2965:1;2958:15;2847:2;-1:-1:-1;2999:9:78;;2837:177::o;3019:380::-;3098:1;3094:12;;;;3141;;;3162:2;;3216:4;3208:6;3204:17;3194:27;;3162:2;3269;3261:6;3258:14;3238:18;3235:38;3232:2;;;3315:10;3310:3;3306:20;3303:1;3296:31;3350:4;3347:1;3340:15;3378:4;3375:1;3368:15;3232:2;;3074:325;;;:::o;:::-;86:216:68;;;;;;"
        },
        "deployedBytecode": {
          "functionDebugData": {
            "@_addController_1115": {
              "entryPoint": null,
              "id": 1115,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_afterTokenTransfer_7698": {
              "entryPoint": null,
              "id": 7698,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@_approve_7613": {
              "entryPoint": 2923,
              "id": 7613,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@_approvedSeller_7779": {
              "entryPoint": null,
              "id": 7779,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@_beforeTokenTransfer_7687": {
              "entryPoint": 4928,
              "id": 7687,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@_burn_7568": {
              "entryPoint": 3792,
              "id": 7568,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_initializeToken_7052": {
              "entryPoint": 4594,
              "id": 7052,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_isController_1145": {
              "entryPoint": null,
              "id": 1145,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@_mint_7496": {
              "entryPoint": 4120,
              "id": 7496,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_msgSender_1035": {
              "entryPoint": null,
              "id": 1035,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@_relinquishControl_1168": {
              "entryPoint": 4806,
              "id": 1168,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_setAllowBurn_6939": {
              "entryPoint": null,
              "id": 6939,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_setAllowMint_7012": {
              "entryPoint": null,
              "id": 7012,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_setInitializedVersion_263": {
              "entryPoint": 4451,
              "id": 263,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@_spendAllowance_7656": {
              "entryPoint": 3215,
              "id": 7656,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@_transferOwnership_103": {
              "entryPoint": 4724,
              "id": 103,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_transfer_7423": {
              "entryPoint": 3337,
              "id": 7423,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@addController_1103": {
              "entryPoint": 2190,
              "id": 1103,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@allowBurn_6928": {
              "entryPoint": null,
              "id": 6928,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@allowMint_7001": {
              "entryPoint": null,
              "id": 7001,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@allowance_7197": {
              "entryPoint": 2374,
              "id": 7197,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@approveTransfer_7243": {
              "entryPoint": 2806,
              "id": 7243,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@approve_7222": {
              "entryPoint": 1136,
              "id": 7222,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@approvedSeller_7791": {
              "entryPoint": 1861,
              "id": 7791,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@balanceOf_7118": {
              "entryPoint": null,
              "id": 7118,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@burnFrom_6919": {
              "entryPoint": 1801,
              "id": 6919,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@burn_6893": {
              "entryPoint": 1236,
              "id": 6893,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@cap_7127": {
              "entryPoint": null,
              "id": 7127,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@decimals_7094": {
              "entryPoint": null,
              "id": 7094,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@decreaseAllowance_7346": {
              "entryPoint": 2067,
              "id": 7346,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@increaseAllowance_7305": {
              "entryPoint": 1202,
              "id": 7305,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@initialize_7067": {
              "entryPoint": 1507,
              "id": 7067,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@isContract_746": {
              "entryPoint": null,
              "id": 746,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@isController_1131": {
              "entryPoint": 2341,
              "id": 1131,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@mintTo_6993": {
              "entryPoint": 1297,
              "id": 6993,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@mint_6972": {
              "entryPoint": 1926,
              "id": 6972,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@name_7076": {
              "entryPoint": 990,
              "id": 7076,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@owner_32": {
              "entryPoint": 1896,
              "id": 32,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@paused_300": {
              "entryPoint": null,
              "id": 300,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@relinquishControl_1156": {
              "entryPoint": 2417,
              "id": 1156,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@renounceOwnership_60": {
              "entryPoint": 1742,
              "id": 60,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@requireSellerApproval_7802": {
              "entryPoint": null,
              "id": 7802,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@setAllowBurn_6952": {
              "entryPoint": 2522,
              "id": 6952,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@setAllowMint_7025": {
              "entryPoint": 1628,
              "id": 7025,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@setCap_7154": {
              "entryPoint": 1442,
              "id": 7154,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@symbol_7085": {
              "entryPoint": 1911,
              "id": 7085,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@totalSupply_7104": {
              "entryPoint": 1160,
              "id": 7104,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@transferFrom_7276": {
              "entryPoint": 1166,
              "id": 7276,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "@transferOwnership_6875": {
              "entryPoint": 2641,
              "id": 6875,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@transfer_7179": {
              "entryPoint": 2327,
              "id": 7179,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_address": {
              "entryPoint": 5188,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_decode_string": {
              "entryPoint": 5211,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_address": {
              "entryPoint": 5351,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_addresst_address": {
              "entryPoint": 5385,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_addresst_addresst_uint256": {
              "entryPoint": 5436,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 3
            },
            "abi_decode_tuple_t_addresst_uint256": {
              "entryPoint": 5496,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_bool": {
              "entryPoint": 5538,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr": {
              "entryPoint": 5572,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_uint256": {
              "entryPoint": 5671,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 5696,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_1579d012ead512dcb248c91571fa46aaa0f3399f8d3e1098fac22575db2ed693__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 5781,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 5859,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_9e951774488935d57ea9d769729997b4aaffd61b153105ff9654b1ba7b2eb087__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 5912,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_a19197f3e02d3e1cbde1d2c6c62a4f90a6efd641d75db007071ca4ee16948014__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_ad173bcb41777677ea910498ce7885f14bb8fcd55d38ead4e093ea97430b0d55__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 5961,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_b80809d1aa1457ca4f3a22b37b5844c6ef16ca06c98e63183067df6d724f2917__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_c0532a65ade852f12d67926b1625bbc98f7eb7c650703bf531fd4e07ded2c49f__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_fefec1202c366861bd181e506ae877478f62e789b268f438bd47cadf3a4f5079__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 6010,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_add_t_uint256": {
              "entryPoint": 6062,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_sub_t_uint256": {
              "entryPoint": 6086,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "extract_byte_array_length": {
              "entryPoint": 6109,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "panic_error_0x11": {
              "entryPoint": 6168,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x41": {
              "entryPoint": 6190,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            }
          },
          "generatedSources": [
            {
              "ast": {
                "nodeType": "YulBlock",
                "src": "0:13056:78",
                "statements": [
                  {
                    "nodeType": "YulBlock",
                    "src": "6:3:78",
                    "statements": []
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "63:124:78",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "73:29:78",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "95:6:78"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "82:12:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "82:20:78"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "73:5:78"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "165:16:78",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "174:1:78",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "177:1:78",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "167:6:78"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "167:12:78"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "167:12:78"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "124:5:78"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "135:5:78"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "150:3:78",
                                                "type": "",
                                                "value": "160"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "155:1:78",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "shl",
                                              "nodeType": "YulIdentifier",
                                              "src": "146:3:78"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "146:11:78"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "159:1:78",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sub",
                                          "nodeType": "YulIdentifier",
                                          "src": "142:3:78"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "142:19:78"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "131:3:78"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "131:31:78"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "121:2:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "121:42:78"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "114:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "114:50:78"
                          },
                          "nodeType": "YulIf",
                          "src": "111:2:78"
                        }
                      ]
                    },
                    "name": "abi_decode_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "42:6:78",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "53:5:78",
                        "type": ""
                      }
                    ],
                    "src": "14:173:78"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "245:666:78",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "294:16:78",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "303:1:78",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "306:1:78",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "296:6:78"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "296:12:78"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "296:12:78"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "273:6:78"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "281:4:78",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "269:3:78"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "269:17:78"
                                  },
                                  {
                                    "name": "end",
                                    "nodeType": "YulIdentifier",
                                    "src": "288:3:78"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "265:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "265:27:78"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "258:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "258:35:78"
                          },
                          "nodeType": "YulIf",
                          "src": "255:2:78"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "319:30:78",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "342:6:78"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "329:12:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "329:20:78"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "323:2:78",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "358:28:78",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "376:2:78",
                                    "type": "",
                                    "value": "64"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "380:1:78",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "372:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "372:10:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "384:1:78",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "368:3:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "368:18:78"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "362:2:78",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "409:22:78",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "411:16:78"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "411:18:78"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "411:18:78"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "401:2:78"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "405:2:78"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "398:2:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "398:10:78"
                          },
                          "nodeType": "YulIf",
                          "src": "395:2:78"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "440:17:78",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "454:2:78",
                                "type": "",
                                "value": "31"
                              }
                            ],
                            "functionName": {
                              "name": "not",
                              "nodeType": "YulIdentifier",
                              "src": "450:3:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "450:7:78"
                          },
                          "variables": [
                            {
                              "name": "_3",
                              "nodeType": "YulTypedName",
                              "src": "444:2:78",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "466:23:78",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "486:2:78",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "480:5:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "480:9:78"
                          },
                          "variables": [
                            {
                              "name": "memPtr",
                              "nodeType": "YulTypedName",
                              "src": "470:6:78",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "498:71:78",
                          "value": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "520:6:78"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "name": "_1",
                                                "nodeType": "YulIdentifier",
                                                "src": "544:2:78"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "548:4:78",
                                                "type": "",
                                                "value": "0x1f"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "540:3:78"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "540:13:78"
                                          },
                                          {
                                            "name": "_3",
                                            "nodeType": "YulIdentifier",
                                            "src": "555:2:78"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "and",
                                          "nodeType": "YulIdentifier",
                                          "src": "536:3:78"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "536:22:78"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "560:2:78",
                                        "type": "",
                                        "value": "63"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "532:3:78"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "532:31:78"
                                  },
                                  {
                                    "name": "_3",
                                    "nodeType": "YulIdentifier",
                                    "src": "565:2:78"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "528:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "528:40:78"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "516:3:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "516:53:78"
                          },
                          "variables": [
                            {
                              "name": "newFreePtr",
                              "nodeType": "YulTypedName",
                              "src": "502:10:78",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "628:22:78",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "630:16:78"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "630:18:78"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "630:18:78"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "587:10:78"
                                  },
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "599:2:78"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "584:2:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "584:18:78"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "607:10:78"
                                  },
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "619:6:78"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "604:2:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "604:22:78"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nodeType": "YulIdentifier",
                              "src": "581:2:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "581:46:78"
                          },
                          "nodeType": "YulIf",
                          "src": "578:2:78"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "666:2:78",
                                "type": "",
                                "value": "64"
                              },
                              {
                                "name": "newFreePtr",
                                "nodeType": "YulIdentifier",
                                "src": "670:10:78"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "659:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "659:22:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "659:22:78"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "697:6:78"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "705:2:78"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "690:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "690:18:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "690:18:78"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "756:16:78",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "765:1:78",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "768:1:78",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "758:6:78"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "758:12:78"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "758:12:78"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "731:6:78"
                                      },
                                      {
                                        "name": "_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "739:2:78"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "727:3:78"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "727:15:78"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "744:4:78",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "723:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "723:26:78"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "751:3:78"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "720:2:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "720:35:78"
                          },
                          "nodeType": "YulIf",
                          "src": "717:2:78"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "798:6:78"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "806:4:78",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "794:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "794:17:78"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "817:6:78"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "825:4:78",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "813:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "813:17:78"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "832:2:78"
                              }
                            ],
                            "functionName": {
                              "name": "calldatacopy",
                              "nodeType": "YulIdentifier",
                              "src": "781:12:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "781:54:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "781:54:78"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "memPtr",
                                        "nodeType": "YulIdentifier",
                                        "src": "859:6:78"
                                      },
                                      {
                                        "name": "_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "867:2:78"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "855:3:78"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "855:15:78"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "872:4:78",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "851:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "851:26:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "879:1:78",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "844:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "844:37:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "844:37:78"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "890:15:78",
                          "value": {
                            "name": "memPtr",
                            "nodeType": "YulIdentifier",
                            "src": "899:6:78"
                          },
                          "variableNames": [
                            {
                              "name": "array",
                              "nodeType": "YulIdentifier",
                              "src": "890:5:78"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_string",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "219:6:78",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "227:3:78",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "array",
                        "nodeType": "YulTypedName",
                        "src": "235:5:78",
                        "type": ""
                      }
                    ],
                    "src": "192:719:78"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "986:116:78",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1032:16:78",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1041:1:78",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1044:1:78",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1034:6:78"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1034:12:78"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1034:12:78"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "1007:7:78"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1016:9:78"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "1003:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1003:23:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1028:2:78",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "999:3:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "999:32:78"
                          },
                          "nodeType": "YulIf",
                          "src": "996:2:78"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1057:39:78",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1086:9:78"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "1067:18:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1067:29:78"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "1057:6:78"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "952:9:78",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "963:7:78",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "975:6:78",
                        "type": ""
                      }
                    ],
                    "src": "916:186:78"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1194:173:78",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1240:16:78",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1249:1:78",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1252:1:78",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1242:6:78"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1242:12:78"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1242:12:78"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "1215:7:78"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1224:9:78"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "1211:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1211:23:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1236:2:78",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "1207:3:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1207:32:78"
                          },
                          "nodeType": "YulIf",
                          "src": "1204:2:78"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1265:39:78",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1294:9:78"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "1275:18:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1275:29:78"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "1265:6:78"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1313:48:78",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1346:9:78"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1357:2:78",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1342:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1342:18:78"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "1323:18:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1323:38:78"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "1313:6:78"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1152:9:78",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "1163:7:78",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1175:6:78",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "1183:6:78",
                        "type": ""
                      }
                    ],
                    "src": "1107:260:78"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1476:224:78",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1522:16:78",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1531:1:78",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1534:1:78",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1524:6:78"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1524:12:78"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1524:12:78"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "1497:7:78"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1506:9:78"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "1493:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1493:23:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1518:2:78",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "1489:3:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1489:32:78"
                          },
                          "nodeType": "YulIf",
                          "src": "1486:2:78"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1547:39:78",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1576:9:78"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "1557:18:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1557:29:78"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "1547:6:78"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1595:48:78",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1628:9:78"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1639:2:78",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1624:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1624:18:78"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "1605:18:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1605:38:78"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "1595:6:78"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1652:42:78",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1679:9:78"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1690:2:78",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1675:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1675:18:78"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "1662:12:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1662:32:78"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "1652:6:78"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_addresst_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1426:9:78",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "1437:7:78",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1449:6:78",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "1457:6:78",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "1465:6:78",
                        "type": ""
                      }
                    ],
                    "src": "1372:328:78"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1792:167:78",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1838:16:78",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1847:1:78",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1850:1:78",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1840:6:78"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1840:12:78"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1840:12:78"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "1813:7:78"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1822:9:78"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "1809:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1809:23:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1834:2:78",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "1805:3:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1805:32:78"
                          },
                          "nodeType": "YulIf",
                          "src": "1802:2:78"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1863:39:78",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1892:9:78"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "1873:18:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1873:29:78"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "1863:6:78"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1911:42:78",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1938:9:78"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1949:2:78",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1934:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1934:18:78"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "1921:12:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1921:32:78"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "1911:6:78"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1750:9:78",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "1761:7:78",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1773:6:78",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "1781:6:78",
                        "type": ""
                      }
                    ],
                    "src": "1705:254:78"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2031:206:78",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2077:16:78",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2086:1:78",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2089:1:78",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2079:6:78"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2079:12:78"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2079:12:78"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "2052:7:78"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2061:9:78"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "2048:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2048:23:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2073:2:78",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "2044:3:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2044:32:78"
                          },
                          "nodeType": "YulIf",
                          "src": "2041:2:78"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2102:36:78",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2128:9:78"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2115:12:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2115:23:78"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "2106:5:78",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2191:16:78",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2200:1:78",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2203:1:78",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2193:6:78"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2193:12:78"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2193:12:78"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "2160:5:78"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "value",
                                            "nodeType": "YulIdentifier",
                                            "src": "2181:5:78"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "iszero",
                                          "nodeType": "YulIdentifier",
                                          "src": "2174:6:78"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2174:13:78"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "2167:6:78"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2167:21:78"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "2157:2:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2157:32:78"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "2150:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2150:40:78"
                          },
                          "nodeType": "YulIf",
                          "src": "2147:2:78"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2216:15:78",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "2226:5:78"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "2216:6:78"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bool",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1997:9:78",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "2008:7:78",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "2020:6:78",
                        "type": ""
                      }
                    ],
                    "src": "1964:273:78"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2349:436:78",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2395:16:78",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2404:1:78",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2407:1:78",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2397:6:78"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2397:12:78"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2397:12:78"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "2370:7:78"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2379:9:78"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "2366:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2366:23:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2391:2:78",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "2362:3:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2362:32:78"
                          },
                          "nodeType": "YulIf",
                          "src": "2359:2:78"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2420:37:78",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2447:9:78"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2434:12:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2434:23:78"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "2424:6:78",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2466:28:78",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2484:2:78",
                                    "type": "",
                                    "value": "64"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2488:1:78",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "2480:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2480:10:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2492:1:78",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "2476:3:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2476:18:78"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "2470:2:78",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2521:16:78",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2530:1:78",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2533:1:78",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2523:6:78"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2523:12:78"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2523:12:78"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "2509:6:78"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "2517:2:78"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "2506:2:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2506:14:78"
                          },
                          "nodeType": "YulIf",
                          "src": "2503:2:78"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2546:60:78",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2578:9:78"
                                  },
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "2589:6:78"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2574:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2574:22:78"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "2598:7:78"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_string",
                              "nodeType": "YulIdentifier",
                              "src": "2556:17:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2556:50:78"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "2546:6:78"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2615:48:78",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2648:9:78"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2659:2:78",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2644:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2644:18:78"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2631:12:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2631:32:78"
                          },
                          "variables": [
                            {
                              "name": "offset_1",
                              "nodeType": "YulTypedName",
                              "src": "2619:8:78",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2692:16:78",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2701:1:78",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2704:1:78",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2694:6:78"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2694:12:78"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2694:12:78"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_1",
                                "nodeType": "YulIdentifier",
                                "src": "2678:8:78"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "2688:2:78"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "2675:2:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2675:16:78"
                          },
                          "nodeType": "YulIf",
                          "src": "2672:2:78"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2717:62:78",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2749:9:78"
                                  },
                                  {
                                    "name": "offset_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "2760:8:78"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2745:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2745:24:78"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "2771:7:78"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_string",
                              "nodeType": "YulIdentifier",
                              "src": "2727:17:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2727:52:78"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "2717:6:78"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2307:9:78",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "2318:7:78",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "2330:6:78",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "2338:6:78",
                        "type": ""
                      }
                    ],
                    "src": "2242:543:78"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2860:110:78",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2906:16:78",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2915:1:78",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2918:1:78",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2908:6:78"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2908:12:78"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2908:12:78"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "2881:7:78"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2890:9:78"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "2877:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2877:23:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2902:2:78",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "2873:3:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2873:32:78"
                          },
                          "nodeType": "YulIf",
                          "src": "2870:2:78"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2931:33:78",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2954:9:78"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2941:12:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2941:23:78"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "2931:6:78"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2826:9:78",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "2837:7:78",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "2849:6:78",
                        "type": ""
                      }
                    ],
                    "src": "2790:180:78"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3076:102:78",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "3086:26:78",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3098:9:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3109:2:78",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3094:3:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3094:18:78"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "3086:4:78"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3128:9:78"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "3143:6:78"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "3159:3:78",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "3164:1:78",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "3155:3:78"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "3155:11:78"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3168:1:78",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "3151:3:78"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3151:19:78"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "3139:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3139:32:78"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3121:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3121:51:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3121:51:78"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3045:9:78",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "3056:6:78",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "3067:4:78",
                        "type": ""
                      }
                    ],
                    "src": "2975:203:78"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3278:92:78",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "3288:26:78",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3300:9:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3311:2:78",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3296:3:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3296:18:78"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "3288:4:78"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3330:9:78"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "3355:6:78"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "3348:6:78"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3348:14:78"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "3341:6:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3341:22:78"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3323:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3323:41:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3323:41:78"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3247:9:78",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "3258:6:78",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "3269:4:78",
                        "type": ""
                      }
                    ],
                    "src": "3183:187:78"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3482:87:78",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "3492:26:78",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3504:9:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3515:2:78",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3500:3:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3500:18:78"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "3492:4:78"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3534:9:78"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "3549:6:78"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3557:4:78",
                                    "type": "",
                                    "value": "0xff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "3545:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3545:17:78"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3527:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3527:36:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3527:36:78"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3451:9:78",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "3462:6:78",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "3473:4:78",
                        "type": ""
                      }
                    ],
                    "src": "3375:194:78"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3695:476:78",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3705:12:78",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3715:2:78",
                            "type": "",
                            "value": "32"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "3709:2:78",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3733:9:78"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "3744:2:78"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3726:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3726:21:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3726:21:78"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3756:27:78",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "3776:6:78"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "3770:5:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3770:13:78"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "3760:6:78",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3803:9:78"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "3814:2:78"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3799:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3799:18:78"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "3819:6:78"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3792:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3792:34:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3792:34:78"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3835:10:78",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3844:1:78",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nodeType": "YulTypedName",
                              "src": "3839:1:78",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3904:90:78",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "headStart",
                                              "nodeType": "YulIdentifier",
                                              "src": "3933:9:78"
                                            },
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "3944:1:78"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "3929:3:78"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "3929:17:78"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "3948:2:78",
                                          "type": "",
                                          "value": "64"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "3925:3:78"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3925:26:78"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "name": "value0",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "3967:6:78"
                                                },
                                                {
                                                  "name": "i",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "3975:1:78"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "add",
                                                "nodeType": "YulIdentifier",
                                                "src": "3963:3:78"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "3963:14:78"
                                            },
                                            {
                                              "name": "_1",
                                              "nodeType": "YulIdentifier",
                                              "src": "3979:2:78"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "3959:3:78"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "3959:23:78"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "3953:5:78"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3953:30:78"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "3918:6:78"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3918:66:78"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3918:66:78"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "3865:1:78"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "3868:6:78"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "3862:2:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3862:13:78"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "3876:19:78",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "3878:15:78",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "3887:1:78"
                                    },
                                    {
                                      "name": "_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "3890:2:78"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "3883:3:78"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3883:10:78"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "3878:1:78"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "3858:3:78",
                            "statements": []
                          },
                          "src": "3854:140:78"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4028:66:78",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "headStart",
                                              "nodeType": "YulIdentifier",
                                              "src": "4057:9:78"
                                            },
                                            {
                                              "name": "length",
                                              "nodeType": "YulIdentifier",
                                              "src": "4068:6:78"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "4053:3:78"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "4053:22:78"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "4077:2:78",
                                          "type": "",
                                          "value": "64"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "4049:3:78"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "4049:31:78"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4082:1:78",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "4042:6:78"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4042:42:78"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4042:42:78"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "4009:1:78"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "4012:6:78"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "4006:2:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4006:13:78"
                          },
                          "nodeType": "YulIf",
                          "src": "4003:2:78"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4103:62:78",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4119:9:78"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "length",
                                            "nodeType": "YulIdentifier",
                                            "src": "4138:6:78"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "4146:2:78",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "4134:3:78"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "4134:15:78"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "4155:2:78",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "not",
                                          "nodeType": "YulIdentifier",
                                          "src": "4151:3:78"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "4151:7:78"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "4130:3:78"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4130:29:78"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4115:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4115:45:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4162:2:78",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4111:3:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4111:54:78"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "4103:4:78"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3664:9:78",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "3675:6:78",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "3686:4:78",
                        "type": ""
                      }
                    ],
                    "src": "3574:597:78"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4350:225:78",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4367:9:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4378:2:78",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4360:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4360:21:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4360:21:78"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4401:9:78"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4412:2:78",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4397:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4397:18:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4417:2:78",
                                "type": "",
                                "value": "35"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4390:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4390:30:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4390:30:78"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4440:9:78"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4451:2:78",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4436:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4436:18:78"
                              },
                              {
                                "hexValue": "45524332303a207472616e7366657220746f20746865207a65726f2061646472",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "4456:34:78",
                                "type": "",
                                "value": "ERC20: transfer to the zero addr"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4429:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4429:62:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4429:62:78"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4511:9:78"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4522:2:78",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4507:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4507:18:78"
                              },
                              {
                                "hexValue": "657373",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "4527:5:78",
                                "type": "",
                                "value": "ess"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4500:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4500:33:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4500:33:78"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4542:27:78",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4554:9:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4565:3:78",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4550:3:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4550:19:78"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "4542:4:78"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "4327:9:78",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "4341:4:78",
                        "type": ""
                      }
                    ],
                    "src": "4176:399:78"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4754:224:78",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4771:9:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4782:2:78",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4764:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4764:21:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4764:21:78"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4805:9:78"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4816:2:78",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4801:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4801:18:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4821:2:78",
                                "type": "",
                                "value": "34"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4794:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4794:30:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4794:30:78"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4844:9:78"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4855:2:78",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4840:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4840:18:78"
                              },
                              {
                                "hexValue": "45524332303a206275726e20616d6f756e7420657863656564732062616c616e",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "4860:34:78",
                                "type": "",
                                "value": "ERC20: burn amount exceeds balan"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4833:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4833:62:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4833:62:78"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4915:9:78"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4926:2:78",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4911:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4911:18:78"
                              },
                              {
                                "hexValue": "6365",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "4931:4:78",
                                "type": "",
                                "value": "ce"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4904:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4904:32:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4904:32:78"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4945:27:78",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4957:9:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4968:3:78",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4953:3:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4953:19:78"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "4945:4:78"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "4731:9:78",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "4745:4:78",
                        "type": ""
                      }
                    ],
                    "src": "4580:398:78"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5157:158:78",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5174:9:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5185:2:78",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5167:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5167:21:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5167:21:78"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5208:9:78"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5219:2:78",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5204:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5204:18:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5224:1:78",
                                "type": "",
                                "value": "9"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5197:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5197:29:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5197:29:78"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5246:9:78"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5257:2:78",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5242:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5242:18:78"
                              },
                              {
                                "hexValue": "696d6d757461626c65",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "5262:11:78",
                                "type": "",
                                "value": "immutable"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5235:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5235:39:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5235:39:78"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5283:26:78",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5295:9:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5306:2:78",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5291:3:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5291:18:78"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "5283:4:78"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_1579d012ead512dcb248c91571fa46aaa0f3399f8d3e1098fac22575db2ed693__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "5134:9:78",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "5148:4:78",
                        "type": ""
                      }
                    ],
                    "src": "4983:332:78"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5494:228:78",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5511:9:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5522:2:78",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5504:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5504:21:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5504:21:78"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5545:9:78"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5556:2:78",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5541:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5541:18:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5561:2:78",
                                "type": "",
                                "value": "38"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5534:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5534:30:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5534:30:78"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5584:9:78"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5595:2:78",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5580:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5580:18:78"
                              },
                              {
                                "hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "5600:34:78",
                                "type": "",
                                "value": "Ownable: new owner is the zero a"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5573:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5573:62:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5573:62:78"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5655:9:78"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5666:2:78",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5651:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5651:18:78"
                              },
                              {
                                "hexValue": "646472657373",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "5671:8:78",
                                "type": "",
                                "value": "ddress"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5644:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5644:36:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5644:36:78"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5689:27:78",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5701:9:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5712:3:78",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5697:3:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5697:19:78"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "5689:4:78"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "5471:9:78",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "5485:4:78",
                        "type": ""
                      }
                    ],
                    "src": "5320:402:78"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5901:224:78",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5918:9:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5929:2:78",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5911:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5911:21:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5911:21:78"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5952:9:78"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5963:2:78",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5948:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5948:18:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5968:2:78",
                                "type": "",
                                "value": "34"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5941:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5941:30:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5941:30:78"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5991:9:78"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6002:2:78",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5987:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5987:18:78"
                              },
                              {
                                "hexValue": "45524332303a20617070726f766520746f20746865207a65726f206164647265",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "6007:34:78",
                                "type": "",
                                "value": "ERC20: approve to the zero addre"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5980:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5980:62:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5980:62:78"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6062:9:78"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6073:2:78",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6058:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6058:18:78"
                              },
                              {
                                "hexValue": "7373",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "6078:4:78",
                                "type": "",
                                "value": "ss"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6051:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6051:32:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6051:32:78"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6092:27:78",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6104:9:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6115:3:78",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6100:3:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6100:19:78"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "6092:4:78"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "5878:9:78",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "5892:4:78",
                        "type": ""
                      }
                    ],
                    "src": "5727:398:78"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6304:179:78",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6321:9:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6332:2:78",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6314:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6314:21:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6314:21:78"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6355:9:78"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6366:2:78",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6351:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6351:18:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6371:2:78",
                                "type": "",
                                "value": "29"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6344:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6344:30:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6344:30:78"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6394:9:78"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6405:2:78",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6390:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6390:18:78"
                              },
                              {
                                "hexValue": "45524332303a20696e73756666696369656e7420616c6c6f77616e6365",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "6410:31:78",
                                "type": "",
                                "value": "ERC20: insufficient allowance"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6383:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6383:59:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6383:59:78"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6451:26:78",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6463:9:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6474:2:78",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6459:3:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6459:18:78"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "6451:4:78"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "6281:9:78",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "6295:4:78",
                        "type": ""
                      }
                    ],
                    "src": "6130:353:78"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6662:228:78",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6679:9:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6690:2:78",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6672:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6672:21:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6672:21:78"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6713:9:78"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6724:2:78",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6709:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6709:18:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6729:2:78",
                                "type": "",
                                "value": "38"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6702:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6702:30:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6702:30:78"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6752:9:78"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6763:2:78",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6748:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6748:18:78"
                              },
                              {
                                "hexValue": "45524332303a207472616e7366657220616d6f756e7420657863656564732062",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "6768:34:78",
                                "type": "",
                                "value": "ERC20: transfer amount exceeds b"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6741:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6741:62:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6741:62:78"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6823:9:78"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6834:2:78",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6819:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6819:18:78"
                              },
                              {
                                "hexValue": "616c616e6365",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "6839:8:78",
                                "type": "",
                                "value": "alance"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6812:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6812:36:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6812:36:78"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6857:27:78",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6869:9:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6880:3:78",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6865:3:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6865:19:78"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "6857:4:78"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "6639:9:78",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "6653:4:78",
                        "type": ""
                      }
                    ],
                    "src": "6488:402:78"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7069:236:78",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7086:9:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7097:2:78",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7079:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7079:21:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7079:21:78"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7120:9:78"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7131:2:78",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7116:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7116:18:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7136:2:78",
                                "type": "",
                                "value": "46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7109:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7109:30:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7109:30:78"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7159:9:78"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7170:2:78",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7155:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7155:18:78"
                              },
                              {
                                "hexValue": "496e697469616c697a61626c653a20636f6e747261637420697320616c726561",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "7175:34:78",
                                "type": "",
                                "value": "Initializable: contract is alrea"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7148:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7148:62:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7148:62:78"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7230:9:78"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7241:2:78",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7226:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7226:18:78"
                              },
                              {
                                "hexValue": "647920696e697469616c697a6564",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "7246:16:78",
                                "type": "",
                                "value": "dy initialized"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7219:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7219:44:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7219:44:78"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7272:27:78",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7284:9:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7295:3:78",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7280:3:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7280:19:78"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "7272:4:78"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "7046:9:78",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "7060:4:78",
                        "type": ""
                      }
                    ],
                    "src": "6895:410:78"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7484:182:78",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7501:9:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7512:2:78",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7494:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7494:21:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7494:21:78"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7535:9:78"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7546:2:78",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7531:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7531:18:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7551:2:78",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7524:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7524:30:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7524:30:78"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7574:9:78"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7585:2:78",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7570:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7570:18:78"
                              },
                              {
                                "hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "7590:34:78",
                                "type": "",
                                "value": "Ownable: caller is not the owner"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7563:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7563:62:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7563:62:78"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7634:26:78",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7646:9:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7657:2:78",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7642:3:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7642:18:78"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "7634:4:78"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "7461:9:78",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "7475:4:78",
                        "type": ""
                      }
                    ],
                    "src": "7310:356:78"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7845:173:78",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7862:9:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7873:2:78",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7855:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7855:21:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7855:21:78"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7896:9:78"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7907:2:78",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7892:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7892:18:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7912:2:78",
                                "type": "",
                                "value": "23"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7885:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7885:30:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7885:30:78"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7935:9:78"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7946:2:78",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7931:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7931:18:78"
                              },
                              {
                                "hexValue": "6d696e74696e67206973206e6f7420616c6c6f7765642e",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "7951:25:78",
                                "type": "",
                                "value": "minting is not allowed."
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7924:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7924:53:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7924:53:78"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7986:26:78",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7998:9:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8009:2:78",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7994:3:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7994:18:78"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "7986:4:78"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_9e951774488935d57ea9d769729997b4aaffd61b153105ff9654b1ba7b2eb087__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "7822:9:78",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "7836:4:78",
                        "type": ""
                      }
                    ],
                    "src": "7671:347:78"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8197:178:78",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8214:9:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8225:2:78",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8207:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8207:21:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8207:21:78"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8248:9:78"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8259:2:78",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8244:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8244:18:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8264:2:78",
                                "type": "",
                                "value": "28"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8237:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8237:30:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8237:30:78"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8287:9:78"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8298:2:78",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8283:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8283:18:78"
                              },
                              {
                                "hexValue": "455243323020746f6b656e206e616d6520616c726561647920736574",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "8303:30:78",
                                "type": "",
                                "value": "ERC20 token name already set"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8276:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8276:58:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8276:58:78"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8343:26:78",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8355:9:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8366:2:78",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8351:3:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8351:18:78"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "8343:4:78"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_a19197f3e02d3e1cbde1d2c6c62a4f90a6efd641d75db007071ca4ee16948014__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "8174:9:78",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "8188:4:78",
                        "type": ""
                      }
                    ],
                    "src": "8023:352:78"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8554:173:78",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8571:9:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8582:2:78",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8564:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8564:21:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8564:21:78"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8605:9:78"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8616:2:78",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8601:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8601:18:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8621:2:78",
                                "type": "",
                                "value": "23"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8594:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8594:30:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8594:30:78"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8644:9:78"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8655:2:78",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8640:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8640:18:78"
                              },
                              {
                                "hexValue": "4275726e696e67206973206e6f7420616c6c6f7765642e",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "8660:25:78",
                                "type": "",
                                "value": "Burning is not allowed."
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8633:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8633:53:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8633:53:78"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8695:26:78",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8707:9:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8718:2:78",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8703:3:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8703:18:78"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "8695:4:78"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_ad173bcb41777677ea910498ce7885f14bb8fcd55d38ead4e093ea97430b0d55__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "8531:9:78",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "8545:4:78",
                        "type": ""
                      }
                    ],
                    "src": "8380:347:78"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8906:223:78",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8923:9:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8934:2:78",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8916:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8916:21:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8916:21:78"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8957:9:78"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8968:2:78",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8953:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8953:18:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8973:2:78",
                                "type": "",
                                "value": "33"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8946:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8946:30:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8946:30:78"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8996:9:78"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9007:2:78",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8992:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8992:18:78"
                              },
                              {
                                "hexValue": "45524332303a206275726e2066726f6d20746865207a65726f20616464726573",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "9012:34:78",
                                "type": "",
                                "value": "ERC20: burn from the zero addres"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8985:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8985:62:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8985:62:78"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9067:9:78"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9078:2:78",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9063:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9063:18:78"
                              },
                              {
                                "hexValue": "73",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "9083:3:78",
                                "type": "",
                                "value": "s"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9056:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9056:31:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9056:31:78"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9096:27:78",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9108:9:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9119:3:78",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9104:3:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9104:19:78"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "9096:4:78"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "8883:9:78",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "8897:4:78",
                        "type": ""
                      }
                    ],
                    "src": "8732:397:78"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9308:177:78",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9325:9:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9336:2:78",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9318:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9318:21:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9318:21:78"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9359:9:78"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9370:2:78",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9355:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9355:18:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9375:2:78",
                                "type": "",
                                "value": "27"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9348:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9348:30:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9348:30:78"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9398:9:78"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9409:2:78",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9394:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9394:18:78"
                              },
                              {
                                "hexValue": "746f6b656e207472616e73666572207768696c6520706175736564",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "9414:29:78",
                                "type": "",
                                "value": "token transfer while paused"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9387:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9387:57:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9387:57:78"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9453:26:78",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9465:9:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9476:2:78",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9461:3:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9461:18:78"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "9453:4:78"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_b80809d1aa1457ca4f3a22b37b5844c6ef16ca06c98e63183067df6d724f2917__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "9285:9:78",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "9299:4:78",
                        "type": ""
                      }
                    ],
                    "src": "9134:351:78"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9664:227:78",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9681:9:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9692:2:78",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9674:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9674:21:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9674:21:78"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9715:9:78"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9726:2:78",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9711:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9711:18:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9731:2:78",
                                "type": "",
                                "value": "37"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9704:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9704:30:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9704:30:78"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9754:9:78"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9765:2:78",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9750:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9750:18:78"
                              },
                              {
                                "hexValue": "45524332303a207472616e736665722066726f6d20746865207a65726f206164",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "9770:34:78",
                                "type": "",
                                "value": "ERC20: transfer from the zero ad"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9743:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9743:62:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9743:62:78"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9825:9:78"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9836:2:78",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9821:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9821:18:78"
                              },
                              {
                                "hexValue": "6472657373",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "9841:7:78",
                                "type": "",
                                "value": "dress"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9814:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9814:35:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9814:35:78"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9858:27:78",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9870:9:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9881:3:78",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9866:3:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9866:19:78"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "9858:4:78"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "9641:9:78",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "9655:4:78",
                        "type": ""
                      }
                    ],
                    "src": "9490:401:78"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10070:175:78",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10087:9:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10098:2:78",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10080:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10080:21:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10080:21:78"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10121:9:78"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10132:2:78",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10117:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10117:18:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10137:2:78",
                                "type": "",
                                "value": "25"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10110:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10110:30:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10110:30:78"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10160:9:78"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10171:2:78",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10156:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10156:18:78"
                              },
                              {
                                "hexValue": "45524332304361707065643a20636170206578636565646564",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "10176:27:78",
                                "type": "",
                                "value": "ERC20Capped: cap exceeded"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10149:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10149:55:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10149:55:78"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "10213:26:78",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10225:9:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10236:2:78",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10221:3:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10221:18:78"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "10213:4:78"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_c0532a65ade852f12d67926b1625bbc98f7eb7c650703bf531fd4e07ded2c49f__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "10047:9:78",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "10061:4:78",
                        "type": ""
                      }
                    ],
                    "src": "9896:349:78"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10424:226:78",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10441:9:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10452:2:78",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10434:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10434:21:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10434:21:78"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10475:9:78"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10486:2:78",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10471:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10471:18:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10491:2:78",
                                "type": "",
                                "value": "36"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10464:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10464:30:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10464:30:78"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10514:9:78"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10525:2:78",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10510:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10510:18:78"
                              },
                              {
                                "hexValue": "45524332303a20617070726f76652066726f6d20746865207a65726f20616464",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "10530:34:78",
                                "type": "",
                                "value": "ERC20: approve from the zero add"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10503:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10503:62:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10503:62:78"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10585:9:78"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10596:2:78",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10581:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10581:18:78"
                              },
                              {
                                "hexValue": "72657373",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "10601:6:78",
                                "type": "",
                                "value": "ress"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10574:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10574:34:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10574:34:78"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "10617:27:78",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10629:9:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10640:3:78",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10625:3:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10625:19:78"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "10617:4:78"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "10401:9:78",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "10415:4:78",
                        "type": ""
                      }
                    ],
                    "src": "10250:400:78"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10829:227:78",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10846:9:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10857:2:78",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10839:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10839:21:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10839:21:78"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10880:9:78"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10891:2:78",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10876:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10876:18:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10896:2:78",
                                "type": "",
                                "value": "37"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10869:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10869:30:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10869:30:78"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10919:9:78"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10930:2:78",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10915:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10915:18:78"
                              },
                              {
                                "hexValue": "45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "10935:34:78",
                                "type": "",
                                "value": "ERC20: decreased allowance below"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10908:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10908:62:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10908:62:78"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10990:9:78"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11001:2:78",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10986:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10986:18:78"
                              },
                              {
                                "hexValue": "207a65726f",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "11006:7:78",
                                "type": "",
                                "value": " zero"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10979:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10979:35:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10979:35:78"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11023:27:78",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11035:9:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11046:3:78",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11031:3:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11031:19:78"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "11023:4:78"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "10806:9:78",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "10820:4:78",
                        "type": ""
                      }
                    ],
                    "src": "10655:401:78"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "11235:181:78",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11252:9:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11263:2:78",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11245:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11245:21:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11245:21:78"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11286:9:78"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11297:2:78",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11282:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11282:18:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11302:2:78",
                                "type": "",
                                "value": "31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11275:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11275:30:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11275:30:78"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11325:9:78"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11336:2:78",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11321:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11321:18:78"
                              },
                              {
                                "hexValue": "45524332303a206d696e7420746f20746865207a65726f2061646472657373",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "11341:33:78",
                                "type": "",
                                "value": "ERC20: mint to the zero address"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11314:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11314:61:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11314:61:78"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11384:26:78",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11396:9:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11407:2:78",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11392:3:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11392:18:78"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "11384:4:78"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "11212:9:78",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "11226:4:78",
                        "type": ""
                      }
                    ],
                    "src": "11061:355:78"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "11595:176:78",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11612:9:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11623:2:78",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11605:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11605:21:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11605:21:78"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11646:9:78"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11657:2:78",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11642:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11642:18:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11662:2:78",
                                "type": "",
                                "value": "26"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11635:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11635:30:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11635:30:78"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11685:9:78"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11696:2:78",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11681:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11681:18:78"
                              },
                              {
                                "hexValue": "63616c6c6572206973206e6f74206120636f6e74726f6c6c6572",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "11701:28:78",
                                "type": "",
                                "value": "caller is not a controller"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11674:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11674:56:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11674:56:78"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11739:26:78",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11751:9:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11762:2:78",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11747:3:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11747:18:78"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "11739:4:78"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_fefec1202c366861bd181e506ae877478f62e789b268f438bd47cadf3a4f5079__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "11572:9:78",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "11586:4:78",
                        "type": ""
                      }
                    ],
                    "src": "11421:350:78"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "11877:76:78",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "11887:26:78",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11899:9:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11910:2:78",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11895:3:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11895:18:78"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "11887:4:78"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11929:9:78"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "11940:6:78"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11922:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11922:25:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11922:25:78"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "11846:9:78",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "11857:6:78",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "11868:4:78",
                        "type": ""
                      }
                    ],
                    "src": "11776:177:78"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12055:87:78",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "12065:26:78",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12077:9:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12088:2:78",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12073:3:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12073:18:78"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "12065:4:78"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12107:9:78"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "12122:6:78"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12130:4:78",
                                    "type": "",
                                    "value": "0xff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "12118:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12118:17:78"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12100:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12100:36:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12100:36:78"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "12024:9:78",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "12035:6:78",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "12046:4:78",
                        "type": ""
                      }
                    ],
                    "src": "11958:184:78"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12195:80:78",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "12222:22:78",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "12224:16:78"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "12224:18:78"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "12224:18:78"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "12211:1:78"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "12218:1:78"
                                  }
                                ],
                                "functionName": {
                                  "name": "not",
                                  "nodeType": "YulIdentifier",
                                  "src": "12214:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12214:6:78"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "12208:2:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12208:13:78"
                          },
                          "nodeType": "YulIf",
                          "src": "12205:2:78"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12253:16:78",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "12264:1:78"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "12267:1:78"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12260:3:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12260:9:78"
                          },
                          "variableNames": [
                            {
                              "name": "sum",
                              "nodeType": "YulIdentifier",
                              "src": "12253:3:78"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_add_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "12178:1:78",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "12181:1:78",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "sum",
                        "nodeType": "YulTypedName",
                        "src": "12187:3:78",
                        "type": ""
                      }
                    ],
                    "src": "12147:128:78"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12329:76:78",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "12351:22:78",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "12353:16:78"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "12353:18:78"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "12353:18:78"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "12345:1:78"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "12348:1:78"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "12342:2:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12342:8:78"
                          },
                          "nodeType": "YulIf",
                          "src": "12339:2:78"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12382:17:78",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "12394:1:78"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "12397:1:78"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "12390:3:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12390:9:78"
                          },
                          "variableNames": [
                            {
                              "name": "diff",
                              "nodeType": "YulIdentifier",
                              "src": "12382:4:78"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_sub_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "12311:1:78",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "12314:1:78",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "diff",
                        "nodeType": "YulTypedName",
                        "src": "12320:4:78",
                        "type": ""
                      }
                    ],
                    "src": "12280:125:78"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12465:325:78",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "12475:22:78",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12489:1:78",
                                "type": "",
                                "value": "1"
                              },
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "12492:4:78"
                              }
                            ],
                            "functionName": {
                              "name": "shr",
                              "nodeType": "YulIdentifier",
                              "src": "12485:3:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12485:12:78"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nodeType": "YulIdentifier",
                              "src": "12475:6:78"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "12506:38:78",
                          "value": {
                            "arguments": [
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "12536:4:78"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12542:1:78",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "12532:3:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12532:12:78"
                          },
                          "variables": [
                            {
                              "name": "outOfPlaceEncoding",
                              "nodeType": "YulTypedName",
                              "src": "12510:18:78",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "12583:31:78",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "12585:27:78",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "length",
                                      "nodeType": "YulIdentifier",
                                      "src": "12599:6:78"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "12607:4:78",
                                      "type": "",
                                      "value": "0x7f"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nodeType": "YulIdentifier",
                                    "src": "12595:3:78"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "12595:17:78"
                                },
                                "variableNames": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "12585:6:78"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nodeType": "YulIdentifier",
                                "src": "12563:18:78"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "12556:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12556:26:78"
                          },
                          "nodeType": "YulIf",
                          "src": "12553:2:78"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "12673:111:78",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "12694:1:78",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "12701:3:78",
                                          "type": "",
                                          "value": "224"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "12706:10:78",
                                          "type": "",
                                          "value": "0x4e487b71"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shl",
                                        "nodeType": "YulIdentifier",
                                        "src": "12697:3:78"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "12697:20:78"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "12687:6:78"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "12687:31:78"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "12687:31:78"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "12738:1:78",
                                      "type": "",
                                      "value": "4"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "12741:4:78",
                                      "type": "",
                                      "value": "0x22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "12731:6:78"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "12731:15:78"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "12731:15:78"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "12766:1:78",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "12769:4:78",
                                      "type": "",
                                      "value": "0x24"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "12759:6:78"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "12759:15:78"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "12759:15:78"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nodeType": "YulIdentifier",
                                "src": "12629:18:78"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "12652:6:78"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12660:2:78",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "12649:2:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12649:14:78"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "12626:2:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12626:38:78"
                          },
                          "nodeType": "YulIf",
                          "src": "12623:2:78"
                        }
                      ]
                    },
                    "name": "extract_byte_array_length",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "data",
                        "nodeType": "YulTypedName",
                        "src": "12445:4:78",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "12454:6:78",
                        "type": ""
                      }
                    ],
                    "src": "12410:380:78"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12827:95:78",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12844:1:78",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12851:3:78",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12856:10:78",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "12847:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12847:20:78"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12837:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12837:31:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12837:31:78"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12884:1:78",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12887:4:78",
                                "type": "",
                                "value": "0x11"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12877:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12877:15:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12877:15:78"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12908:1:78",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12911:4:78",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "12901:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12901:15:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12901:15:78"
                        }
                      ]
                    },
                    "name": "panic_error_0x11",
                    "nodeType": "YulFunctionDefinition",
                    "src": "12795:127:78"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12959:95:78",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12976:1:78",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12983:3:78",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12988:10:78",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "12979:3:78"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12979:20:78"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12969:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12969:31:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12969:31:78"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13016:1:78",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13019:4:78",
                                "type": "",
                                "value": "0x41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13009:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13009:15:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13009:15:78"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13040:1:78",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13043:4:78",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "13033:6:78"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13033:15:78"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13033:15:78"
                        }
                      ]
                    },
                    "name": "panic_error_0x41",
                    "nodeType": "YulFunctionDefinition",
                    "src": "12927:127:78"
                  }
                ]
              },
              "contents": "{\n    { }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_string(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        let _2 := sub(shl(64, 1), 1)\n        if gt(_1, _2) { panic_error_0x41() }\n        let _3 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_1, 0x1f), _3), 63), _3))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _1)\n        if gt(add(add(offset, _1), 0x20), end) { revert(0, 0) }\n        calldatacopy(add(memPtr, 0x20), add(offset, 0x20), _1)\n        mstore(add(add(memPtr, _1), 0x20), 0)\n        array := memPtr\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_bool(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_string(add(headStart, offset), dataEnd)\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_string(add(headStart, offset_1), dataEnd)\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        mstore(headStart, _1)\n        let length := mload(value0)\n        mstore(add(headStart, _1), length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, _1) }\n        {\n            mstore(add(add(headStart, i), 64), mload(add(add(value0, i), _1)))\n        }\n        if gt(i, length)\n        {\n            mstore(add(add(headStart, length), 64), 0)\n        }\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"ERC20: transfer to the zero addr\")\n        mstore(add(headStart, 96), \"ess\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ERC20: burn amount exceeds balan\")\n        mstore(add(headStart, 96), \"ce\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_1579d012ead512dcb248c91571fa46aaa0f3399f8d3e1098fac22575db2ed693__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 9)\n        mstore(add(headStart, 64), \"immutable\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ERC20: approve to the zero addre\")\n        mstore(add(headStart, 96), \"ss\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"ERC20: insufficient allowance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"ERC20: transfer amount exceeds b\")\n        mstore(add(headStart, 96), \"alance\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"Initializable: contract is alrea\")\n        mstore(add(headStart, 96), \"dy initialized\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_9e951774488935d57ea9d769729997b4aaffd61b153105ff9654b1ba7b2eb087__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 23)\n        mstore(add(headStart, 64), \"minting is not allowed.\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_a19197f3e02d3e1cbde1d2c6c62a4f90a6efd641d75db007071ca4ee16948014__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 28)\n        mstore(add(headStart, 64), \"ERC20 token name already set\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_ad173bcb41777677ea910498ce7885f14bb8fcd55d38ead4e093ea97430b0d55__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 23)\n        mstore(add(headStart, 64), \"Burning is not allowed.\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"ERC20: burn from the zero addres\")\n        mstore(add(headStart, 96), \"s\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_b80809d1aa1457ca4f3a22b37b5844c6ef16ca06c98e63183067df6d724f2917__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 27)\n        mstore(add(headStart, 64), \"token transfer while paused\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: transfer from the zero ad\")\n        mstore(add(headStart, 96), \"dress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_c0532a65ade852f12d67926b1625bbc98f7eb7c650703bf531fd4e07ded2c49f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 25)\n        mstore(add(headStart, 64), \"ERC20Capped: cap exceeded\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC20: approve from the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: decreased allowance below\")\n        mstore(add(headStart, 96), \" zero\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"ERC20: mint to the zero address\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_fefec1202c366861bd181e506ae877478f62e789b268f438bd47cadf3a4f5079__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 26)\n        mstore(add(headStart, 64), \"caller is not a controller\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n}",
              "id": 78,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "immutableReferences": {},
          "linkReferences": {},
          "object": "608060405234801561001057600080fd5b50600436106101805760003560e01c806306fdde0314610185578063095ea7b3146101a357806318160ddd146101c65780631b8dca74146101d857806323b872dd146101e3578063313ce567146101f6578063355274ea1461020557806335e061fc1461020d578063395093511461021d57806342966c6814610230578063449a52f81461024557806347786d37146102585780634cd88b761461026b5780635c975abb1461027e5780635e81078d1461028957806370a082311461029c578063715018a6146102c557806379cc6790146102cd5780638d222f36146102e05780638da5cb5b146102f357806395d89b4114610313578063a0712d681461031b578063a457c2d71461032e578063a7fc7a0714610341578063a9059cbb14610354578063b429afeb14610367578063b93ea6a11461037a578063dd62ed3e1461038a578063e1c28bef1461039d578063e26c6f1b146103a5578063f2fde38b146103b8578063fa02c4b7146103cb575b600080fd5b61018d6103de565b60405161019a9190611640565b60405180910390f35b6101b66101b1366004611578565b610470565b604051901515815260200161019a565b6008545b60405190815260200161019a565b600b5460ff166101b6565b6101b66101f136600461153c565b61048e565b6040516012815260200161019a565b6005546101ca565b600b54610100900460ff166101b6565b6101b661022b366004611578565b6104b2565b61024361023e366004611627565b6104d4565b005b610243610253366004611578565b610511565b610243610266366004611627565b6105a2565b6102436102793660046115c4565b6105e3565b60005460ff166101b6565b6102436102973660046115a2565b61065c565b6101ca6102aa3660046114e7565b6001600160a01b031660009081526006602052604090205490565b6102436106ce565b6102436102db366004611578565b610709565b6101b66102ee3660046114e7565b610745565b6102fb610768565b6040516001600160a01b03909116815260200161019a565b61018d610777565b610243610329366004611627565b610786565b6101b661033c366004611578565b610813565b61024361034f3660046114e7565b61088e565b6101b6610362366004611578565b610917565b6101b66103753660046114e7565b610925565b600054610100900460ff166101b6565b6101ca610398366004611509565b610946565b610243610971565b6102436103b33660046115a2565b6109da565b6102436103c63660046114e7565b610a51565b6101b66103d9366004611578565b610af6565b6060600980546103ed906117dd565b80601f0160208091040260200160405190810160405280929190818152602001828054610419906117dd565b80156104665780601f1061043b57610100808354040283529160200191610466565b820191906000526020600020905b81548152906001019060200180831161044957829003601f168201915b5050505050905090565b60003361047e818585610b6b565b5060019392505050565b60085490565b60003361049c858285610c8f565b6104a7858585610d09565b506001949350505050565b60003361047e8185856104c58383610946565b6104cf91906117ae565b610b6b565b600b54610100900460ff166105045760405162461bcd60e51b81526004016104fb90611749565b60405180910390fd5b61050e3382610ed0565b50565b3360009081526003602052604090205460ff1615156001148061053357503033145b806105565750610541610768565b6001600160a01b0316306001600160a01b0316145b6105725760405162461bcd60e51b81526004016104fb9061177a565b600b5460ff166105945760405162461bcd60e51b81526004016104fb90611718565b61059e8282611018565b5050565b600554156105de5760405162461bcd60e51b8152602060048201526009602482015268696d6d757461626c6560b81b60448201526064016104fb565b600555565b60006105ef6001611163565b90508015610607576004805461ff0019166101001790555b61061183836111f2565b8015610657576004805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b3360009081526003602052604090205460ff1615156001148061067e57503033145b806106a1575061068c610768565b6001600160a01b0316306001600160a01b0316145b6106bd5760405162461bcd60e51b81526004016104fb9061177a565b600b805460ff191682151517905550565b336106d7610768565b6001600160a01b0316146106fd5760405162461bcd60e51b81526004016104fb906116e3565b6107076000611274565b565b600b54610100900460ff166107305760405162461bcd60e51b81526004016104fb90611749565b61073b823383610c8f565b61059e8282610ed0565b6001600160a01b03811660009081526001602052604081205460ff165b92915050565b6002546001600160a01b031690565b6060600a80546103ed906117dd565b3360009081526003602052604090205460ff161515600114806107a857503033145b806107cb57506107b6610768565b6001600160a01b0316306001600160a01b0316145b6107e75760405162461bcd60e51b81526004016104fb9061177a565b600b5460ff166108095760405162461bcd60e51b81526004016104fb90611718565b61050e3382611018565b600033816108218286610946565b9050838110156108815760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016104fb565b6104a78286868403610b6b565b3360009081526003602052604090205460ff161515600114806108b057503033145b806108d357506108be610768565b6001600160a01b0316306001600160a01b0316145b6108ef5760405162461bcd60e51b81526004016104fb9061177a565b61050e816001600160a01b03166000908152600360205260409020805460ff19166001179055565b60003361047e818585610d09565b6001600160a01b03811660009081526003602052604081205460ff16610762565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205490565b3360009081526003602052604090205460ff1615156001148061099357503033145b806109b657506109a1610768565b6001600160a01b0316306001600160a01b0316145b6109d25760405162461bcd60e51b81526004016104fb9061177a565b6107076112c6565b3360009081526003602052604090205460ff161515600114806109fc57503033145b80610a1f5750610a0a610768565b6001600160a01b0316306001600160a01b0316145b610a3b5760405162461bcd60e51b81526004016104fb9061177a565b600b805461ff0019166101008315150217905550565b33610a5a610768565b6001600160a01b031614610a805760405162461bcd60e51b81526004016104fb906116e3565b6001600160a01b038116610ae55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104fb565b610aee81611274565b61050e6112c6565b3360009081526003602052604081205460ff16151560011480610b1857503033145b80610b3b5750610b26610768565b6001600160a01b0316306001600160a01b0316145b610b575760405162461bcd60e51b81526004016104fb9061177a565b610b62838484610b6b565b50600192915050565b6001600160a01b038316610bcd5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016104fb565b6001600160a01b038216610c2e5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016104fb565b6001600160a01b0383811660008181526007602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000610c9b8484610946565b90506000198114610d035781811015610cf65760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016104fb565b610d038484848403610b6b565b50505050565b6001600160a01b038316610d6d5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016104fb565b6001600160a01b038216610dcf5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016104fb565b610dda838383611340565b6001600160a01b03831660009081526006602052604090205481811015610e525760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016104fb565b6001600160a01b03808516600090815260066020526040808220858503905591851681529081208054849290610e899084906117ae565b92505081905550826001600160a01b0316846001600160a01b031660008051602061184583398151915284604051610ec391815260200190565b60405180910390a3610d03565b6001600160a01b038216610f305760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016104fb565b610f3c82600083611340565b6001600160a01b03821660009081526006602052604090205481811015610fb05760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016104fb565b6001600160a01b0383166000908152600660205260408120838303905560088054849290610fdf9084906117c6565b90915550506040518281526000906001600160a01b038516906000805160206118458339815191529060200160405180910390a3505050565b600061102360055490565b111561108a576005548161103660085490565b61104091906117ae565b111561108a5760405162461bcd60e51b8152602060048201526019602482015278115490cc8c10d85c1c19590e8818d85c08195e18d959591959603a1b60448201526064016104fb565b6001600160a01b0382166110e05760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016104fb565b6110ec60008383611340565b80600860008282546110fe91906117ae565b90915550506001600160a01b0382166000908152600660205260408120805483929061112b9084906117ae565b90915550506040518181526001600160a01b038316906000906000805160206118458339815191529060200160405180910390a35050565b600454600090610100900460ff16156111ac578160ff1660011480156111885750303b155b6111a45760405162461bcd60e51b81526004016104fb90611695565b506000919050565b60045460ff8084169116106111d35760405162461bcd60e51b81526004016104fb90611695565b506004805460ff191660ff92909216919091179055600190565b919050565b600980546111ff906117dd565b15905061124d5760405162461bcd60e51b815260206004820152601c60248201527b115490cc8c081d1bdad95b881b985b5948185b1c9958591e481cd95d60221b60448201526064016104fb565b81516112609060099060208501906113ab565b50805161065790600a9060208401906113ab565b600280546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b3360009081526003602052604090205460ff161515600114806112e857503033145b8061130b57506112f6610768565b6001600160a01b0316306001600160a01b0316145b6113275760405162461bcd60e51b81526004016104fb9061177a565b336000908152600360205260409020805460ff19169055565b60005460ff16156113915760405162461bcd60e51b815260206004820152601b60248201527a1d1bdad95b881d1c985b9cd9995c881dda1a5b19481c185d5cd959602a1b60448201526064016104fb565b6001600160a01b0383161561065757610657838483610c8f565b8280546113b7906117dd565b90600052602060002090601f0160209004810192826113d9576000855561141f565b82601f106113f257805160ff191683800117855561141f565b8280016001018555821561141f579182015b8281111561141f578251825591602001919060010190611404565b5061142b92915061142f565b5090565b5b8082111561142b5760008155600101611430565b80356001600160a01b03811681146111ed57600080fd5b600082601f83011261146c57600080fd5b81356001600160401b03808211156114865761148661182e565b604051601f8301601f19908116603f011681019082821181831017156114ae576114ae61182e565b816040528381528660208588010111156114c757600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000602082840312156114f957600080fd5b61150282611444565b9392505050565b6000806040838503121561151c57600080fd5b61152583611444565b915061153360208401611444565b90509250929050565b60008060006060848603121561155157600080fd5b61155a84611444565b925061156860208501611444565b9150604084013590509250925092565b6000806040838503121561158b57600080fd5b61159483611444565b946020939093013593505050565b6000602082840312156115b457600080fd5b8135801515811461150257600080fd5b600080604083850312156115d757600080fd5b82356001600160401b03808211156115ee57600080fd5b6115fa8683870161145b565b9350602085013591508082111561161057600080fd5b5061161d8582860161145b565b9150509250929050565b60006020828403121561163957600080fd5b5035919050565b600060208083528351808285015260005b8181101561166d57858101830151858201604001528201611651565b8181111561167f576000604083870101525b50601f01601f1916929092016040019392505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526017908201527636b4b73a34b7339034b9903737ba1030b63637bbb2b21760491b604082015260600190565b602080825260179082015276213ab93734b7339034b9903737ba1030b63637bbb2b21760491b604082015260600190565b6020808252601a908201527931b0b63632b91034b9903737ba10309031b7b73a3937b63632b960311b604082015260600190565b600082198211156117c1576117c1611818565b500190565b6000828210156117d8576117d8611818565b500390565b600181811c908216806117f157607f821691505b6020821081141561181257634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220a3b00e10cd093354a835a227a41378fb1603ed59adca0bb17c63196201ca0f3b64736f6c63430008060033",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x180 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x185 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x1A3 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x1C6 JUMPI DUP1 PUSH4 0x1B8DCA74 EQ PUSH2 0x1D8 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1E3 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x1F6 JUMPI DUP1 PUSH4 0x355274EA EQ PUSH2 0x205 JUMPI DUP1 PUSH4 0x35E061FC EQ PUSH2 0x20D JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x21D JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x230 JUMPI DUP1 PUSH4 0x449A52F8 EQ PUSH2 0x245 JUMPI DUP1 PUSH4 0x47786D37 EQ PUSH2 0x258 JUMPI DUP1 PUSH4 0x4CD88B76 EQ PUSH2 0x26B JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x27E JUMPI DUP1 PUSH4 0x5E81078D EQ PUSH2 0x289 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x29C JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x2C5 JUMPI DUP1 PUSH4 0x79CC6790 EQ PUSH2 0x2CD JUMPI DUP1 PUSH4 0x8D222F36 EQ PUSH2 0x2E0 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x2F3 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x313 JUMPI DUP1 PUSH4 0xA0712D68 EQ PUSH2 0x31B JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x32E JUMPI DUP1 PUSH4 0xA7FC7A07 EQ PUSH2 0x341 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x354 JUMPI DUP1 PUSH4 0xB429AFEB EQ PUSH2 0x367 JUMPI DUP1 PUSH4 0xB93EA6A1 EQ PUSH2 0x37A JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x38A JUMPI DUP1 PUSH4 0xE1C28BEF EQ PUSH2 0x39D JUMPI DUP1 PUSH4 0xE26C6F1B EQ PUSH2 0x3A5 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x3B8 JUMPI DUP1 PUSH4 0xFA02C4B7 EQ PUSH2 0x3CB JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x18D PUSH2 0x3DE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x19A SWAP2 SWAP1 PUSH2 0x1640 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1B6 PUSH2 0x1B1 CALLDATASIZE PUSH1 0x4 PUSH2 0x1578 JUMP JUMPDEST PUSH2 0x470 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x19A JUMP JUMPDEST PUSH1 0x8 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x19A JUMP JUMPDEST PUSH1 0xB SLOAD PUSH1 0xFF AND PUSH2 0x1B6 JUMP JUMPDEST PUSH2 0x1B6 PUSH2 0x1F1 CALLDATASIZE PUSH1 0x4 PUSH2 0x153C JUMP JUMPDEST PUSH2 0x48E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x19A JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH2 0x1CA JUMP JUMPDEST PUSH1 0xB SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1B6 JUMP JUMPDEST PUSH2 0x1B6 PUSH2 0x22B CALLDATASIZE PUSH1 0x4 PUSH2 0x1578 JUMP JUMPDEST PUSH2 0x4B2 JUMP JUMPDEST PUSH2 0x243 PUSH2 0x23E CALLDATASIZE PUSH1 0x4 PUSH2 0x1627 JUMP JUMPDEST PUSH2 0x4D4 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x243 PUSH2 0x253 CALLDATASIZE PUSH1 0x4 PUSH2 0x1578 JUMP JUMPDEST PUSH2 0x511 JUMP JUMPDEST PUSH2 0x243 PUSH2 0x266 CALLDATASIZE PUSH1 0x4 PUSH2 0x1627 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST PUSH2 0x243 PUSH2 0x279 CALLDATASIZE PUSH1 0x4 PUSH2 0x15C4 JUMP JUMPDEST PUSH2 0x5E3 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF AND PUSH2 0x1B6 JUMP JUMPDEST PUSH2 0x243 PUSH2 0x297 CALLDATASIZE PUSH1 0x4 PUSH2 0x15A2 JUMP JUMPDEST PUSH2 0x65C JUMP JUMPDEST PUSH2 0x1CA PUSH2 0x2AA CALLDATASIZE PUSH1 0x4 PUSH2 0x14E7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x243 PUSH2 0x6CE JUMP JUMPDEST PUSH2 0x243 PUSH2 0x2DB CALLDATASIZE PUSH1 0x4 PUSH2 0x1578 JUMP JUMPDEST PUSH2 0x709 JUMP JUMPDEST PUSH2 0x1B6 PUSH2 0x2EE CALLDATASIZE PUSH1 0x4 PUSH2 0x14E7 JUMP JUMPDEST PUSH2 0x745 JUMP JUMPDEST PUSH2 0x2FB PUSH2 0x768 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x19A JUMP JUMPDEST PUSH2 0x18D PUSH2 0x777 JUMP JUMPDEST PUSH2 0x243 PUSH2 0x329 CALLDATASIZE PUSH1 0x4 PUSH2 0x1627 JUMP JUMPDEST PUSH2 0x786 JUMP JUMPDEST PUSH2 0x1B6 PUSH2 0x33C CALLDATASIZE PUSH1 0x4 PUSH2 0x1578 JUMP JUMPDEST PUSH2 0x813 JUMP JUMPDEST PUSH2 0x243 PUSH2 0x34F CALLDATASIZE PUSH1 0x4 PUSH2 0x14E7 JUMP JUMPDEST PUSH2 0x88E JUMP JUMPDEST PUSH2 0x1B6 PUSH2 0x362 CALLDATASIZE PUSH1 0x4 PUSH2 0x1578 JUMP JUMPDEST PUSH2 0x917 JUMP JUMPDEST PUSH2 0x1B6 PUSH2 0x375 CALLDATASIZE PUSH1 0x4 PUSH2 0x14E7 JUMP JUMPDEST PUSH2 0x925 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1B6 JUMP JUMPDEST PUSH2 0x1CA PUSH2 0x398 CALLDATASIZE PUSH1 0x4 PUSH2 0x1509 JUMP JUMPDEST PUSH2 0x946 JUMP JUMPDEST PUSH2 0x243 PUSH2 0x971 JUMP JUMPDEST PUSH2 0x243 PUSH2 0x3B3 CALLDATASIZE PUSH1 0x4 PUSH2 0x15A2 JUMP JUMPDEST PUSH2 0x9DA JUMP JUMPDEST PUSH2 0x243 PUSH2 0x3C6 CALLDATASIZE PUSH1 0x4 PUSH2 0x14E7 JUMP JUMPDEST PUSH2 0xA51 JUMP JUMPDEST PUSH2 0x1B6 PUSH2 0x3D9 CALLDATASIZE PUSH1 0x4 PUSH2 0x1578 JUMP JUMPDEST PUSH2 0xAF6 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x9 DUP1 SLOAD PUSH2 0x3ED SWAP1 PUSH2 0x17DD JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x419 SWAP1 PUSH2 0x17DD JUMP JUMPDEST DUP1 ISZERO PUSH2 0x466 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x43B JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x466 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x449 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x47E DUP2 DUP6 DUP6 PUSH2 0xB6B JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x8 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x49C DUP6 DUP3 DUP6 PUSH2 0xC8F JUMP JUMPDEST PUSH2 0x4A7 DUP6 DUP6 DUP6 PUSH2 0xD09 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x47E DUP2 DUP6 DUP6 PUSH2 0x4C5 DUP4 DUP4 PUSH2 0x946 JUMP JUMPDEST PUSH2 0x4CF SWAP2 SWAP1 PUSH2 0x17AE JUMP JUMPDEST PUSH2 0xB6B JUMP JUMPDEST PUSH1 0xB SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x504 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4FB SWAP1 PUSH2 0x1749 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x50E CALLER DUP3 PUSH2 0xED0 JUMP JUMPDEST POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x1 EQ DUP1 PUSH2 0x533 JUMPI POP ADDRESS CALLER EQ JUMPDEST DUP1 PUSH2 0x556 JUMPI POP PUSH2 0x541 PUSH2 0x768 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST PUSH2 0x572 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4FB SWAP1 PUSH2 0x177A JUMP JUMPDEST PUSH1 0xB SLOAD PUSH1 0xFF AND PUSH2 0x594 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4FB SWAP1 PUSH2 0x1718 JUMP JUMPDEST PUSH2 0x59E DUP3 DUP3 PUSH2 0x1018 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x5 SLOAD ISZERO PUSH2 0x5DE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x9 PUSH1 0x24 DUP3 ADD MSTORE PUSH9 0x696D6D757461626C65 PUSH1 0xB8 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4FB JUMP JUMPDEST PUSH1 0x5 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5EF PUSH1 0x1 PUSH2 0x1163 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x607 JUMPI PUSH1 0x4 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE JUMPDEST PUSH2 0x611 DUP4 DUP4 PUSH2 0x11F2 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x657 JUMPI PUSH1 0x4 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x1 EQ DUP1 PUSH2 0x67E JUMPI POP ADDRESS CALLER EQ JUMPDEST DUP1 PUSH2 0x6A1 JUMPI POP PUSH2 0x68C PUSH2 0x768 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST PUSH2 0x6BD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4FB SWAP1 PUSH2 0x177A JUMP JUMPDEST PUSH1 0xB DUP1 SLOAD PUSH1 0xFF NOT AND DUP3 ISZERO ISZERO OR SWAP1 SSTORE POP JUMP JUMPDEST CALLER PUSH2 0x6D7 PUSH2 0x768 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x6FD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4FB SWAP1 PUSH2 0x16E3 JUMP JUMPDEST PUSH2 0x707 PUSH1 0x0 PUSH2 0x1274 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0xB SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x730 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4FB SWAP1 PUSH2 0x1749 JUMP JUMPDEST PUSH2 0x73B DUP3 CALLER DUP4 PUSH2 0xC8F JUMP JUMPDEST PUSH2 0x59E DUP3 DUP3 PUSH2 0xED0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0xFF AND JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0xA DUP1 SLOAD PUSH2 0x3ED SWAP1 PUSH2 0x17DD JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x1 EQ DUP1 PUSH2 0x7A8 JUMPI POP ADDRESS CALLER EQ JUMPDEST DUP1 PUSH2 0x7CB JUMPI POP PUSH2 0x7B6 PUSH2 0x768 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST PUSH2 0x7E7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4FB SWAP1 PUSH2 0x177A JUMP JUMPDEST PUSH1 0xB SLOAD PUSH1 0xFF AND PUSH2 0x809 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4FB SWAP1 PUSH2 0x1718 JUMP JUMPDEST PUSH2 0x50E CALLER DUP3 PUSH2 0x1018 JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 PUSH2 0x821 DUP3 DUP7 PUSH2 0x946 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x881 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4FB JUMP JUMPDEST PUSH2 0x4A7 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0xB6B JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x1 EQ DUP1 PUSH2 0x8B0 JUMPI POP ADDRESS CALLER EQ JUMPDEST DUP1 PUSH2 0x8D3 JUMPI POP PUSH2 0x8BE PUSH2 0x768 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST PUSH2 0x8EF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4FB SWAP1 PUSH2 0x177A JUMP JUMPDEST PUSH2 0x50E DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x47E DUP2 DUP6 DUP6 PUSH2 0xD09 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x762 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x1 EQ DUP1 PUSH2 0x993 JUMPI POP ADDRESS CALLER EQ JUMPDEST DUP1 PUSH2 0x9B6 JUMPI POP PUSH2 0x9A1 PUSH2 0x768 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST PUSH2 0x9D2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4FB SWAP1 PUSH2 0x177A JUMP JUMPDEST PUSH2 0x707 PUSH2 0x12C6 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x1 EQ DUP1 PUSH2 0x9FC JUMPI POP ADDRESS CALLER EQ JUMPDEST DUP1 PUSH2 0xA1F JUMPI POP PUSH2 0xA0A PUSH2 0x768 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST PUSH2 0xA3B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4FB SWAP1 PUSH2 0x177A JUMP JUMPDEST PUSH1 0xB DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMP JUMPDEST CALLER PUSH2 0xA5A PUSH2 0x768 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xA80 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4FB SWAP1 PUSH2 0x16E3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xAE5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4FB JUMP JUMPDEST PUSH2 0xAEE DUP2 PUSH2 0x1274 JUMP JUMPDEST PUSH2 0x50E PUSH2 0x12C6 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x1 EQ DUP1 PUSH2 0xB18 JUMPI POP ADDRESS CALLER EQ JUMPDEST DUP1 PUSH2 0xB3B JUMPI POP PUSH2 0xB26 PUSH2 0x768 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST PUSH2 0xB57 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4FB SWAP1 PUSH2 0x177A JUMP JUMPDEST PUSH2 0xB62 DUP4 DUP5 DUP5 PUSH2 0xB6B JUMP JUMPDEST POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xBCD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4FB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xC2E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4FB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC9B DUP5 DUP5 PUSH2 0x946 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 NOT DUP2 EQ PUSH2 0xD03 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0xCF6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4FB JUMP JUMPDEST PUSH2 0xD03 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0xB6B JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xD6D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4FB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xDCF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4FB JUMP JUMPDEST PUSH2 0xDDA DUP4 DUP4 DUP4 PUSH2 0x1340 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0xE52 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4FB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP2 DUP6 AND DUP2 MSTORE SWAP1 DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0xE89 SWAP1 DUP5 SWAP1 PUSH2 0x17AE JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1845 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH1 0x40 MLOAD PUSH2 0xEC3 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0xD03 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xF30 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E2066726F6D20746865207A65726F20616464726573 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x73 PUSH1 0xF8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4FB JUMP JUMPDEST PUSH2 0xF3C DUP3 PUSH1 0x0 DUP4 PUSH2 0x1340 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0xFB0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E20616D6F756E7420657863656564732062616C616E PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x6365 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4FB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP4 DUP4 SUB SWAP1 SSTORE PUSH1 0x8 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0xFDF SWAP1 DUP5 SWAP1 PUSH2 0x17C6 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1845 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1023 PUSH1 0x5 SLOAD SWAP1 JUMP JUMPDEST GT ISZERO PUSH2 0x108A JUMPI PUSH1 0x5 SLOAD DUP2 PUSH2 0x1036 PUSH1 0x8 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x1040 SWAP2 SWAP1 PUSH2 0x17AE JUMP JUMPDEST GT ISZERO PUSH2 0x108A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH25 0x115490CC8C10D85C1C19590E8818D85C08195E18D959591959 PUSH1 0x3A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4FB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x10E0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4FB JUMP JUMPDEST PUSH2 0x10EC PUSH1 0x0 DUP4 DUP4 PUSH2 0x1340 JUMP JUMPDEST DUP1 PUSH1 0x8 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x10FE SWAP2 SWAP1 PUSH2 0x17AE JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x112B SWAP1 DUP5 SWAP1 PUSH2 0x17AE JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH1 0x0 SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1845 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x0 SWAP1 PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x11AC JUMPI DUP2 PUSH1 0xFF AND PUSH1 0x1 EQ DUP1 ISZERO PUSH2 0x1188 JUMPI POP ADDRESS EXTCODESIZE ISZERO JUMPDEST PUSH2 0x11A4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4FB SWAP1 PUSH2 0x1695 JUMP JUMPDEST POP PUSH1 0x0 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0xFF DUP1 DUP5 AND SWAP2 AND LT PUSH2 0x11D3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4FB SWAP1 PUSH2 0x1695 JUMP JUMPDEST POP PUSH1 0x4 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0xFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x1 SWAP1 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x9 DUP1 SLOAD PUSH2 0x11FF SWAP1 PUSH2 0x17DD JUMP JUMPDEST ISZERO SWAP1 POP PUSH2 0x124D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH28 0x115490CC8C081D1BDAD95B881B985B5948185B1C9958591E481CD95D PUSH1 0x22 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4FB JUMP JUMPDEST DUP2 MLOAD PUSH2 0x1260 SWAP1 PUSH1 0x9 SWAP1 PUSH1 0x20 DUP6 ADD SWAP1 PUSH2 0x13AB JUMP JUMPDEST POP DUP1 MLOAD PUSH2 0x657 SWAP1 PUSH1 0xA SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH2 0x13AB JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x1 EQ DUP1 PUSH2 0x12E8 JUMPI POP ADDRESS CALLER EQ JUMPDEST DUP1 PUSH2 0x130B JUMPI POP PUSH2 0x12F6 PUSH2 0x768 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST PUSH2 0x1327 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4FB SWAP1 PUSH2 0x177A JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1391 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH27 0x1D1BDAD95B881D1C985B9CD9995C881DDA1A5B19481C185D5CD959 PUSH1 0x2A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4FB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO PUSH2 0x657 JUMPI PUSH2 0x657 DUP4 DUP5 DUP4 PUSH2 0xC8F JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0x13B7 SWAP1 PUSH2 0x17DD JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x13D9 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x141F JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x13F2 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x141F JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x141F JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x141F JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x1404 JUMP JUMPDEST POP PUSH2 0x142B SWAP3 SWAP2 POP PUSH2 0x142F JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x142B JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x1430 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x11ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x146C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x1486 JUMPI PUSH2 0x1486 PUSH2 0x182E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x14AE JUMPI PUSH2 0x14AE PUSH2 0x182E JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE DUP7 PUSH1 0x20 DUP6 DUP9 ADD ADD GT ISZERO PUSH2 0x14C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 PUSH1 0x20 DUP8 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP6 DUP4 ADD ADD MSTORE DUP1 SWAP5 POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x14F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1502 DUP3 PUSH2 0x1444 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x151C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1525 DUP4 PUSH2 0x1444 JUMP JUMPDEST SWAP2 POP PUSH2 0x1533 PUSH1 0x20 DUP5 ADD PUSH2 0x1444 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1551 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x155A DUP5 PUSH2 0x1444 JUMP JUMPDEST SWAP3 POP PUSH2 0x1568 PUSH1 0x20 DUP6 ADD PUSH2 0x1444 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x158B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1594 DUP4 PUSH2 0x1444 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x15B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1502 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x15D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x15EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x15FA DUP7 DUP4 DUP8 ADD PUSH2 0x145B JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1610 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x161D DUP6 DUP3 DUP7 ADD PUSH2 0x145B JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1639 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x166D JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x1651 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x167F JUMPI PUSH1 0x0 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2E SWAP1 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x40 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH23 0x36B4B73A34B7339034B9903737BA1030B63637BBB2B217 PUSH1 0x49 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH23 0x213AB93734B7339034B9903737BA1030B63637BBB2B217 PUSH1 0x49 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1A SWAP1 DUP3 ADD MSTORE PUSH26 0x31B0B63632B91034B9903737BA10309031B7B73A3937B63632B9 PUSH1 0x31 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x17C1 JUMPI PUSH2 0x17C1 PUSH2 0x1818 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x17D8 JUMPI PUSH2 0x17D8 PUSH2 0x1818 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x17F1 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x1812 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID 0xDD CALLCODE MSTORE 0xAD SHL 0xE2 0xC8 SWAP12 PUSH10 0xC2B068FC378DAA952BA7 CALL PUSH4 0xC4A11628 CREATE2 GAS 0x4D CREATE2 0x23 0xB3 0xEF LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG3 0xB0 0xE LT 0xCD MULMOD CALLER SLOAD 0xA8 CALLDATALOAD LOG2 0x27 LOG4 SGT PUSH25 0xFB1603ED59ADCA0BB17C63196201CA0F3B64736F6C63430008 MOD STOP CALLER ",
          "sourceMap": "86:216:68:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5568:91:63;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;8183:197;;;;;;:::i;:::-;;:::i;:::-;;;3348:14:78;;3341:22;3323:41;;3311:2;3296:18;8183:197:63;3278:92:78;6635:106:63;6722:12;;6635:106;;;11922:25:78;;;11910:2;11895:18;6635:106:63;11877:76:78;4760:82:63;4825:10;;;;4760:82;;9419:286;;;;;;:::i;:::-;;:::i;6491:84::-;;;6566:2;3527:36:78;;3515:2;3500:18;6491:84:63;3482:87:78;7007:81:63;7077:4;;7007:81;;3623:82;3688:10;;;;;;;3623:82;;10100:234;;;;;;:::i;:::-;;:::i;2906:145::-;;;;;;:::i;:::-;;:::i;:::-;;4580:174;;;;;;:::i;:::-;;:::i;7174:108::-;;;;;;:::i;:::-;;:::i;5367:136::-;;;;;;:::i;:::-;;:::i;1098:84:8:-;1145:4;1168:7;;;1098:84;;5039:105:63;;;;;;:::i;:::-;;:::i;6799:125::-;;;;;;:::i;:::-;-1:-1:-1;;;;;6899:18:63;6873:7;6899:18;;;:9;:18;;;;;;;6799:125;1668:101:0;;;:::i;3357:217:63:-;;;;;;:::i;:::-;;:::i;937:108:65:-;;;;;;:::i;:::-;;:::i;1036:85:0:-;;;:::i;:::-;;;-1:-1:-1;;;;;3139:32:78;;;3121:51;;3109:2;3094:18;1036:85:0;3076:102:78;5772:95:63;;;:::i;4114:160::-;;;;;;:::i;:::-;;:::i;10821:427::-;;;;;;:::i;:::-;;:::i;586:149:17:-;;;;;;:::i;:::-;;:::i;7479:189:63:-;;;;;;:::i;:::-;;:::i;915:172:17:-;;;;;;:::i;:::-;;:::i;1099:141:65:-;1153:27;1213:22;;;;;;1099:141;;7726:149:63;;;;;;:::i;:::-;;:::i;1328:99:17:-;;;:::i;3902:103:63:-;;;;;;:::i;:::-;;:::i;2560:237::-;;;;;;:::i;:::-;;:::i;8688:169::-;;;;;;:::i;:::-;;:::i;5568:91::-;5615:13;5647:5;5640:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5568:91;:::o;8183:197::-;8266:4;719:10:15;8320:32:63;719:10:15;8336:7:63;8345:6;8320:8;:32::i;:::-;-1:-1:-1;8369:4:63;;8183:197;-1:-1:-1;;;8183:197:63:o;6635:106::-;6722:12;;;6635:106::o;9419:286::-;9546:4;719:10:15;9602:38:63;9618:4;719:10:15;9633:6:63;9602:15;:38::i;:::-;9650:27;9660:4;9666:2;9670:6;9650:9;:27::i;:::-;-1:-1:-1;9694:4:63;;9419:286;-1:-1:-1;;;;9419:286:63:o;10100:234::-;10188:4;719:10:15;10242:64:63;719:10:15;10258:7:63;10295:10;10267:25;719:10:15;10258:7:63;10267:9;:25::i;:::-;:38;;;;:::i;:::-;10242:8;:64::i;2906:145::-;2969:10;;;;;;;2961:46;;;;-1:-1:-1;;;2961:46:63;;;;;;;:::i;:::-;;;;;;;;;3017:27;719:10:15;3037:6:63;3017:5;:27::i;:::-;2906:145;:::o;4580:174::-;2263:10;2250:24;;;;:12;:24;;;;;;;;:32;;:24;:32;;:63;;-1:-1:-1;2294:4:63;2303:10;2286:27;2250:63;:91;;;;2334:7;:5;:7::i;:::-;-1:-1:-1;;;;;2317:24:63;2325:4;-1:-1:-1;;;;;2317:24:63;;2250:91;2229:164;;;;-1:-1:-1;;;2229:164:63;;;;;;;:::i;:::-;4677:10:::1;::::0;::::1;;4669:46;;;;-1:-1:-1::0;;;4669:46:63::1;;;;;;;:::i;:::-;4725:22;4731:7;4740:6;4725:5;:22::i;:::-;4580:174:::0;;:::o;7174:108::-;7231:4;;:9;7223:31;;;;-1:-1:-1;;;7223:31:63;;5185:2:78;7223:31:63;;;5167:21:78;5224:1;5204:18;;;5197:29;-1:-1:-1;;;5242:18:78;;;5235:39;5291:18;;7223:31:63;5157:158:78;7223:31:63;7264:4;:11;7174:108::o;5367:136::-;3105:19:7;3127:25;3150:1;3127:22;:25::i;:::-;3105:47;;3166:14;3162:65;;;3196:13;:20;;-1:-1:-1;;3196:20:7;;;;;3162:65;5464:32:63::1;5481:5;5488:7;5464:16;:32::i;:::-;3251:14:7::0;3247:99;;;3281:13;:21;;-1:-1:-1;;3281:21:7;;;3321:14;;-1:-1:-1;3527:36:78;;3321:14:7;;3515:2:78;3500:18;3321:14:7;;;;;;;3247:99;3095:257;5367:136:63;;:::o;5039:105::-;2263:10;2250:24;;;;:12;:24;;;;;;;;:32;;:24;:32;;:63;;-1:-1:-1;2294:4:63;2303:10;2286:27;2250:63;:91;;;;2334:7;:5;:7::i;:::-;-1:-1:-1;;;;;2317:24:63;2325:4;-1:-1:-1;;;;;2317:24:63;;2250:91;2229:164;;;;-1:-1:-1;;;2229:164:63;;;;;;;:::i;:::-;4955:10;:23;;-1:-1:-1;;4955:23:63;;;;;;;2906:145;:::o;1668:101:0:-;719:10:15;1248:7:0;:5;:7::i;:::-;-1:-1:-1;;;;;1248:23:0;;1240:68;;;;-1:-1:-1;;;1240:68:0;;;;;;;:::i;:::-;1732:30:::1;1759:1;1732:18;:30::i;:::-;1668:101::o:0;3357:217:63:-;3441:10;;;;;;;3433:46;;;;-1:-1:-1;;;3433:46:63;;;;;;;:::i;:::-;3489;3505:7;719:10:15;3528:6:63;3489:15;:46::i;:::-;3545:22;3551:7;3560:6;3545:5;:22::i;937:108:65:-;-1:-1:-1;;;;;904:25:65;;998:4;904:25;;;:17;:25;;;;;;;;1017:23;1010:30;937:108;-1:-1:-1;;937:108:65:o;1036:85:0:-;1108:6;;-1:-1:-1;;;;;1108:6:0;;1036:85::o;5772:95:63:-;5821:13;5853:7;5846:14;;;;;:::i;4114:160::-;2263:10;2250:24;;;;:12;:24;;;;;;;;:32;;:24;:32;;:63;;-1:-1:-1;2294:4:63;2303:10;2286:27;2250:63;:91;;;;2334:7;:5;:7::i;:::-;-1:-1:-1;;;;;2317:24:63;2325:4;-1:-1:-1;;;;;2317:24:63;;2250:91;2229:164;;;;-1:-1:-1;;;2229:164:63;;;;;;;:::i;:::-;4192:10:::1;::::0;::::1;;4184:46;;;;-1:-1:-1::0;;;4184:46:63::1;;;;;;;:::i;:::-;4240:27;719:10:15::0;4260:6:63::1;4240:5;:27::i;10821:427::-:0;10914:4;719:10:15;10914:4:63;10995:25;719:10:15;11012:7:63;10995:9;:25::i;:::-;10968:52;;11058:15;11038:16;:35;;11030:85;;;;-1:-1:-1;;;11030:85:63;;10857:2:78;11030:85:63;;;10839:21:78;10896:2;10876:18;;;10869:30;10935:34;10915:18;;;10908:62;-1:-1:-1;;;10986:18:78;;;10979:35;11031:19;;11030:85:63;10829:227:78;11030:85:63;11149:60;11158:5;11165:7;11193:15;11174:16;:34;11149:8;:60::i;586:149:17:-;2263:10:63;2250:24;;;;:12;:24;;;;;;;;:32;;:24;:32;;:63;;-1:-1:-1;2294:4:63;2303:10;2286:27;2250:63;:91;;;;2334:7;:5;:7::i;:::-;-1:-1:-1;;;;;2317:24:63;2325:4;-1:-1:-1;;;;;2317:24:63;;2250:91;2229:164;;;;-1:-1:-1;;;2229:164:63;;;;;;;:::i;:::-;701:27:17::1;716:11;-1:-1:-1::0;;;;;804:25:17;;;;;:12;:25;;;;;:32;;-1:-1:-1;;804:32:17;832:4;804:32;;;740:103;7479:189:63;7558:4;719:10:15;7612:28:63;719:10:15;7629:2:63;7633:6;7612:9;:28::i;915:172:17:-;-1:-1:-1;;;;;1210:22:17;;1019:12;1210:22;;;:12;:22;;;;;;;;1057:23;1092:147;7726:149:63;-1:-1:-1;;;;;7841:18:63;;;7815:7;7841:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;7726:149::o;1328:99:17:-;2263:10:63;2250:24;;;;:12;:24;;;;;;;;:32;;:24;:32;;:63;;-1:-1:-1;2294:4:63;2303:10;2286:27;2250:63;:91;;;;2334:7;:5;:7::i;:::-;-1:-1:-1;;;;;2317:24:63;2325:4;-1:-1:-1;;;;;2317:24:63;;2250:91;2229:164;;;;-1:-1:-1;;;2229:164:63;;;;;;;:::i;:::-;1400:20:17::1;:18;:20::i;3902:103:63:-:0;2263:10;2250:24;;;;:12;:24;;;;;;;;:32;;:24;:32;;:63;;-1:-1:-1;2294:4:63;2303:10;2286:27;2250:63;:91;;;;2334:7;:5;:7::i;:::-;-1:-1:-1;;;;;2317:24:63;2325:4;-1:-1:-1;;;;;2317:24:63;;2250:91;2229:164;;;;-1:-1:-1;;;2229:164:63;;;;;;;:::i;:::-;3818:10;:23;;-1:-1:-1;;3818:23:63;;;;;;;;;2906:145;:::o;2560:237::-;719:10:15;1248:7:0;:5;:7::i;:::-;-1:-1:-1;;;;;1248:23:0;;1240:68;;;;-1:-1:-1;;;1240:68:0;;;;;;;:::i;:::-;-1:-1:-1;;;;;2657:22:63;::::1;2649:73;;;::::0;-1:-1:-1;;;2649:73:63;;5522:2:78;2649:73:63::1;::::0;::::1;5504:21:78::0;5561:2;5541:18;;;5534:30;5600:34;5580:18;;;5573:62;-1:-1:-1;;;5651:18:78;;;5644:36;5697:19;;2649:73:63::1;5494:228:78::0;2649:73:63::1;2732:28;2751:8;2732:18;:28::i;:::-;2770:20;:18;:20::i;8688:169::-:0;2263:10;8783:4;2250:24;;;:12;:24;;;;;;;;:32;;:24;:32;;:63;;-1:-1:-1;2294:4:63;2303:10;2286:27;2250:63;:91;;;;2334:7;:5;:7::i;:::-;-1:-1:-1;;;;;2317:24:63;2325:4;-1:-1:-1;;;;;2317:24:63;;2250:91;2229:164;;;;-1:-1:-1;;;2229:164:63;;;;;;;:::i;:::-;8799:30:::1;8808:5;8815;8822:6;8799:8;:30::i;:::-;-1:-1:-1::0;8846:4:63::1;8688:169:::0;;;;:::o;14445:370::-;-1:-1:-1;;;;;14576:19:63;;14568:68;;;;-1:-1:-1;;;14568:68:63;;10452:2:78;14568:68:63;;;10434:21:78;10491:2;10471:18;;;10464:30;10530:34;10510:18;;;10503:62;-1:-1:-1;;;10581:18:78;;;10574:34;10625:19;;14568:68:63;10424:226:78;14568:68:63;-1:-1:-1;;;;;14654:21:63;;14646:68;;;;-1:-1:-1;;;14646:68:63;;5929:2:78;14646:68:63;;;5911:21:78;5968:2;5948:18;;;5941:30;6007:34;5987:18;;;5980:62;-1:-1:-1;;;6058:18:78;;;6051:32;6100:19;;14646:68:63;5901:224:78;14646:68:63;-1:-1:-1;;;;;14725:18:63;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;14776:32;;11922:25:78;;;14776:32:63;;11895:18:78;14776:32:63;;;;;;;14445:370;;;:::o;15096:441::-;15226:24;15253:25;15263:5;15270:7;15253:9;:25::i;:::-;15226:52;;-1:-1:-1;;15292:16:63;:37;15288:243;;15373:6;15353:16;:26;;15345:68;;;;-1:-1:-1;;;15345:68:63;;6332:2:78;15345:68:63;;;6314:21:78;6371:2;6351:18;;;6344:30;6410:31;6390:18;;;6383:59;6459:18;;15345:68:63;6304:179:78;15345:68:63;15455:51;15464:5;15471:7;15499:6;15480:16;:25;15455:8;:51::i;:::-;15216:321;15096:441;;;:::o;11711:651::-;-1:-1:-1;;;;;11837:18:63;;11829:68;;;;-1:-1:-1;;;11829:68:63;;9692:2:78;11829:68:63;;;9674:21:78;9731:2;9711:18;;;9704:30;9770:34;9750:18;;;9743:62;-1:-1:-1;;;9821:18:78;;;9814:35;9866:19;;11829:68:63;9664:227:78;11829:68:63;-1:-1:-1;;;;;11915:16:63;;11907:64;;;;-1:-1:-1;;;11907:64:63;;4378:2:78;11907:64:63;;;4360:21:78;4417:2;4397:18;;;4390:30;4456:34;4436:18;;;4429:62;-1:-1:-1;;;4507:18:78;;;4500:33;4550:19;;11907:64:63;4350:225:78;11907:64:63;11982:38;12003:4;12009:2;12013:6;11982:20;:38::i;:::-;-1:-1:-1;;;;;12053:15:63;;12031:19;12053:15;;;:9;:15;;;;;;12086:21;;;;12078:72;;;;-1:-1:-1;;;12078:72:63;;6690:2:78;12078:72:63;;;6672:21:78;6729:2;6709:18;;;6702:30;6768:34;6748:18;;;6741:62;-1:-1:-1;;;6819:18:78;;;6812:36;6865:19;;12078:72:63;6662:228:78;12078:72:63;-1:-1:-1;;;;;12184:15:63;;;;;;;:9;:15;;;;;;12202:20;;;12184:38;;12242:13;;;;;;;;:23;;12216:6;;12184:15;12242:23;;12216:6;;12242:23;:::i;:::-;;;;;;;;12296:2;-1:-1:-1;;;;;12281:26:63;12290:4;-1:-1:-1;;;;;12281:26:63;-1:-1:-1;;;;;;;;;;;12300:6:63;12281:26;;;;11922:25:78;;11910:2;11895:18;;11877:76;12281:26:63;;;;;;;;12318:37;5367:136;13446:576;-1:-1:-1;;;;;13529:21:63;;13521:67;;;;-1:-1:-1;;;13521:67:63;;8934:2:78;13521:67:63;;;8916:21:78;8973:2;8953:18;;;8946:30;9012:34;8992:18;;;8985:62;-1:-1:-1;;;9063:18:78;;;9056:31;9104:19;;13521:67:63;8906:223:78;13521:67:63;13599:49;13620:7;13637:1;13641:6;13599:20;:49::i;:::-;-1:-1:-1;;;;;13684:18:63;;13659:22;13684:18;;;:9;:18;;;;;;13720:24;;;;13712:71;;;;-1:-1:-1;;;13712:71:63;;4782:2:78;13712:71:63;;;4764:21:78;4821:2;4801:18;;;4794:30;4860:34;4840:18;;;4833:62;-1:-1:-1;;;4911:18:78;;;4904:32;4953:19;;13712:71:63;4754:224:78;13712:71:63;-1:-1:-1;;;;;13817:18:63;;;;;;:9;:18;;;;;13838:23;;;13817:44;;13881:12;:22;;13855:6;;13817:18;13881:22;;13855:6;;13881:22;:::i;:::-;;;;-1:-1:-1;;13919:37:63;;11922:25:78;;;13945:1:63;;-1:-1:-1;;;;;13919:37:63;;;-1:-1:-1;;;;;;;;;;;13919:37:63;11910:2:78;11895:18;13919:37:63;;;;;;;3095:257:7;5367:136:63;;:::o;12638:488::-;12724:1;12716:5;7077:4;;;7007:81;12716:5;:9;12713:89;;;7077:4;;12757:6;12735:19;6722:12;;;6635:106;12735:19;:28;;;;:::i;:::-;:37;;12727:75;;;;-1:-1:-1;;;12727:75:63;;10098:2:78;12727:75:63;;;10080:21:78;10137:2;10117:18;;;10110:30;-1:-1:-1;;;10156:18:78;;;10149:55;10221:18;;12727:75:63;10070:175:78;12727:75:63;-1:-1:-1;;;;;12820:21:63;;12812:65;;;;-1:-1:-1;;;12812:65:63;;11263:2:78;12812:65:63;;;11245:21:78;11302:2;11282:18;;;11275:30;11341:33;11321:18;;;11314:61;11392:18;;12812:65:63;11235:181:78;12812:65:63;12888:49;12917:1;12921:7;12930:6;12888:20;:49::i;:::-;12964:6;12948:12;;:22;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;;;12980:18:63;;;;;;:9;:18;;;;;:28;;13002:6;;12980:18;:28;;13002:6;;12980:28;:::i;:::-;;;;-1:-1:-1;;13023:37:63;;11922:25:78;;;-1:-1:-1;;;;;13023:37:63;;;13040:1;;-1:-1:-1;;;;;;;;;;;13023:37:63;11910:2:78;11895:18;13023:37:63;;;;;;;4580:174;;:::o;5281:797:7:-;5678:13;;5345:4;;5678:13;;;;;5674:398;;;5732:7;:12;;5743:1;5732:12;:50;;;;-1:-1:-1;5776:4:7;1465:19:14;:23;5732:50:7;5707:155;;;;-1:-1:-1;;;5707:155:7;;;;;;;:::i;:::-;-1:-1:-1;5883:5:7;;5281:797;-1:-1:-1;5281:797:7:o;5674:398::-;5927:12;;:22;;;;:12;;:22;5919:81;;;;-1:-1:-1;;;5919:81:7;;;;;;;:::i;:::-;-1:-1:-1;6014:12:7;:22;;-1:-1:-1;;6014:22:7;;;;;;;;;;;;-1:-1:-1;;5281:797:7:o;5674:398::-;5281:797;;;:::o;5150:211:63:-;5253:5;5247:19;;;;;:::i;:::-;:24;;-1:-1:-1;5239:65:63;;;;-1:-1:-1;;;5239:65:63;;8225:2:78;5239:65:63;;;8207:21:78;8264:2;8244:18;;;8237:30;-1:-1:-1;;;8283:18:78;;;8276:58;8351:18;;5239:65:63;8197:178:78;5239:65:63;5314:13;;;;:5;;:13;;;;;:::i;:::-;-1:-1:-1;5337:17:63;;;;:7;;:17;;;;;:::i;2270:187:0:-;2362:6;;;-1:-1:-1;;;;;2378:17:0;;;-1:-1:-1;;;;;;2378:17:0;;;;;;;2410:40;;2362:6;;;2378:17;2362:6;;2410:40;;2343:16;;2410:40;2333:124;2270:187;:::o;1432:101:17:-;2263:10:63;2250:24;;;;:12;:24;;;;;;;;:32;;:24;:32;;:63;;-1:-1:-1;2294:4:63;2303:10;2286:27;2250:63;:91;;;;2334:7;:5;:7::i;:::-;-1:-1:-1;;;;;2317:24:63;2325:4;-1:-1:-1;;;;;2317:24:63;;2250:91;2229:164;;;;-1:-1:-1;;;2229:164:63;;;;;;;:::i;:::-;1515:10:17::1;1502:24;::::0;;;:12:::1;:24;::::0;;;;1495:31;;-1:-1:-1;;1495:31:17::1;::::0;;1432:101::o;16121:250:63:-;1145:4:8;1168:7;;;16255:9:63;16247:49;;;;-1:-1:-1;;;16247:49:63;;9336:2:78;16247:49:63;;;9318:21:78;9375:2;9355:18;;;9348:30;-1:-1:-1;;;9394:18:78;;;9387:57;9461:18;;16247:49:63;9308:177:78;16247:49:63;-1:-1:-1;;;;;16309:18:63;;;16306:58;;16329:35;16345:4;16351;16357:6;16329:15;:35::i;-1:-1:-1:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:173:78;82:20;;-1:-1:-1;;;;;131:31:78;;121:42;;111:2;;177:1;174;167:12;192:719;235:5;288:3;281:4;273:6;269:17;265:27;255:2;;306:1;303;296:12;255:2;329:20;;-1:-1:-1;;;;;398:10:78;;;395:2;;;411:18;;:::i;:::-;486:2;480:9;454:2;540:13;;-1:-1:-1;;536:22:78;;;560:2;532:31;528:40;516:53;;;584:18;;;604:22;;;581:46;578:2;;;630:18;;:::i;:::-;670:10;666:2;659:22;705:2;697:6;690:18;751:3;744:4;739:2;731:6;727:15;723:26;720:35;717:2;;;768:1;765;758:12;717:2;832;825:4;817:6;813:17;806:4;798:6;794:17;781:54;879:1;872:4;867:2;859:6;855:15;851:26;844:37;899:6;890:15;;;;;;245:666;;;;:::o;916:186::-;975:6;1028:2;1016:9;1007:7;1003:23;999:32;996:2;;;1044:1;1041;1034:12;996:2;1067:29;1086:9;1067:29;:::i;:::-;1057:39;986:116;-1:-1:-1;;;986:116:78:o;1107:260::-;1175:6;1183;1236:2;1224:9;1215:7;1211:23;1207:32;1204:2;;;1252:1;1249;1242:12;1204:2;1275:29;1294:9;1275:29;:::i;:::-;1265:39;;1323:38;1357:2;1346:9;1342:18;1323:38;:::i;:::-;1313:48;;1194:173;;;;;:::o;1372:328::-;1449:6;1457;1465;1518:2;1506:9;1497:7;1493:23;1489:32;1486:2;;;1534:1;1531;1524:12;1486:2;1557:29;1576:9;1557:29;:::i;:::-;1547:39;;1605:38;1639:2;1628:9;1624:18;1605:38;:::i;:::-;1595:48;;1690:2;1679:9;1675:18;1662:32;1652:42;;1476:224;;;;;:::o;1705:254::-;1773:6;1781;1834:2;1822:9;1813:7;1809:23;1805:32;1802:2;;;1850:1;1847;1840:12;1802:2;1873:29;1892:9;1873:29;:::i;:::-;1863:39;1949:2;1934:18;;;;1921:32;;-1:-1:-1;;;1792:167:78:o;1964:273::-;2020:6;2073:2;2061:9;2052:7;2048:23;2044:32;2041:2;;;2089:1;2086;2079:12;2041:2;2128:9;2115:23;2181:5;2174:13;2167:21;2160:5;2157:32;2147:2;;2203:1;2200;2193:12;2242:543;2330:6;2338;2391:2;2379:9;2370:7;2366:23;2362:32;2359:2;;;2407:1;2404;2397:12;2359:2;2434:23;;-1:-1:-1;;;;;2506:14:78;;;2503:2;;;2533:1;2530;2523:12;2503:2;2556:50;2598:7;2589:6;2578:9;2574:22;2556:50;:::i;:::-;2546:60;;2659:2;2648:9;2644:18;2631:32;2615:48;;2688:2;2678:8;2675:16;2672:2;;;2704:1;2701;2694:12;2672:2;;2727:52;2771:7;2760:8;2749:9;2745:24;2727:52;:::i;:::-;2717:62;;;2349:436;;;;;:::o;2790:180::-;2849:6;2902:2;2890:9;2881:7;2877:23;2873:32;2870:2;;;2918:1;2915;2908:12;2870:2;-1:-1:-1;2941:23:78;;2860:110;-1:-1:-1;2860:110:78:o;3574:597::-;3686:4;3715:2;3744;3733:9;3726:21;3776:6;3770:13;3819:6;3814:2;3803:9;3799:18;3792:34;3844:1;3854:140;3868:6;3865:1;3862:13;3854:140;;;3963:14;;;3959:23;;3953:30;3929:17;;;3948:2;3925:26;3918:66;3883:10;;3854:140;;;4012:6;4009:1;4006:13;4003:2;;;4082:1;4077:2;4068:6;4057:9;4053:22;4049:31;4042:42;4003:2;-1:-1:-1;4155:2:78;4134:15;-1:-1:-1;;4130:29:78;4115:45;;;;4162:2;4111:54;;3695:476;-1:-1:-1;;;3695:476:78:o;6895:410::-;7097:2;7079:21;;;7136:2;7116:18;;;7109:30;7175:34;7170:2;7155:18;;7148:62;-1:-1:-1;;;7241:2:78;7226:18;;7219:44;7295:3;7280:19;;7069:236::o;7310:356::-;7512:2;7494:21;;;7531:18;;;7524:30;7590:34;7585:2;7570:18;;7563:62;7657:2;7642:18;;7484:182::o;7671:347::-;7873:2;7855:21;;;7912:2;7892:18;;;7885:30;-1:-1:-1;;;7946:2:78;7931:18;;7924:53;8009:2;7994:18;;7845:173::o;8380:347::-;8582:2;8564:21;;;8621:2;8601:18;;;8594:30;-1:-1:-1;;;8655:2:78;8640:18;;8633:53;8718:2;8703:18;;8554:173::o;11421:350::-;11623:2;11605:21;;;11662:2;11642:18;;;11635:30;-1:-1:-1;;;11696:2:78;11681:18;;11674:56;11762:2;11747:18;;11595:176::o;12147:128::-;12187:3;12218:1;12214:6;12211:1;12208:13;12205:2;;;12224:18;;:::i;:::-;-1:-1:-1;12260:9:78;;12195:80::o;12280:125::-;12320:4;12348:1;12345;12342:8;12339:2;;;12353:18;;:::i;:::-;-1:-1:-1;12390:9:78;;12329:76::o;12410:380::-;12489:1;12485:12;;;;12532;;;12553:2;;12607:4;12599:6;12595:17;12585:27;;12553:2;12660;12652:6;12649:14;12629:18;12626:38;12623:2;;;12706:10;12701:3;12697:20;12694:1;12687:31;12741:4;12738:1;12731:15;12769:4;12766:1;12759:15;12623:2;;12465:325;;;:::o;12795:127::-;12856:10;12851:3;12847:20;12844:1;12837:31;12887:4;12884:1;12877:15;12911:4;12908:1;12901:15;12927:127;12988:10;12983:3;12979:20;12976:1;12969:31;13019:4;13016:1;13009:15;13043:4;13040:1;13033:15"
        },
        "gasEstimates": {
          "creation": {
            "codeDepositCost": "1259600",
            "executionCost": "infinite",
            "totalCost": "infinite"
          },
          "external": {
            "addController(address)": "29548",
            "allowBurn()": "2447",
            "allowMint()": "2348",
            "allowance(address,address)": "infinite",
            "approve(address,uint256)": "24601",
            "approveTransfer(address,uint256)": "29691",
            "approvedSeller(address)": "2946",
            "balanceOf(address)": "2845",
            "burn(uint256)": "infinite",
            "burnFrom(address,uint256)": "infinite",
            "cap()": "2402",
            "decimals()": "265",
            "decreaseAllowance(address,uint256)": "27412",
            "increaseAllowance(address,uint256)": "27132",
            "initialize(string,string)": "infinite",
            "isController(address)": "3111",
            "mint(uint256)": "infinite",
            "mintTo(address,uint256)": "infinite",
            "name()": "infinite",
            "owner()": "2742",
            "paused()": "2568",
            "relinquishControl()": "31731",
            "renounceOwnership()": "28492",
            "requireSellerApproval()": "2865",
            "setAllowBurn(bool)": "29548",
            "setAllowMint(bool)": "29210",
            "setCap(uint256)": "24664",
            "symbol()": "infinite",
            "totalSupply()": "2303",
            "transfer(address,uint256)": "infinite",
            "transferFrom(address,address,uint256)": "infinite",
            "transferOwnership(address)": "infinite"
          }
        },
        "methodIdentifiers": {
          "addController(address)": "a7fc7a07",
          "allowBurn()": "35e061fc",
          "allowMint()": "1b8dca74",
          "allowance(address,address)": "dd62ed3e",
          "approve(address,uint256)": "095ea7b3",
          "approveTransfer(address,uint256)": "fa02c4b7",
          "approvedSeller(address)": "8d222f36",
          "balanceOf(address)": "70a08231",
          "burn(uint256)": "42966c68",
          "burnFrom(address,uint256)": "79cc6790",
          "cap()": "355274ea",
          "decimals()": "313ce567",
          "decreaseAllowance(address,uint256)": "a457c2d7",
          "increaseAllowance(address,uint256)": "39509351",
          "initialize(string,string)": "4cd88b76",
          "isController(address)": "b429afeb",
          "mint(uint256)": "a0712d68",
          "mintTo(address,uint256)": "449a52f8",
          "name()": "06fdde03",
          "owner()": "8da5cb5b",
          "paused()": "5c975abb",
          "relinquishControl()": "e1c28bef",
          "renounceOwnership()": "715018a6",
          "requireSellerApproval()": "b93ea6a1",
          "setAllowBurn(bool)": "e26c6f1b",
          "setAllowMint(bool)": "5e81078d",
          "setCap(uint256)": "47786d37",
          "symbol()": "95d89b41",
          "totalSupply()": "18160ddd",
          "transfer(address,uint256)": "a9059cbb",
          "transferFrom(address,address,uint256)": "23b872dd",
          "transferOwnership(address)": "f2fde38b"
        }
      },
      "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approvedSeller\",\"type\":\"address\"}],\"name\":\"ApprovedSellerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approvedSeller\",\"type\":\"address\"}],\"name\":\"ApprovedSellerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controllerAddress\",\"type\":\"address\"}],\"name\":\"ControllerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controllerAddress\",\"type\":\"address\"}],\"name\":\"ControllerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowBurn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approveTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"approvedSeller\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isController\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relinquishControl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requireSellerApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_requireSellerApproval\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"allowBurn_\",\"type\":\"bool\"}],\"name\":\"setAllowBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"allowMint_\",\"type\":\"bool\"}],\"name\":\"setAllowMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cap_\",\"type\":\"uint256\"}],\"name\":\"setCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addController(address)\":{\"details\":\"Add an address allowed to control this contract\"},\"allowBurn()\":{\"details\":\"set allow burn\"},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"approveTransfer(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Destroys `amount` tokens from the caller. See {ERC20-_burn}.\"},\"burnFrom(address,uint256)\":{\"details\":\"Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`.\"},\"cap()\":{\"details\":\"Returns the cap on the token's total supply.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"isController(address)\":{\"details\":\"Check if this address is a controller\"},\"mint(uint256)\":{\"details\":\"Destroys `amount` tokens from the caller. See {ERC20-_mint}.\"},\"mintTo(address,uint256)\":{\"details\":\"Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_mint} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"relinquishControl()\":{\"details\":\"Remove the sender address from the list of controllers\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setAllowBurn(bool)\":{\"details\":\"set allow burn flag\"},\"setAllowMint(bool)\":{\"details\":\"set allow mint flag\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"events\":{\"ControllerAdded(address,address)\":{\"notice\":\"emitted when a controller is added.\"},\"ControllerRemoved(address,address)\":{\"notice\":\"emitted when a controller is removed.\"}},\"kind\":\"user\",\"methods\":{\"requireSellerApproval()\":{\"notice\":\"return require seller approval flag\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/token/TestDAI.sol\":\"TestDAI\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0-rc.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !Address.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa38813d89d50ccd090040ce6a4d7924bba392ce31114746d8d6d3e721484f868\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/access/Controllable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"../interfaces/IControllable.sol\\\";\\n\\nabstract contract Controllable is IControllable {\\n    mapping(address => bool) internal _controllers;\\n\\n    /**\\n     * @dev Throws if called by any account not in authorized list\\n     */\\n    modifier onlyController() virtual {\\n        require(\\n            _controllers[msg.sender] == true || address(this) == msg.sender,\\n            \\\"Controllable: caller is not a controller\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Add an address allowed to control this contract\\n     */\\n    function addController(address _controller)\\n        external\\n        override\\n        onlyController\\n    {\\n        _addController(_controller);\\n    }\\n    function _addController(address _controller) internal {\\n        _controllers[_controller] = true;\\n    }\\n\\n    /**\\n     * @dev Check if this address is a controller\\n     */\\n    function isController(address _address)\\n        external\\n        view\\n        override\\n        returns (bool allowed)\\n    {\\n        allowed = _isController(_address);\\n    }\\n    function _isController(address _address)\\n        internal view\\n        returns (bool allowed)\\n    {\\n        allowed = _controllers[_address];\\n    }\\n\\n    /**\\n     * @dev Remove the sender address from the list of controllers\\n     */\\n    function relinquishControl() external override onlyController {\\n        _relinquishControl();\\n    }\\n    function _relinquishControl() internal onlyController{\\n        delete _controllers[msg.sender];\\n    }\\n}\\n\",\"keccak256\":\"0x3ec41d0cba41ef15351073a2abf5d76ba26ff568989ccc0d2dd654dc9d24f1d8\",\"license\":\"MIT\"},\"contracts/interfaces/IControllable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n/// @notice a controllable contract interface. allows for controllers to perform privileged actions. controllera can other controllers and remove themselves.\\ninterface IControllable {\\n\\n    /// @notice emitted when a controller is added.\\n    event ControllerAdded(\\n        address indexed contractAddress,\\n        address indexed controllerAddress\\n    );\\n\\n    /// @notice emitted when a controller is removed.\\n    event ControllerRemoved(\\n        address indexed contractAddress,\\n        address indexed controllerAddress\\n    );\\n\\n    /// @notice adds a controller.\\n    /// @param controller the controller to add.\\n    function addController(address controller) external;\\n\\n    /// @notice removes a controller.\\n    /// @param controller the address to check\\n    /// @return true if the address is a controller\\n    function isController(address controller) external view returns (bool);\\n\\n    /// @notice remove ourselves from the list of controllers.\\n    function relinquishControl() external;\\n}\\n\",\"keccak256\":\"0x509861eda69d1c0e5e3087278dea73922d8708df9fccc41fecc8d1f4dd0b9818\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0-rc.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9933eb67311e9b552e97c8f6efba871271e0b16387248ddf634796d4614653c9\",\"license\":\"MIT\"},\"contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0-rc.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC20.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"../../access/Controllable.sol\\\";\\n\\nimport \\\"./utils/ApprovedSellers.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, Pausable, ApprovedSellers, Ownable, Controllable, Initializable {\\n    uint256 private _cap;\\n\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    bool private _allowMint;\\n    bool private _allowBurn;\\n\\n    constructor() {\\n        _addController(msg.sender);\\n        _allowMint = true;\\n        _allowBurn = true;\\n    }\\n\\n    modifier onlyController() virtual override {\\n        require(\\n            _controllers[msg.sender] == true || address(this) == msg.sender || address(this) == owner(),\\n            \\\"caller is not a controller\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n        _relinquishControl();\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        require(_allowBurn, \\\"Burning is not allowed.\\\");\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        require(_allowBurn, \\\"Burning is not allowed.\\\");\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n\\n    /**\\n     * @dev set allow burn\\n     */\\n    function allowBurn() public view returns (bool) {\\n        return _allowBurn;\\n    }\\n\\n    /**\\n     * @dev set allow burn flag\\n     */\\n    function _setAllowBurn(bool allowBurn_) internal {\\n        _allowBurn = allowBurn_;\\n    }\\n\\n    /**\\n     * @dev set allow burn flag\\n     */\\n    function setAllowBurn(bool allowBurn_) public onlyController {\\n        _setAllowBurn(allowBurn_);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_mint}.\\n     */\\n    function mint(uint256 amount) public virtual onlyController {\\n        require(_allowMint, \\\"minting is not allowed.\\\");\\n        _mint(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_mint} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function mintTo(address account, uint256 amount) public virtual onlyController {\\n        require(_allowMint, \\\"minting is not allowed.\\\");\\n        _mint(account, amount);\\n    }\\n\\n    function allowMint() public view returns (bool) {\\n        return _allowMint;\\n    }\\n\\n    /**\\n     * @dev set allow mint flag\\n     */\\n    function _setAllowMint(bool allowMint_) internal {\\n        _allowMint = allowMint_;\\n    }\\n\\n    /**\\n     * @dev set allow mint flag\\n     */\\n    function setAllowMint(bool allowMint_) external onlyController {\\n        _setAllowMint(allowMint_);\\n    }\\n\\n    function _initializeToken(string memory name_, string memory symbol_) internal {\\n        require(bytes(_name).length == 0, \\\"ERC20 token name already set\\\");\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    function initialize(string memory name_, string memory symbol_) external initializer() {\\n        _initializeToken(name_, symbol_);\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() external view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() external view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n    \\n    /**\\n     * @dev Returns the cap on the token's total supply.\\n     */\\n    function cap() public view virtual returns (uint256) {\\n        return _cap;\\n    }\\n    function _setCap(uint256 cap_) internal virtual {\\n        _cap = cap_;\\n    }\\n    function setCap(uint256 cap_) external {\\n        require(_cap == 0, \\\"immutable\\\");\\n        _cap = cap_;\\n    }\\n\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approveTransfer(address owner, uint256 amount) public virtual onlyController returns (bool) {\\n        _approve(owner, owner, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        if(cap() > 0) require(ERC20.totalSupply() + amount <= cap(), \\\"ERC20Capped: cap exceeded\\\");\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address,\\n        uint256 amount\\n    ) internal virtual {\\n        require(!paused(), \\\"token transfer while paused\\\");\\n        if(from != address(0)) _spendAllowance(from, from, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address,\\n        address,\\n        uint256\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x8f17ee6091766c973ec2e738fa65f4330117412f7d2308d4f433a3af64b70dd6\",\"license\":\"MIT\"},\"contracts/token/ERC20/utils/ApprovedSellers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n/// @notice approved sellers. tracks approved sellers (people allowed to send the token)\\ncontract ApprovedSellers {\\n\\n  // generated when a approved seller is added\\n  event ApprovedSellerAdded(address indexed approvedSeller);\\n  // generated when a approved seller is removed\\n  event ApprovedSellerRemoved(address indexed approvedSeller);\\n  \\n  bool internal requireSellerApproval_;\\n  \\n  mapping(address => bool) internal _isApprovedSeller;\\n\\n  /// @notice add an approved seller\\n  function _setApprovedSeller(address seller, bool approveState) internal {\\n    _isApprovedSeller[seller] = approveState;\\n    if(approveState) emit ApprovedSellerAdded(seller);\\n    else emit ApprovedSellerRemoved(seller);\\n  }\\n  \\n  /// @notice check if an address is an approved seller\\n  function _approvedSeller(address seller) internal view returns (bool) {\\n    return _isApprovedSeller[seller];\\n  }\\n  function approvedSeller(address seller) public view returns (bool) {\\n    return _approvedSeller(seller);\\n  }\\n\\n  /// @notice return require seller approval flag\\n  function requireSellerApproval() public view returns (bool _requireSellerApproval) {\\n    _requireSellerApproval = requireSellerApproval_;\\n  }\\n\\n  function _setRequireSellerApproval(bool _requireSellerApproval) internal {\\n    requireSellerApproval_ = _requireSellerApproval;\\n  }\\n  \\n}\\n\",\"keccak256\":\"0xbd678e4fdc665b8c75f69061c952cb6d8497501077af7be8f0397c4e1e3198f4\",\"license\":\"MIT\"},\"contracts/token/TestDAI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC20/ERC20.sol\\\";\\n\\ncontract TestDAI is ERC20 {\\n    constructor() ERC20() {\\n        // initialize the token name and symbol\\n        _initializeToken(\\\"TestDAI\\\", \\\"TESTDAI\\\");\\n        _mint(msg.sender, 1000000000000000000000000000);\\n    }\\n}\",\"keccak256\":\"0x2f7b31fb4a01894b18feb0af3536266fe1a04fcd621fa760772ec3a2b641ecdb\",\"license\":\"MIT\"}},\"version\":1}",
      "storageLayout": {
        "storage": [
          {
            "astId": 282,
            "contract": "contracts/token/TestDAI.sol:TestDAI",
            "label": "_paused",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 7737,
            "contract": "contracts/token/TestDAI.sol:TestDAI",
            "label": "requireSellerApproval_",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 7741,
            "contract": "contracts/token/TestDAI.sol:TestDAI",
            "label": "_isApprovedSeller",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 7,
            "contract": "contracts/token/TestDAI.sol:TestDAI",
            "label": "_owner",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 1066,
            "contract": "contracts/token/TestDAI.sol:TestDAI",
            "label": "_controllers",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 129,
            "contract": "contracts/token/TestDAI.sol:TestDAI",
            "label": "_initialized",
            "offset": 0,
            "slot": "4",
            "type": "t_uint8"
          },
          {
            "astId": 132,
            "contract": "contracts/token/TestDAI.sol:TestDAI",
            "label": "_initializing",
            "offset": 1,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 6780,
            "contract": "contracts/token/TestDAI.sol:TestDAI",
            "label": "_cap",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 6784,
            "contract": "contracts/token/TestDAI.sol:TestDAI",
            "label": "_balances",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 6790,
            "contract": "contracts/token/TestDAI.sol:TestDAI",
            "label": "_allowances",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
          },
          {
            "astId": 6792,
            "contract": "contracts/token/TestDAI.sol:TestDAI",
            "label": "_totalSupply",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 6794,
            "contract": "contracts/token/TestDAI.sol:TestDAI",
            "label": "_name",
            "offset": 0,
            "slot": "9",
            "type": "t_string_storage"
          },
          {
            "astId": 6796,
            "contract": "contracts/token/TestDAI.sol:TestDAI",
            "label": "_symbol",
            "offset": 0,
            "slot": "10",
            "type": "t_string_storage"
          },
          {
            "astId": 6798,
            "contract": "contracts/token/TestDAI.sol:TestDAI",
            "label": "_allowMint",
            "offset": 0,
            "slot": "11",
            "type": "t_bool"
          },
          {
            "astId": 6800,
            "contract": "contracts/token/TestDAI.sol:TestDAI",
            "label": "_allowBurn",
            "offset": 1,
            "slot": "11",
            "type": "t_bool"
          }
        ],
        "types": {
          "t_address": {
            "encoding": "inplace",
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "encoding": "inplace",
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_bool)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => bool)",
            "numberOfBytes": "32",
            "value": "t_bool"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32",
            "value": "t_mapping(t_address,t_uint256)"
          },
          "t_mapping(t_address,t_uint256)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32",
            "value": "t_uint256"
          },
          "t_string_storage": {
            "encoding": "bytes",
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_uint256": {
            "encoding": "inplace",
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "encoding": "inplace",
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      },
      "userdoc": {
        "events": {
          "ControllerAdded(address,address)": {
            "notice": "emitted when a controller is added."
          },
          "ControllerRemoved(address,address)": {
            "notice": "emitted when a controller is removed."
          }
        },
        "kind": "user",
        "methods": {
          "requireSellerApproval()": {
            "notice": "return require seller approval flag"
          }
        },
        "version": 1
      },
      "solcInput": "{\n  \"language\": \"Solidity\",\n  \"sources\": {\n    \"contracts/access/Controllable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"../interfaces/IControllable.sol\\\";\\n\\nabstract contract Controllable is IControllable {\\n    mapping(address => bool) internal _controllers;\\n\\n    /**\\n     * @dev Throws if called by any account not in authorized list\\n     */\\n    modifier onlyController() virtual {\\n        require(\\n            _controllers[msg.sender] == true || address(this) == msg.sender,\\n            \\\"Controllable: caller is not a controller\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Add an address allowed to control this contract\\n     */\\n    function addController(address _controller)\\n        external\\n        override\\n        onlyController\\n    {\\n        _addController(_controller);\\n    }\\n    function _addController(address _controller) internal {\\n        _controllers[_controller] = true;\\n    }\\n\\n    /**\\n     * @dev Check if this address is a controller\\n     */\\n    function isController(address _address)\\n        external\\n        view\\n        override\\n        returns (bool allowed)\\n    {\\n        allowed = _isController(_address);\\n    }\\n    function _isController(address _address)\\n        internal view\\n        returns (bool allowed)\\n    {\\n        allowed = _controllers[_address];\\n    }\\n\\n    /**\\n     * @dev Remove the sender address from the list of controllers\\n     */\\n    function relinquishControl() external override onlyController {\\n        _relinquishControl();\\n    }\\n    function _relinquishControl() internal onlyController{\\n        delete _controllers[msg.sender];\\n    }\\n}\\n\"\n    },\n    \"contracts/interfaces/IControllable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n/// @notice a controllable contract interface. allows for controllers to perform privileged actions. controllera can other controllers and remove themselves.\\ninterface IControllable {\\n\\n    /// @notice emitted when a controller is added.\\n    event ControllerAdded(\\n        address indexed contractAddress,\\n        address indexed controllerAddress\\n    );\\n\\n    /// @notice emitted when a controller is removed.\\n    event ControllerRemoved(\\n        address indexed contractAddress,\\n        address indexed controllerAddress\\n    );\\n\\n    /// @notice adds a controller.\\n    /// @param controller the controller to add.\\n    function addController(address controller) external;\\n\\n    /// @notice removes a controller.\\n    /// @param controller the address to check\\n    /// @return true if the address is a controller\\n    function isController(address controller) external view returns (bool);\\n\\n    /// @notice remove ourselves from the list of controllers.\\n    function relinquishControl() external;\\n}\\n\"\n    },\n    \"contracts/token/ERC20/ERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0-rc.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC20.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"../../access/Controllable.sol\\\";\\n\\nimport \\\"./utils/ApprovedSellers.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, Pausable, ApprovedSellers, Ownable, Controllable, Initializable {\\n    uint256 private _cap;\\n\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    bool private _allowMint;\\n    bool private _allowBurn;\\n\\n    constructor() {\\n        _addController(msg.sender);\\n        _allowMint = true;\\n        _allowBurn = true;\\n    }\\n\\n    modifier onlyController() virtual override {\\n        require(\\n            _controllers[msg.sender] == true || address(this) == msg.sender || address(this) == owner(),\\n            \\\"caller is not a controller\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n        _relinquishControl();\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        require(_allowBurn, \\\"Burning is not allowed.\\\");\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        require(_allowBurn, \\\"Burning is not allowed.\\\");\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n\\n    /**\\n     * @dev set allow burn\\n     */\\n    function allowBurn() public view returns (bool) {\\n        return _allowBurn;\\n    }\\n\\n    /**\\n     * @dev set allow burn flag\\n     */\\n    function _setAllowBurn(bool allowBurn_) internal {\\n        _allowBurn = allowBurn_;\\n    }\\n\\n    /**\\n     * @dev set allow burn flag\\n     */\\n    function setAllowBurn(bool allowBurn_) public onlyController {\\n        _setAllowBurn(allowBurn_);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_mint}.\\n     */\\n    function mint(uint256 amount) public virtual onlyController {\\n        require(_allowMint, \\\"minting is not allowed.\\\");\\n        _mint(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_mint} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function mintTo(address account, uint256 amount) public virtual onlyController {\\n        require(_allowMint, \\\"minting is not allowed.\\\");\\n        _mint(account, amount);\\n    }\\n\\n    function allowMint() public view returns (bool) {\\n        return _allowMint;\\n    }\\n\\n    /**\\n     * @dev set allow mint flag\\n     */\\n    function _setAllowMint(bool allowMint_) internal {\\n        _allowMint = allowMint_;\\n    }\\n\\n    /**\\n     * @dev set allow mint flag\\n     */\\n    function setAllowMint(bool allowMint_) external onlyController {\\n        _setAllowMint(allowMint_);\\n    }\\n\\n    function _initializeToken(string memory name_, string memory symbol_) internal {\\n        require(bytes(_name).length == 0, \\\"ERC20 token name already set\\\");\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    function initialize(string memory name_, string memory symbol_) external initializer() {\\n        _initializeToken(name_, symbol_);\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() external view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() external view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n    \\n    /**\\n     * @dev Returns the cap on the token's total supply.\\n     */\\n    function cap() public view virtual returns (uint256) {\\n        return _cap;\\n    }\\n    function _setCap(uint256 cap_) internal virtual {\\n        _cap = cap_;\\n    }\\n    function setCap(uint256 cap_) external {\\n        require(_cap == 0, \\\"immutable\\\");\\n        _cap = cap_;\\n    }\\n\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approveTransfer(address owner, uint256 amount) public virtual onlyController returns (bool) {\\n        _approve(owner, owner, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        if(cap() > 0) require(ERC20.totalSupply() + amount <= cap(), \\\"ERC20Capped: cap exceeded\\\");\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address,\\n        uint256 amount\\n    ) internal virtual {\\n        require(!paused(), \\\"token transfer while paused\\\");\\n        if(from != address(0)) _spendAllowance(from, from, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address,\\n        address,\\n        uint256\\n    ) internal virtual {}\\n}\\n\"\n    },\n    \"contracts/interfaces/IERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0-rc.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Context.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/proxy/utils/Initializable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0-rc.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !Address.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/token/ERC20/utils/ApprovedSellers.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n/// @notice approved sellers. tracks approved sellers (people allowed to send the token)\\ncontract ApprovedSellers {\\n\\n  // generated when a approved seller is added\\n  event ApprovedSellerAdded(address indexed approvedSeller);\\n  // generated when a approved seller is removed\\n  event ApprovedSellerRemoved(address indexed approvedSeller);\\n  \\n  bool internal requireSellerApproval_;\\n  \\n  mapping(address => bool) internal _isApprovedSeller;\\n\\n  /// @notice add an approved seller\\n  function _setApprovedSeller(address seller, bool approveState) internal {\\n    _isApprovedSeller[seller] = approveState;\\n    if(approveState) emit ApprovedSellerAdded(seller);\\n    else emit ApprovedSellerRemoved(seller);\\n  }\\n  \\n  /// @notice check if an address is an approved seller\\n  function _approvedSeller(address seller) internal view returns (bool) {\\n    return _isApprovedSeller[seller];\\n  }\\n  function approvedSeller(address seller) public view returns (bool) {\\n    return _approvedSeller(seller);\\n  }\\n\\n  /// @notice return require seller approval flag\\n  function requireSellerApproval() public view returns (bool _requireSellerApproval) {\\n    _requireSellerApproval = requireSellerApproval_;\\n  }\\n\\n  function _setRequireSellerApproval(bool _requireSellerApproval) internal {\\n    requireSellerApproval_ = _requireSellerApproval;\\n  }\\n  \\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Address.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/token/TestDAI.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC20/ERC20.sol\\\";\\n\\ncontract TestDAI is ERC20 {\\n    constructor() ERC20() {\\n        // initialize the token name and symbol\\n        _initializeToken(\\\"TestDAI\\\", \\\"TESTDAI\\\");\\n        _mint(msg.sender, 1000000000000000000000000000);\\n    }\\n}\"\n    },\n    \"contracts/token/ERC20/utils/SafeERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../../interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/token/ERC20/utils/TokenTimelock.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/utils/TokenTimelock.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./SafeERC20.sol\\\";\\n\\n/**\\n * @dev A token holder contract that will allow a beneficiary to extract the\\n * tokens after a given release time.\\n *\\n * Useful for simple vesting schedules like \\\"advisors get all of their tokens\\n * after 1 year\\\".\\n */\\ncontract TokenTimelock {\\n    using SafeERC20 for IERC20;\\n\\n    // ERC20 basic token contract being held\\n    IERC20 private immutable _token;\\n\\n    // beneficiary of tokens after they are released\\n    address private immutable _beneficiary;\\n\\n    // timestamp when token release is enabled\\n    uint256 private immutable _releaseTime;\\n\\n    /**\\n     * @dev Deploys a timelock instance that is able to hold the token specified, and will only release it to\\n     * `beneficiary_` when {release} is invoked after `releaseTime_`. The release time is specified as a Unix timestamp\\n     * (in seconds).\\n     */\\n    constructor(\\n        IERC20 token_,\\n        address beneficiary_,\\n        uint256 releaseTime_\\n    ) {\\n        require(releaseTime_ > block.timestamp, \\\"TokenTimelock: release time is before current time\\\");\\n        _token = token_;\\n        _beneficiary = beneficiary_;\\n        _releaseTime = releaseTime_;\\n    }\\n\\n    /**\\n     * @dev Returns the token being held.\\n     */\\n    function token() public view virtual returns (IERC20) {\\n        return _token;\\n    }\\n\\n    /**\\n     * @dev Returns the beneficiary that will receive the tokens.\\n     */\\n    function beneficiary() public view virtual returns (address) {\\n        return _beneficiary;\\n    }\\n\\n    /**\\n     * @dev Returns the time when the tokens are released in seconds since Unix epoch (i.e. Unix timestamp).\\n     */\\n    function releaseTime() public view virtual returns (uint256) {\\n        return _releaseTime;\\n    }\\n\\n    /**\\n     * @dev Transfers tokens held by the timelock to the beneficiary. Will only succeed if invoked after the release\\n     * time.\\n     */\\n    function release() public virtual {\\n        require(block.timestamp >= releaseTime(), \\\"TokenTimelock: current time is before release time\\\");\\n\\n        uint256 amount = token().balanceOf(address(this));\\n        require(amount > 0, \\\"TokenTimelock: no tokens to release\\\");\\n\\n        token().safeTransfer(beneficiary(), amount);\\n    }\\n}\\n\"\n    },\n    \"contracts/facets/TokenMinterFacet.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"../interfaces/ITokenMinter.sol\\\";\\nimport \\\"../interfaces/IERC1155Mint.sol\\\";\\nimport \\\"../interfaces/IERC1155Burn.sol\\\";\\n\\nimport \\\"../diamond/LibAppStorage.sol\\\";\\nimport { LibDiamond } from \\\"../diamond/LibDiamond.sol\\\";\\n\\ninterface ITokenAttributeSetter {\\n    function setAttribute(\\n        uint256 _tokenId,\\n        string memory key,\\n        uint256 value\\n    ) external;\\n}\\n\\ncontract TokenMinterFacet {\\n\\n    // application storage\\n    AppStorage internal s;\\n\\n    event Token(address indexed receiver, uint256 indexed tokenId);\\n    event TokenBurn(address indexed target, uint256 indexed tokenId);\\n\\n    modifier onlyController {\\n        require(msg.sender == LibDiamond.contractOwner()  || msg.sender == address(this), \\\"only the contract owner can mint\\\");\\n        _;\\n    }\\n\\n    function setToken(address token) external onlyController {\\n        s.tokenMinterStorage.token = token;\\n    }\\n\\n}\\n\"\n    },\n    \"contracts/interfaces/ITokenMinter.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IERC1155Burn.sol\\\";\\n\\n/**\\n * @notice This intreface provides a way for users to register addresses as permissioned minters, mint * burn, unregister, and reload the permissioned minter account.\\n */\\ninterface ITokenMinter {\\n\\n    /// @notice a registration record for a permissioned minter.\\n    struct Minter {\\n\\n        // the account address of the permissioned minter.\\n        address account;\\n        // the amount of tokens minted by the permissioned minter.\\n        uint256 minted;\\n        // the amount of tokens minted by the permissioned minter.\\n        uint256 burned;\\n        // the amount of payment spent by the permissioned minter.\\n        uint256 spent;\\n        // an approval map for this minter. sets a count of tokens the approved can mint.\\n        // mapping(address => uint256) approved; // TODO implement this.\\n\\n    }\\n\\n    /// @notice event emitted when minter is registered\\n    event MinterRegistered(\\n        address indexed registrant,\\n        uint256 depositPaid\\n    );\\n\\n    /// @notice emoitted when minter is unregistered\\n    event MinterUnregistered(\\n        address indexed registrant,\\n        uint256 depositReturned\\n    );\\n\\n    /// @notice emitted when minter address is reloaded\\n    event MinterReloaded(\\n        address indexed registrant,\\n        uint256 amountDeposited\\n    );\\n\\n    /// @notice get the registration record for a permissioned minter.\\n    /// @param _minter the address\\n    /// @return _minterObj the address\\n    function minter(address _minter) external returns (Minter memory _minterObj);\\n\\n    /// @notice mint a token associated with a collection with an amount\\n    /// @param receiver the mint receiver\\n    /// @param collectionId the collection id\\n    /// @param amount the amount to mint\\n    function mint(address receiver, uint256 collectionId, uint256 id, uint256 amount) external;\\n\\n    /// @notice mint a token associated with a collection with an amount\\n    /// @param target the mint receiver\\n    /// @param id the collection id\\n    /// @param amount the amount to mint\\n    function burn(address target, uint256 id, uint256 amount) external;\\n\\n}\\n\"\n    },\n    \"contracts/interfaces/IERC1155Mint.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n/// implemented by erc1155 tokens to allow mminting\\ninterface IERC1155Mint {\\n\\n    /// @notice event emitted when tokens are minted\\n    event Minted(\\n        address target,\\n        uint256 tokenHash,\\n        uint256 amount\\n    );\\n\\n    /// @notice mint tokens of specified amount to the specified address\\n    /// @param recipient the mint target\\n    /// @param tokenHash the token hash to mint\\n    /// @param amount the amount to mint\\n    function mint(\\n        address recipient,\\n        uint256 tokenHash,\\n        uint256 amount,\\n        bytes memory data\\n    ) external;\\n\\n    function setMintAllowance(address receiver, uint256 tokenId, uint256 amount) external;\\n\\n}\\n\"\n    },\n    \"contracts/interfaces/IERC1155Burn.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n/// implemented by erc1155 tokens to allow burning\\ninterface IERC1155Burn {\\n\\n    /// @notice event emitted when tokens are burned\\n    event Burned(\\n        address target,\\n        uint256 tokenHash,\\n        uint256 amount\\n    );\\n\\n    /// @notice burn tokens of specified amount from the specified address\\n    /// @param target the burn target\\n    /// @param tokenHash the token hash to burn\\n    /// @param amount the amount to burn\\n    function burn(\\n        address target,\\n        uint256 tokenHash,\\n        uint256 amount\\n    ) external;\\n\\n\\n}\\n\"\n    },\n    \"contracts/diamond/LibAppStorage.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/UInt256Set.sol\\\";\\nimport \\\"../utils/AddressSet.sol\\\";\\n\\nimport \\\"../interfaces/IMarketplace.sol\\\";\\nimport \\\"../interfaces/ITokenMinter.sol\\\";\\nimport \\\"../interfaces/ITokenSale.sol\\\";\\nimport \\\"../interfaces/IForge.sol\\\";\\nimport \\\"../interfaces/IGemPool.sol\\\";\\nimport \\\"../interfaces/IClaim.sol\\\";\\nimport \\\"../interfaces/IRequirement.sol\\\";\\nimport \\\"../interfaces/IAirdropTokenSale.sol\\\";\\nimport \\\"../interfaces/IERC721A.sol\\\";\\n\\nimport {LibDiamond} from \\\"./LibDiamond.sol\\\";\\n\\n// merkle utils storage\\nstruct MerkleUtilsStorage {\\n    mapping(uint256 => uint256) tokenHashToIds;\\n}\\n\\n// token minter storage\\nstruct TokenMinterStorage {\\n    address token;\\n}\\n\\n// token sale storage\\nstruct TokenSaleStorage {\\n    mapping(address => ITokenSale.TokenSaleEntry) tokenSaleEntries;\\n}\\n\\nstruct AirdropTokenSaleStorage {\\n    uint256 tsnonce;\\n    mapping(uint256 => uint256) nonces;\\n    // token sale settings\\n    mapping(uint256 => IAirdropTokenSale.TokenSaleSettings) _tokenSales;\\n    // is token sale open\\n    mapping(uint256 => bool) tokenSaleOpen;\\n    // total purchased tokens per drop - 0 for public tokensale\\n    mapping(uint256 => mapping(address => uint256)) purchased;\\n    // total purchased tokens per drop - 0 for public tokensale\\n    mapping(uint256 => uint256) totalPurchased;\\n}\\n\\nstruct MerkleAirdropStorage {\\n    mapping (uint256 => IAirdrop.AirdropSettings) _settings;\\n    uint256 numSettings;\\n    mapping (uint256 => mapping(uint256 => uint256)) _redeemedData;\\n    mapping (uint256 => mapping(address => uint256)) _redeemedDataQuantities;\\n    mapping (uint256 => mapping(address => uint256)) _totalDataQuantities;\\n}\\n\\nstruct MarketUtilsStorage {\\n    mapping(uint256 => bool) validTokens;\\n}\\n\\nstruct AppStorage {\\n\\n    // merkle airdrop storage\\n    MerkleAirdropStorage merkleAirdropStorage;\\n   \\n    // airdrop token sale storage\\n    AirdropTokenSaleStorage airdropTokenSaleStorage;\\n\\n    // token minter storage\\n    TokenMinterStorage tokenMinterStorage;\\n}\\n\\nlibrary LibAppStorage {\\n    function diamondStorage() internal pure returns (AppStorage storage ds) {\\n        assembly {\\n            ds.slot := 0\\n        }\\n    }\\n}\\n\\ncontract Modifiers {\\n    AppStorage internal s;\\n    modifier onlyOwner() {\\n        require(LibDiamond.contractOwner() == msg.sender || address(this) == msg.sender, \\\"ERC1155: only the contract owner can call this function\\\");\\n        _;\\n    }\\n}\\n\"\n    },\n    \"contracts/diamond/LibDiamond.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\n/// @notice Defines the data structures that are used to store the data for a diamond\\nlibrary LibDiamond {\\n    // the diamond storage position\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    /// @notice Stores the function selectors located within the Diamond\\n    struct DiamondStorage {\\n        // maps function selectors to the facets that execute the functions.\\n        // and maps the selectors to their position in the selectorSlots array.\\n        // func selector => address facet, selector position\\n        mapping(bytes4 => bytes32) facets;\\n        // array of slots of function selectors.\\n        // each slot holds 8 function selectors.\\n        mapping(uint256 => bytes32) selectorSlots;\\n        // The number of function selectors in selectorSlots\\n        uint16 selectorCount;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    /// @notice Returns the storage position of the diamond\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    // event is generated when the diamond ownership is transferred\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice set the diamond contract owner\\n    /// @param _newOwner the new owner of the diamond\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    /// @notice returns the diamond contract owner\\n    /// @return contractOwner_ the diamond contract owner\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    /// @notice enforce contract ownership by requiring the caller to be the contract owner\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    bytes32 constant CLEAR_ADDRESS_MASK = bytes32(uint256(0xffffffffffffffffffffffff));\\n    bytes32 constant CLEAR_SELECTOR_MASK = bytes32(uint256(0xffffffff << 224));\\n\\n    // Internal function version of diamondCut\\n    // This code is almost the same as the external diamondCut,\\n    // except it is using 'Facet[] memory _diamondCut' instead of\\n    // 'Facet[] calldata _diamondCut'.\\n    // The code is duplicated to prevent copying calldata to memory which\\n    // causes an error for a two dimensional array.\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        uint256 originalSelectorCount = ds.selectorCount;\\n        uint256 selectorCount = originalSelectorCount;\\n        bytes32 selectorSlot;\\n        // Check if last selector slot is not full\\n        // \\\"selectorCount & 7\\\" is a gas efficient modulo by eight \\\"selectorCount % 8\\\"\\n        if (selectorCount & 7 > 0) {\\n            // get last selectorSlot\\n            // \\\"selectorSlot >> 3\\\" is a gas efficient division by 8 \\\"selectorSlot / 8\\\"\\n            selectorSlot = ds.selectorSlots[selectorCount >> 3];\\n        }\\n        // loop through diamond cut\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            (selectorCount, selectorSlot) = addReplaceRemoveFacetSelectors(\\n                selectorCount,\\n                selectorSlot,\\n                _diamondCut[facetIndex].facetAddress,\\n                _diamondCut[facetIndex].action,\\n                _diamondCut[facetIndex].functionSelectors\\n            );\\n        }\\n        if (selectorCount != originalSelectorCount) {\\n            ds.selectorCount = uint16(selectorCount);\\n        }\\n        // If last selector slot is not full\\n        // \\\"selectorCount & 7\\\" is a gas efficient modulo by eight \\\"selectorCount % 8\\\"\\n        if (selectorCount & 7 > 0) {\\n            // \\\"selectorSlot >> 3\\\" is a gas efficient division by 8 \\\"selectorSlot / 8\\\"\\n            ds.selectorSlots[selectorCount >> 3] = selectorSlot;\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    /// @notice add or replace facet selectors\\n    function addReplaceRemoveFacetSelectors(\\n        uint256 _selectorCount,\\n        bytes32 _selectorSlot,\\n        address _newFacetAddress,\\n        IDiamondCut.FacetCutAction _action,\\n        bytes4[] memory _selectors\\n    ) internal returns (uint256, bytes32) {\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_selectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        if (_action == IDiamondCut.FacetCutAction.Add) {\\n            enforceHasContractCode(_newFacetAddress, \\\"LibDiamondCut: Add facet has no code\\\");\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; selectorIndex++) {\\n                bytes4 selector = _selectors[selectorIndex];\\n                bytes32 oldFacet = ds.facets[selector];\\n                require(address(bytes20(oldFacet)) == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n                // add facet for selector\\n                ds.facets[selector] = bytes20(_newFacetAddress) | bytes32(_selectorCount);\\n                // \\\"_selectorCount & 7\\\" is a gas efficient modulo by eight \\\"_selectorCount % 8\\\"\\n                uint256 selectorInSlotPosition = (_selectorCount & 7) << 5;\\n                // clear selector position in slot and add selector\\n                _selectorSlot = (_selectorSlot & ~(CLEAR_SELECTOR_MASK >> selectorInSlotPosition)) | (bytes32(selector) >> selectorInSlotPosition);\\n                // if slot is full then write it to storage\\n                if (selectorInSlotPosition == 224) {\\n                    // \\\"_selectorSlot >> 3\\\" is a gas efficient division by 8 \\\"_selectorSlot / 8\\\"\\n                    ds.selectorSlots[_selectorCount >> 3] = _selectorSlot;\\n                    _selectorSlot = 0;\\n                }\\n                _selectorCount++;\\n            }\\n        } else if (_action == IDiamondCut.FacetCutAction.Replace) {\\n            enforceHasContractCode(_newFacetAddress, \\\"LibDiamondCut: Replace facet has no code\\\");\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; selectorIndex++) {\\n                bytes4 selector = _selectors[selectorIndex];\\n                bytes32 oldFacet = ds.facets[selector];\\n                address oldFacetAddress = address(bytes20(oldFacet));\\n                // only useful if immutable functions exist\\n                require(oldFacetAddress != address(this), \\\"LibDiamondCut: Can't replace immutable function\\\");\\n                require(oldFacetAddress != _newFacetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n                require(oldFacetAddress != address(0), \\\"LibDiamondCut: Can't replace function that doesn't exist\\\");\\n                // replace old facet address\\n                ds.facets[selector] = (oldFacet & CLEAR_ADDRESS_MASK) | bytes20(_newFacetAddress);\\n            }\\n        } else if (_action == IDiamondCut.FacetCutAction.Remove) {\\n            require(_newFacetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n            // \\\"_selectorCount >> 3\\\" is a gas efficient division by 8 \\\"_selectorCount / 8\\\"\\n            uint256 selectorSlotCount = _selectorCount >> 3;\\n            // \\\"_selectorCount & 7\\\" is a gas efficient modulo by eight \\\"_selectorCount % 8\\\"\\n            uint256 selectorInSlotIndex = _selectorCount & 7;\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; selectorIndex++) {\\n                if (_selectorSlot == 0) {\\n                    // get last selectorSlot\\n                    selectorSlotCount--;\\n                    _selectorSlot = ds.selectorSlots[selectorSlotCount];\\n                    selectorInSlotIndex = 7;\\n                } else {\\n                    selectorInSlotIndex--;\\n                }\\n                bytes4 lastSelector;\\n                uint256 oldSelectorsSlotCount;\\n                uint256 oldSelectorInSlotPosition;\\n                // adding a block here prevents stack too deep error\\n                {\\n                    bytes4 selector = _selectors[selectorIndex];\\n                    bytes32 oldFacet = ds.facets[selector];\\n                    require(address(bytes20(oldFacet)) != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n                    // only useful if immutable functions exist\\n                    require(address(bytes20(oldFacet)) != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n                    // replace selector with last selector in ds.facets\\n                    // gets the last selector\\n                    lastSelector = bytes4(_selectorSlot << (selectorInSlotIndex << 5));\\n                    if (lastSelector != selector) {\\n                        // update last selector slot position info\\n                        ds.facets[lastSelector] = (oldFacet & CLEAR_ADDRESS_MASK) | bytes20(ds.facets[lastSelector]);\\n                    }\\n                    delete ds.facets[selector];\\n                    uint256 oldSelectorCount = uint16(uint256(oldFacet));\\n                    // \\\"oldSelectorCount >> 3\\\" is a gas efficient division by 8 \\\"oldSelectorCount / 8\\\"\\n                    oldSelectorsSlotCount = oldSelectorCount >> 3;\\n                    // \\\"oldSelectorCount & 7\\\" is a gas efficient modulo by eight \\\"oldSelectorCount % 8\\\"\\n                    oldSelectorInSlotPosition = (oldSelectorCount & 7) << 5;\\n                }\\n                if (oldSelectorsSlotCount != selectorSlotCount) {\\n                    bytes32 oldSelectorSlot = ds.selectorSlots[oldSelectorsSlotCount];\\n                    // clears the selector we are deleting and puts the last selector in its place.\\n                    oldSelectorSlot =\\n                        (oldSelectorSlot & ~(CLEAR_SELECTOR_MASK >> oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n                    // update storage with the modified slot\\n                    ds.selectorSlots[oldSelectorsSlotCount] = oldSelectorSlot;\\n                } else {\\n                    // clears the selector we are deleting and puts the last selector in its place.\\n                    _selectorSlot =\\n                        (_selectorSlot & ~(CLEAR_SELECTOR_MASK >> oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n                }\\n                if (selectorInSlotIndex == 0) {\\n                    delete ds.selectorSlots[selectorSlotCount];\\n                    _selectorSlot = 0;\\n                }\\n            }\\n            _selectorCount = selectorSlotCount * 8 + selectorInSlotIndex;\\n        } else {\\n            revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n        }\\n        return (_selectorCount, _selectorSlot);\\n    }\\n\\n    /// @notice initialise the DiamondCut contract\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\"\n    },\n    \"contracts/utils/UInt256Set.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n * @notice Key sets with enumeration and delete. Uses mappings for random\\n * and existence checks and dynamic arrays for enumeration. Key uniqueness is enforced.\\n * @dev Sets are unordered. Delete operations reorder keys. All operations have a\\n * fixed gas cost at any scale, O(1).\\n * author: Rob Hitchens\\n */\\n\\nlibrary UInt256Set {\\n    struct Set {\\n        mapping(uint256 => uint256) keyPointers;\\n        uint256[] keyList;\\n    }\\n\\n    /**\\n     * @notice insert a key.\\n     * @dev duplicate keys are not permitted.\\n     * @param self storage pointer to a Set.\\n     * @param key value to insert.\\n     */\\n    function insert(Set storage self, uint256 key) public {\\n        require(\\n            !exists(self, key),\\n            \\\"UInt256Set: key already exists in the set.\\\"\\n        );\\n        self.keyList.push(key);\\n        self.keyPointers[key] = self.keyList.length - 1;\\n    }\\n\\n    /**\\n     * @notice remove a key.\\n     * @dev key to remove must exist.\\n     * @param self storage pointer to a Set.\\n     * @param key value to remove.\\n     */\\n    function remove(Set storage self, uint256 key) public {\\n        // TODO: I commented this out do get a test to pass - need to figure out what is up here\\n        // require(\\n        //     exists(self, key),\\n        //     \\\"UInt256Set: key does not exist in the set.\\\"\\n        // );\\n        if (!exists(self, key)) return;\\n        uint256 last = count(self) - 1;\\n        uint256 rowToReplace = self.keyPointers[key];\\n        if (rowToReplace != last) {\\n            uint256 keyToMove = self.keyList[last];\\n            self.keyPointers[keyToMove] = rowToReplace;\\n            self.keyList[rowToReplace] = keyToMove;\\n        }\\n        delete self.keyPointers[key];\\n        delete self.keyList[self.keyList.length - 1];\\n    }\\n\\n    /**\\n     * @notice count the keys.\\n     * @param self storage pointer to a Set.\\n     */\\n    function count(Set storage self) public view returns (uint256) {\\n        return (self.keyList.length);\\n    }\\n\\n    /**\\n     * @notice check if a key is in the Set.\\n     * @param self storage pointer to a Set.\\n     * @param key value to check.\\n     * @return bool true: Set member, false: not a Set member.\\n     */\\n    function exists(Set storage self, uint256 key)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        if (self.keyList.length == 0) return false;\\n        return self.keyList[self.keyPointers[key]] == key;\\n    }\\n\\n    /**\\n     * @notice fetch a key by row (enumerate).\\n     * @param self storage pointer to a Set.\\n     * @param index row to enumerate. Must be < count() - 1.\\n     */\\n    function keyAtIndex(Set storage self, uint256 index)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return self.keyList[index];\\n    }\\n}\\n\"\n    },\n    \"contracts/utils/AddressSet.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n * @notice Key sets with enumeration and delete. Uses mappings for random\\n * and existence checks and dynamic arrays for enumeration. Key uniqueness is enforced.\\n * @dev Sets are unordered. Delete operations reorder keys. All operations have a\\n * fixed gas cost at any scale, O(1).\\n * author: Rob Hitchens\\n */\\n\\nlibrary AddressSet {\\n    struct Set {\\n        mapping(address => uint256) keyPointers;\\n        address[] keyList;\\n    }\\n\\n    /**\\n     * @notice insert a key.\\n     * @dev duplicate keys are not permitted.\\n     * @param self storage pointer to a Set.\\n     * @param key value to insert.\\n     */\\n    function insert(Set storage self, address key) public {\\n        require(\\n            !exists(self, key),\\n            \\\"AddressSet: key already exists in the set.\\\"\\n        );\\n        self.keyList.push(key);\\n        self.keyPointers[key] = self.keyList.length - 1;\\n    }\\n\\n    /**\\n     * @notice remove a key.\\n     * @dev key to remove must exist.\\n     * @param self storage pointer to a Set.\\n     * @param key value to remove.\\n     */\\n    function remove(Set storage self, address key) public {\\n        // TODO: I commented this out do get a test to pass - need to figure out what is up here\\n        require(\\n            exists(self, key),\\n            \\\"AddressSet: key does not exist in the set.\\\"\\n        );\\n        if (!exists(self, key)) return;\\n        uint256 last = count(self) - 1;\\n        uint256 rowToReplace = self.keyPointers[key];\\n        if (rowToReplace != last) {\\n            address keyToMove = self.keyList[last];\\n            self.keyPointers[keyToMove] = rowToReplace;\\n            self.keyList[rowToReplace] = keyToMove;\\n        }\\n        delete self.keyPointers[key];\\n        self.keyList.pop();\\n    }\\n\\n    /**\\n     * @notice count the keys.\\n     * @param self storage pointer to a Set.\\n     */\\n    function count(Set storage self) public view returns (uint256) {\\n        return (self.keyList.length);\\n    }\\n\\n    /**\\n     * @notice check if a key is in the Set.\\n     * @param self storage pointer to a Set.\\n     * @param key value to check.\\n     * @return bool true: Set member, false: not a Set member.\\n     */\\n    function exists(Set storage self, address key)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        if (self.keyList.length == 0) return false;\\n        return self.keyList[self.keyPointers[key]] == key;\\n    }\\n\\n    /**\\n     * @notice fetch a key by row (enumerate).\\n     * @param self storage pointer to a Set.\\n     * @param index row to enumerate. Must be < count() - 1.\\n     */\\n    function keyAtIndex(Set storage self, uint256 index)\\n        public\\n        view\\n        returns (address)\\n    {\\n        return self.keyList[index];\\n    }\\n}\\n\"\n    },\n    \"contracts/interfaces/IMarketplace.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IMarketplace {\\n    event Bids(uint256 indexed itemId, address bidder, uint256 amount);\\n    event Sales(uint256 indexed itemId, address indexed owner, uint256 amount, uint256 quantity, uint256 indexed tokenId);\\n    event Closes(uint256 indexed itemId);\\n    event Listings(\\n        uint256 indexed itemId,\\n        address indexed nftContract,\\n        uint256 indexed tokenId,\\n        address seller,\\n        address receiver,\\n        address owner,\\n        uint256 price,\\n        bool sold\\n    );\\n    struct MarketItem {\\n        uint256 itemId;\\n        address nftContract;\\n        uint256 tokenId;\\n        address seller;\\n        address owner;\\n        uint256 price;\\n        uint256 quantity;\\n        bool sold;\\n        address receiver;\\n    }\\n}\\n\"\n    },\n    \"contracts/interfaces/ITokenSale.sol\": {\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\n///\\n/// @notice A token seller is a contract that can sell tokens to a token buyer.\\n/// The token buyer can buy tokens from the seller by paying a certain amount\\n/// of base currency to receive a certain amount of erc1155 tokens. the number\\n/// of tokens that can be bought is limited by the seller - the seller can\\n/// specify the maximum number of tokens that can be bought per transaction\\n/// and the maximum number of tokens that can be bought in total for a given\\n/// address. The seller can also specify the price of erc1155 tokens and how\\n/// that price increases per successful transaction.\\ninterface ITokenSale {\\n\\n    struct TokenSaleEntry {\\n        address payable receiver;\\n        address sourceToken;\\n        uint256 sourceTokenId;\\n        address token;\\n        uint256 quantity;\\n        uint256 price;\\n        uint256 quantitySold;\\n    }\\n\\n    event TokenSaleSet(address indexed token, uint256 indexed tokenId, uint256 price, uint256 quantity);\\n    event TokenSold(address indexed buyer, address indexed tokenAddress, uint256 indexed tokenId, uint256 salePrice);\\n    event TokensSet(address indexed tokenAddress, ITokenSale.TokenSaleEntry tokens);\\n\\n}\\n\"\n    },\n    \"contracts/interfaces/IForge.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"./ITokenDefinitions.sol\\\";\\nimport \\\"./IRequirement.sol\\\";\\n\\n// defines the forge. The forge contains items that can be minted in exchange for input items\\nstruct ForgeDefinition {\\n    // forge identifier\\n    uint256 forgeId;\\n    // forge symbol, name, description\\n    string name;\\n    string symbol;\\n    string description;\\n    // max number of forge operations\\n    uint256 maxForgeCount;\\n    // number of times this forge has been used\\n    uint256 forgedCount;\\n    // fee for each forge operation\\n    uint256 forgeFee;\\n}\\n\\n// defines a single requirement for a forge item\\nstruct ForgeItemRequirement {\\n    // the token address of the item\\n    address tokenAddress;\\n    // the token id of the item\\n    uint256 tokenId;\\n    // the amount of the item required\\n    uint256 amount;\\n}\\n\\n// defines each item that can be forged\\nstruct ForgeItemDefinition {\\n\\n    // item name, symbol, description\\n    string name;\\n    string symbol;\\n    string description;\\n\\n    // requirements for this item\\n    ForgeItemRequirement[] requirements;\\n\\n    // probability of this item being forged, if multiple items are possible, the probability is the sum of all probabilities\\n    uint256 probability;\\n    // number of times this item can be forged\\n    uint256 maxForgeCount;\\n    // number of times this item has been forged\\n    uint256 forgedCount;\\n    // fee to be paid for forging this item. overrides the forge fee of the forge if nonzero\\n    uint256 forgeFee;\\n    // token hash to mint for this item. if zero, then the token hash is autogenerated\\n    uint256 tokenHash;\\n}\\n\\n/// @notice a crafting matrix describes a set of items that can be crafted\\ninterface IForge {\\n\\n    /// @notice create a new forge\\n    /// @param name the name of the forge\\n    /// @param symbol the symbol of the forge\\n    /// @param description the description of the forge\\n    /// @param items the items that can be forged\\n    function createForge(string calldata name, string calldata symbol, string calldata description, ForgeItemDefinition[] calldata items) external;\\n\\n    /// @notice get the forge definition\\n    /// @param symbol the symbol of the forge\\n    function getForge(string calldata symbol) external view returns (ForgeDefinition memory);\\n\\n    // function _setForge(ForgeDefinition calldata forge) internal;\\n\\n    /// @notice get the list of forgeable items\\n    function forgeableItems() external view returns (ForgeItemDefinition[] memory);\\n\\n    /// @notice add a new forgeable item\\n    /// @param item the item to add\\n    /// @return the index of the item\\n    function addForgeableItem(ForgeItemDefinition calldata item) external returns (uint256);\\n\\n    /// @notice forge an item\\n    /// @param symbol the symbol of the forge\\n    /// @param inputItems the input items\\n    /// @return the forged item\\n    function forgeAnyItem(string calldata symbol, uint256[] calldata inputItems) external returns (ForgeItemDefinition memory);\\n\\n    /// @notice forge an item\\n    /// @param symbol the symbol of the forge\\n    /// @param index the index of the item to forge\\n    /// @param inputItems the input items\\n    /// @return the forged item\\n    function forgeItemAtIndex(string calldata symbol, uint256 index, uint256[] calldata inputItems) external returns (ForgeItemDefinition memory);\\n\\n    /// @notice get the hash of a forge\\n    /// @param symbol the symbol of the forge\\n    function getForgeHash(string calldata symbol) external view returns (uint256);\\n\\n    /// @notice get the forge by hash\\n    /// @param hash the hash of the forge\\n    function getForgeByHash(uint256 hash) external view returns (ForgeDefinition memory);\\n\\n    /// @notice ForgeCreated\\n    /// @param forge the forge that was created\\n    event ForgeCreated(ForgeDefinition forge);\\n\\n    /// @notice ForgeItemAdded\\n    /// @param item the item that was added\\n    event ForgeItemAdded(ForgeItemDefinition item);\\n\\n    /// @notice ItemForged\\n    /// @param receiver the receiver of the item\\n    /// @param item the item that was forged\\n    /// @param quantity the quantity of the item that was forged\\n    event ItemForged(address receiver, ForgeItemDefinition item, uint256 quantity);\\n\\n}\\n\"\n    },\n    \"contracts/interfaces/IGemPool.sol\": {\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\n\\nimport \\\"./IToken.sol\\\";\\nimport \\\"./ITokenPrice.sol\\\";\\n\\n/// @notice check the balance of earnings and collect earnings\\ninterface IGemPool {\\n\\n    /// @dev Event generated when a gem is created\\n    event GemPoolCreated(\\n\\n        // the gem pool account\\n        address creator,\\n\\n        // the gem pool account\\n        address contractAddress,\\n\\n        // the gem pool id\\n        uint256 pool,\\n\\n        // the gem token definition\\n        GemPoolSettings gemPoolDefinition\\n\\n    );\\n\\n    /// @dev Event generated when a gem is created\\n    event GemCreated(\\n\\n        // the gem pool account\\n        address account,\\n\\n        // the gem pool id\\n        uint256 pool,\\n\\n        // the gem hash\\n        uint256 gemHash,\\n\\n        // the gem token definition\\n        IToken.TokenDefinition tokenDefinition,\\n\\n        // the gem token quantity\\n        uint256 quantity\\n\\n    );\\n\\n    // mutable pool values\\n    struct GemPoolData {\\n\\n        // the gem pool id\\n        uint256 pool;\\n\\n        // nnext available gem hash\\n        uint256 nextGemHash;\\n\\n        // numbering for the next gem\\n        uint256 nextGemNumber;\\n\\n        // total number of gems minted\\n        uint256 gemsMintedCount;\\n\\n        // total amount of staked eth\\n        uint256 totalStakedEth;\\n\\n    }\\n\\n\\n    /// @notice staking pool settings - used to confignure a staking pool\\n    struct GemPoolSettings {\\n\\n        // the token address we mint on\\n        address token;\\n\\n        IToken.TokenSource tokenSource;\\n\\n        IToken.TokenDefinition tokenDefinition;\\n\\n        ITokenPrice.TokenPriceData initialPrice;\\n\\n        // is pool enabled\\n        bool enabled;\\n\\n        // is the pool visible\\n        bool visible;\\n\\n        // min and max token amounts to stake\\n        uint256 minTime;\\n\\n        // max time that the claim can be made\\n        uint256 maxTime;\\n\\n        // the difficulty step adjustment (or increase amount if PriceModifier is Static)\\n        uint256 diffstep;\\n\\n        // max total number of claims that can be made\\n        uint256 maxClaims;\\n\\n        // max quantity per claim\\n        uint256 maxQuantityPerClaim;\\n\\n        // max claims per account\\n        uint256 maxClaimsPerAccount;\\n\\n        // earn rate for this staking pool\\n        uint256 earnRatePerPeriod;\\n\\n        // the number of blocks per earning period\\n        uint256 earnPeriodBlocks;\\n\\n        // payout partial blocks\\n        bool payPartialBlocks;\\n\\n        // mint the earned token\\n        bool mintEarnedToken;\\n\\n        // max total earned amount per stake\\n        uint256 maxTotalEarnedAmount;\\n\\n        // allow outright purchases of gems\\n        bool allowPurchase;\\n\\n    }\\n\\n    struct GemPoolStruct {\\n\\n        GemPoolSettings _gemPoolSettings;\\n        GemPoolData _gemPoolData;\\n\\n    }\\n\\n    /// @notice get the hash of a gem pool\\n    function gemPoolHash(string memory symbol) external view returns (uint256 _gemPoolHash);\\n    /// @notice is token a member of the gem pool\\n    function isMemberOfPool(uint256 gemPoolId, uint256 token) external view returns (bool _isMember);\\n    /// @notice get the member gems of this pool\\n    function poolMembers(uint256 gemPoolId) external view returns (uint256[] memory _poolMembers);\\n    /// get the gem pool symbols in the contract\\n    function symbols() external view returns (string[] memory _symbols);\\n\\n}\\n\"\n    },\n    \"contracts/interfaces/IClaim.sol\": {\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\n\\n/// @notice interface for a collection of tokens. lists members of collection, allows for querying of collection members, and for minting and burning of tokens.\\ninterface IClaim {\\n\\n\\n    /// @notice represents a claim on some deposit.\\n    struct Claim {\\n\\n        // claim id.\\n        uint256 id;\\n\\n        // pool id\\n        uint256 poolId;\\n\\n        // the creator of this claim\\n        address creator;\\n\\n        // the minter of this claim. This is the contract that minted the item, not the account that created the claim.\\n        address minter;\\n\\n        // the amount of eth deposited\\n        uint256 depositAmount;\\n\\n        // the type of deposit made. 0 for ETH or an ERC20 token\\n        address depositToken;\\n\\n        // the gem quantity to mint to the user upon maturity\\n        uint256 mintQuantity;\\n\\n        // the deposit length of time, in seconds\\n        uint256 depositLength;\\n\\n        // the block number when this record was created.\\n        uint256 createdTime;\\n\\n        // the block number when this record was created.\\n        uint256 createdBlock;\\n\\n        // block number when the claim was submitted or 0 if unclaimed\\n        uint256 claimedBlock;\\n\\n        // gem hash of minted gem(s) or 0 if no gem minted\\n        uint256 gemHash;\\n\\n        // the fee that was paid\\n        uint256 feePaid;\\n    }\\n\\n    /// @notice a set of requirements. used for random access\\n    struct ClaimSet {\\n\\n        mapping(uint256 => uint256) keyPointers;\\n        uint256[] keyList;\\n        Claim[] valueList;\\n\\n    }\\n\\n    struct ClaimSettings {\\n\\n        ClaimSet claims;\\n\\n        // the total staked for each token type (0 for ETH)\\n        mapping(address => uint256) stakedTotal;\\n\\n    }\\n\\n\\n    /// @notice emitted when a token is added to the collection\\n    event ClaimCreated(\\n        address indexed user,\\n        address indexed minter,\\n        Claim claim\\n    );\\n\\n    /// @notice emitted when a token is removed from the collection\\n    event ClaimRedeemed (\\n        address indexed user,\\n        address indexed minter,\\n        Claim claim\\n    );\\n\\n    /// @notice create a claim\\n    /// @param _claim the claim to create\\n    /// @return _claimHash the claim hash\\n    function createClaim(Claim memory _claim) external payable returns (Claim memory _claimHash);\\n\\n    /// @notice submit claim for collection\\n    /// @param claimHash the id of the claim\\n    function collectClaim(uint256 claimHash, bool requireMature) external;\\n\\n    /// @notice return the next claim hash\\n    /// @return _nextHash the next claim hash\\n    function nextClaimHash() external view returns (uint256 _nextHash);\\n\\n    /// @notice get all the claims\\n    /// @return _claims all the claims\\n    function claims() external view returns (Claim[] memory _claims);\\n\\n}\\n\"\n    },\n    \"contracts/interfaces/IRequirement.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IToken.sol\\\";\\nimport \\\"../utils/UInt256Set.sol\\\";\\n\\n/// @notice describes a list of requirements which will be checked against when someone performs an action\\ninterface IRequirement is IToken {\\n\\n    /// @notice an input requirement\\n    struct Requirement {\\n\\n        // the minter that this requirement aplpies to.\\n        address minter;\\n        // the token source to match for this requirement. Other a collection or a single token id\\n        TokenSource source;\\n        // the quantity of tokens to match for this requirement. must have at least this many tokens\\n        uint256 quantity;\\n        // whether or not to take custody of the tokens if the requirement is met\\n        bool takeCustody;\\n        // whether or not to burn the tokens if the requirement is met\\n        bool burn;\\n        // whether or not to require the exact amount of tokens to match for this requirement\\n        bool requireExactAmount;\\n\\n    }\\n\\n    // data for requirements\\n    struct RequirementData {\\n\\n        address token;\\n        address manager;\\n\\n        mapping(uint256 => Requirement[]) requirements;\\n        mapping(uint256 => TokenSet) tokens;\\n\\n        UInt256Set.Set burnedTokenIds;\\n        mapping(uint256 => uint256) burnedTokenQuantities;\\n\\n    }\\n\\n    struct RequirementSettings {\\n        RequirementData data;\\n    }\\n\\n    /// @notice get all requirements\\n    /// @return _reqs a set of requirements\\n    function requirements(uint256 collectionId) external view returns (Requirement[] memory _reqs);\\n\\n    /// @notice returns whether the specified account meets the requirement at the specified quantity factor\\n    /// @param account the minter to check\\n    /// @param req the requirement list to check\\n    /// @param quantity the quantity factor to check\\n    /// @return _tokens whether the account meets the requirements\\n    function fulfillingTokens(address account, Requirement memory req, uint256 quantity) external view returns (Token[] memory _tokens);\\n\\n    /// @notice returns whether the specified account meets the requirements at the specified quantity factor\\n    /// @param account the minter to check\\n    /// @param collectionId the requirement list to check\\n    /// @param quantity the quantity factor to check\\n    /// @return _meetsRequirements whether the account meets the requirements\\n    function meetsRequirements(address account, uint256 collectionId, uint256 quantity) external view returns (bool _meetsRequirements);\\n\\n    function custodyRequirements(\\n        uint256 transferId,\\n        address from,\\n        address token,\\n        Requirement[] memory reqs,\\n        uint256 quantity) external returns(Token[] memory _transferredTokens);\\n\\n    function releaseRequirements(\\n        uint256 transferId,\\n        address token,\\n        address to) external;\\n}\\n\"\n    },\n    \"contracts/interfaces/IAirdropTokenSale.sol\": {\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ITokenPrice.sol\\\";\\nimport \\\"./IAirdrop.sol\\\";\\n\\n/// @notice A token seller is a contract that can sell tokens to a token buyer.\\n/// The token buyer can buy tokens from the seller by paying a certain amount\\n/// of base currency to receive a certain amount of erc1155 tokens. the number\\n/// of tokens that can be bought is limited by the seller - the seller can\\n/// specify the maximum number of tokens that can be bought per transaction\\n/// and the maximum number of tokens that can be bought in total for a given\\n/// address. The seller can also specify the price of erc1155 tokens and how\\n/// that price increases per successful transaction.\\ninterface IAirdropTokenSale {\\n\\n\\n    enum PaymentType {\\n        ETH,\\n        TOKEN\\n    }\\n\\n    /// @notice the settings for the token sale,\\n    struct TokenSaleSettings {\\n\\n        // addresses\\n        address contractAddress; // the contract doing the selling\\n        address token; // the token being sold\\n        uint256 tokenHash; // the token hash being sold. set to 0 to autocreate hash\\n        uint256 collectionHash; // the collection hash being sold. set to 0 to autocreate hash\\n        // owner and payee\\n        address owner; // the owner of the contract\\n        address payee; // the payee of the contract\\n\\n        string symbol; // the symbol of the token\\n        string name; // the name of the token\\n        string description; // the description of the token\\n\\n        // open state\\n        bool openState; // open or closed\\n        uint256 startTime; // block number when the sale starts\\n        uint256 endTime; // block number when the sale ends\\n\\n        // quantities\\n        uint256 maxQuantity; // max number of tokens that can be sold\\n        uint256 maxQuantityPerSale; // max number of tokens that can be sold per sale\\n        uint256 minQuantityPerSale; // min number of tokens that can be sold per sale\\n        uint256 maxQuantityPerAccount; // max number of tokens that can be sold per account\\n\\n        // inital price of the token sale\\n        ITokenPrice.TokenPriceData initialPrice;\\n\\n        PaymentType paymentType; // the type of payment that is being used\\n        address tokenAddress; // the address of the payment token, if payment type is TOKEN\\n\\n    }\\n\\n    /// @notice emitted when a token is opened\\n    event TokenSaleOpen (uint256 tokenSaleId, TokenSaleSettings tokenSale );\\n\\n    /// @notice emitted when a token is opened\\n    event TokenSaleClosed (uint256 tokenSaleId, TokenSaleSettings tokenSale );\\n\\n    /// @notice emitted when a token is opened\\n    event TokenPurchased (uint256 tokenSaleId, address indexed purchaser, uint256 tokenId, uint256 quantity );\\n\\n    // token settings were updated\\n    event TokenSaleSettingsUpdated (uint256 tokenSaleId, TokenSaleSettings tokenSale );\\n\\n    /// @notice Get the token sale settings\\n    /// @return settings the token sale settings\\n    function getTokenSaleSettings(uint256 tokenSaleId) external view returns (TokenSaleSettings memory settings);\\n\\n    /// @notice Updates the token sale settings\\n    /// @param settings - the token sake settings\\n    function updateTokenSaleSettings(uint256 iTokenSaleId, TokenSaleSettings memory settings) external;\\n\\n    function initTokenSale(\\n        TokenSaleSettings memory tokenSaleInit,\\n        IAirdrop.AirdropSettings[] calldata settingsList\\n    ) external;\\n}\\n\"\n    },\n    \"contracts/interfaces/IERC721A.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721A {\\n\\n    // Compiler will pack this into a single 256bit word.\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Keeps track of the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n    }\\n\\n    // Compiler will pack this into a single 256bit word.\\n    struct AddressData {\\n        // Realistically, 2**64-1 is more than enough.\\n        uint64 balance;\\n        // Keeps track of mint count with minimal overhead for tokenomics.\\n        uint64 numberMinted;\\n        // Keeps track of burn count with minimal overhead for tokenomics.\\n        uint64 numberBurned;\\n        // For miscellaneous variable(s) pertaining to the address\\n        // (e.g. number of whitelist mint slots used).\\n        // If there are multiple variables, please pack them into a uint64.\\n        uint64 aux;\\n    }\\n\\n}\\n\"\n    },\n    \"contracts/interfaces/ITokenDefinitions.sol\": {\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IToken.sol\\\";\\n\\n///\\n/// @notice a list of token definitions\\n///\\ninterface ITokenDefinitions {\\n\\n    struct TokenDefinitionsSettings {\\n\\n        IToken.TokenDefinition[] tokenDefinitions;\\n\\n    }\\n\\n    /// @notice emitted when a lootbox is created\\n    event TokenDefinitionsCreated(\\n        address indexed creator,\\n        address indexed contractAddress,\\n        IToken.TokenDefinition[] definitions\\n    );\\n\\n    /// @notice emitted when a lootbox is created\\n    event TokenDefinitionAdded(\\n        address indexed creator,\\n        address indexed contractAddress,\\n        IToken.TokenDefinition definitions\\n    );\\n\\n    /// @notice a set of tokens.\\n    struct TokenDefinitionSet {\\n\\n        mapping(uint256 => uint256) keyPointers;\\n        uint256[] keyList;\\n        IToken.TokenDefinition[] valueList;\\n\\n    }\\n\\n    function tokenDefinitions() external view returns (IToken.TokenDefinition[] memory);\\n    function makeHash(IToken.TokenDefinition memory _definition) external view returns (uint256);\\n}\\n\"\n    },\n    \"contracts/interfaces/IToken.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n\\n/// @notice common struct definitions for tokens\\ninterface IToken {\\n\\n\\n    enum TokenType {\\n        ERC20,\\n        ERC721,\\n        ERC1155\\n    }\\n\\n    struct Token {\\n\\n        uint256 id;\\n        uint256 balance;\\n        bool burn;\\n\\n    }\\n\\n    /// @notice a set of tokens.\\n    struct TokenSet {\\n\\n        mapping(uint256 => uint256) keyPointers;\\n        uint256[] keyList;\\n        Token[] valueList;\\n\\n    }\\n\\n    /// @notice the definition for a token.\\n    struct TokenDefinition {\\n\\n        // the host multitoken\\n        address token;\\n\\n        // the id of the token definition. if static mint then also token hash\\n        uint256 id;\\n\\n        // the category name\\n        uint256 collectionId;\\n\\n        // the name of the token\\n        string name;\\n\\n        // the symbol of the token\\n        string symbol;\\n\\n        // the description of the token\\n        string description;\\n\\n        // the decimals of the token. 0 for NFT\\n        uint8 decimals;\\n\\n        // the total supply of the token\\n        uint256 totalSupply;\\n\\n        // whether to generate the id or not for new tokens. if false then we use id field of the definition to mint tokens\\n        bool generateId;\\n\\n        // probability of the item being awarded\\n        uint256 probability;\\n\\n         // the index of the probability in its array\\n        uint256 probabilityIndex;\\n\\n         // the index of the probability in its array\\n        uint256 probabilityRoll;\\n\\n    }\\n\\n    struct TokenRecord {\\n\\n        uint256 id;\\n        address owner;\\n        address minter;\\n        uint256 _type;\\n        uint256 balance;\\n\\n    }\\n\\n    /// @notice the token source type. Either a static source or a collection.\\n    enum TokenSourceType {\\n\\n        Static,\\n        Collection\\n\\n    }\\n\\n    /// @notice the token source. Specifies the source of the token - either a static source or a collection.\\n    struct TokenSource {\\n\\n        // the token source type\\n        TokenSourceType _type;\\n        // the source id if a static collection\\n        uint256 staticSourceId;\\n        // the collection source address if collection\\n        address collectionSourceAddress;\\n\\n    }\\n}\\n\"\n    },\n    \"contracts/interfaces/ITokenPrice.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n\\n/// @notice common struct definitions for tokens\\ninterface ITokenPrice {\\n\\n    /// @notice DIctates how the price of the token is increased post every sale\\n    enum PriceModifier {\\n\\n        None,\\n        Fixed,\\n        Exponential,\\n        InverseLog\\n\\n    }\\n\\n    /// @notice a token price and how it changes\\n    struct TokenPriceData {\\n\\n        // the price of the token\\n        uint256 price;\\n         // how the price is modified\\n        PriceModifier priceModifier;\\n        // only used if priceModifier is EXPONENTIAL or INVERSELOG or FIXED\\n        uint256 priceModifierFactor;\\n        // max price for the token\\n        uint256 maxPrice;\\n\\n    }\\n\\n    /// @notice get the increased price of the token\\n    function getIncreasedPrice() external view returns (uint256);\\n\\n    /// @notice get the increased price of the token\\n    function getTokenPrice() external view returns (TokenPriceData memory);\\n\\n\\n}\\n\"\n    },\n    \"contracts/interfaces/IAirdrop.sol\": {\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IToken.sol\\\";\\nimport \\\"./ITokenPrice.sol\\\";\\nimport \\\"./IAirdropTokenSale.sol\\\";\\n\\ninterface IMerkleAirdrop {\\n    function airdropRedeemed(\\n        uint256 drop,\\n        address recipient,\\n        uint256 amount\\n    ) external;\\n     function initMerkleAirdrops(IAirdrop.AirdropSettings[] calldata settingsList) external;\\n     function airdrop(uint256 drop) external view returns (IAirdrop.AirdropSettings memory settings);\\n     function airdropRedeemed(uint256 drop, address recipient) external view returns (bool isRedeemed);\\n}\\n\\n/// @notice an airdrop airdrops tokens\\ninterface IAirdrop {\\n\\n    // emitted when airdrop is redeemed\\n\\n\\n    /// @notice the settings for the token sale,\\n    struct AirdropSettings {\\n        // sell from the whitelist only\\n        bool whitelistOnly;\\n\\n        // this whitelist id - by convention is the whitelist hash\\n        uint256 whitelistId;\\n\\n        // the root hash of the merkle tree\\n        bytes32 whitelistHash;\\n\\n        // quantities\\n        uint256 maxQuantity; // max number of tokens that can be sold\\n        uint256 maxQuantityPerSale; // max number of tokens that can be sold per sale\\n        uint256 minQuantityPerSale; // min number of tokens that can be sold per sale\\n        uint256 maxQuantityPerAccount; // max number of tokens that can be sold per account\\n\\n        // quantity of item sold\\n        uint256 quantitySold;\\n\\n        // start timne and end time for token sale\\n        uint256 startTime; // block number when the sale starts\\n        uint256 endTime; // block number when the sale ends\\n\\n        // inital price of the token sale\\n        ITokenPrice.TokenPriceData initialPrice;\\n\\n        // token hash\\n        uint256 tokenHash;\\n\\n        IAirdropTokenSale.PaymentType paymentType; // the type of payment that is being used\\n        address tokenAddress; // the address of the payment token, if payment type is TOKEN\\n    }\\n\\n    // emitted when airdrop is launched\\n    event AirdropLaunched(uint256 indexed airdropId, AirdropSettings airdrop);\\n\\n    // emitted when airdrop is redeemed\\n    event AirdropRedeemed(uint256 indexed airdropId, address indexed beneficiary, uint256 indexed tokenHash, bytes32[] proof, uint256 amount);\\n\\n    /// @notice airdrops check to see if proof is redeemed\\n    /// @param drop the id of the airdrop\\n    /// @param recipient the merkle proof\\n    /// @return isRedeemed the amount of tokens redeemed\\n    function airdropRedeemed(uint256 drop, address recipient) external view returns (bool isRedeemed);\\n\\n    /// @notice redeem tokens for airdrop\\n    /// @param drop the airdrop id\\n    /// @param leaf the index of the token in the airdrop\\n    /// @param recipient the beneficiary of the tokens\\n    /// @param amount tje amount of tokens to redeem\\n    /// @param merkleProof the merkle proof of the token\\n    function redeemAirdrop(uint256 drop, uint256 leaf, address recipient, uint256 amount, uint256 total, bytes32[] memory merkleProof) external payable;\\n\\n    /// @notice Get the token sale settings\\n    /// @return settings the token sale settings\\n    function airdrop(uint256 drop) external view returns (AirdropSettings memory settings);\\n\\n}\\n\"\n    },\n    \"contracts/interfaces/IDiamondCut.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\"\n    },\n    \"contracts/diamond/OwnershipFacet.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { LibDiamond } from \\\"./LibDiamond.sol\\\";\\nimport { IERC173 } from \\\"../interfaces/IERC173.sol\\\";\\n\\n/// @notice Allows the diamond to transfer ownership of the diamond to another address\\ncontract OwnershipFacet is IERC173 {\\n\\n    /// @notice transfer the ownership of the diamond to another address\\n    /// @param _newOwner the new owner of the diamond\\n    function transferOwnership(address _newOwner) external override {\\n        LibDiamond.enforceIsContractOwner();\\n        LibDiamond.setContractOwner(_newOwner);\\n    }\\n\\n    /// @notice renounce the ownership of the diamond\\n    function renounceOwnership() external {\\n        LibDiamond.enforceIsContractOwner();\\n        LibDiamond.setContractOwner(address(0));\\n    }\\n    \\n    /// @notice get the owner of the diamond contract\\n    /// @return owner_ address of the new owner\\n    function owner() external override view returns (address owner_) {\\n        owner_ = LibDiamond.contractOwner();\\n    }\\n\\n}\\n\"\n    },\n    \"contracts/interfaces/IERC173.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n///  Note: the ERC-165 identifier for this interface is 0x7f5828d0\\n/* is ERC165 */\\ninterface IERC173 {\\n    /// @dev This emits when ownership of a contract changes.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Get the address of the owner\\n    /// @return owner_ The address of the owner.\\n    function owner() external view returns (address owner_);\\n\\n    /// @notice Set the address of the new owner of the contract\\n    /// @dev Set _newOwner to address(0) to renounce any ownership.\\n    /// @param _newOwner The address of the new owner of the contract\\n    function transferOwnership(address _newOwner) external;\\n}\\n\"\n    },\n    \"contracts/diamond/DiamondInit.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n*\\n* Implementation of a diamond.\\n/******************************************************************************/\\n\\nimport {LibDiamond} from \\\".//LibDiamond.sol\\\";\\nimport { IDiamondLoupe } from \\\"../interfaces/IDiamondLoupe.sol\\\";\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\nimport { IERC173 } from \\\"../interfaces/IERC173.sol\\\";\\nimport { IERC165 } from \\\"../interfaces/IERC165.sol\\\";\\nimport { IERC2981 } from \\\"../interfaces/IERC2981.sol\\\";\\n\\nimport { IERC1155 } from \\\"@openzeppelin/contracts/interfaces/IERC1155.sol\\\";\\nimport { IERC1155MetadataURI } from \\\"@openzeppelin/contracts/interfaces/IERC1155MetadataURI.sol\\\";\\nimport { IERC1155Receiver } from \\\"@openzeppelin/contracts/interfaces/IERC1155Receiver.sol\\\";\\n\\n// It is exapected that this contract is customized if you want to deploy your diamond\\n// with data from a deployment script. Use the init function to initialize state variables\\n// of your diamond. Add parameters to the init funciton if you need to.\\n\\ncontract DiamondInit {\\n    // You can add parameters to this function in order to pass in\\n\\n    bytes4 internal constant _INTERFACE_ID_ERC2981 = 0x2a55205a;\\n\\n    // data to set your own state variables\\n    function init() external {\\n        // adding ERC165 data\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\n        ds.supportedInterfaces[type(IERC165).interfaceId] = true;\\n        ds.supportedInterfaces[type(IDiamondCut).interfaceId] = true;\\n        ds.supportedInterfaces[type(IDiamondLoupe).interfaceId] = true;\\n        ds.supportedInterfaces[type(IERC173).interfaceId] = true;\\n        ds.supportedInterfaces[type(IERC1155Receiver).interfaceId] = true;\\n        // add your own state variables\\n        // EIP-2535 specifies that the `diamondCut` function takes two optional\\n        // arguments: address _init and bytes calldata _calldata\\n        // These arguments are used to execute an arbitrary function using delegatecall\\n        // in order to set state variables in the diamond during deployment or an upgrade\\n        // More info here: https://eips.ethereum.org/EIPS/eip-2535#diamond-interface\\n    }\\n\\n\\n}\\n\"\n    },\n    \"contracts/interfaces/IDiamondLoupe.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\n// A loupe is a small magnifying glass used to look at diamonds.\\n// These functions look at diamonds\\ninterface IDiamondLoupe {\\n    /// These functions are expected to be called frequently\\n    /// by tools.\\n\\n    struct Facet {\\n        address facetAddress;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Gets all facet addresses and their four byte function selectors.\\n    /// @return facets_ Facet\\n    function facets() external view returns (Facet[] memory facets_);\\n\\n    /// @notice Gets all the function selectors supported by a specific facet.\\n    /// @param _facet The facet address.\\n    /// @return facetFunctionSelectors_\\n    function facetFunctionSelectors(address _facet) external view returns (bytes4[] memory facetFunctionSelectors_);\\n\\n    /// @notice Get all the facet addresses used by a diamond.\\n    /// @return facetAddresses_\\n    function facetAddresses() external view returns (address[] memory facetAddresses_);\\n\\n    /// @notice Gets the facet that supports the given selector.\\n    /// @dev If facet is not found return address(0).\\n    /// @param _functionSelector The function selector.\\n    /// @return facetAddress_ The facet address.\\n    function facetAddress(bytes4 _functionSelector) external view returns (address facetAddress_);\\n}\\n\"\n    },\n    \"contracts/interfaces/IERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\"\n    },\n    \"contracts/interfaces/IERC2981.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n/// @dev Interface for the NFT Royalty Standard\\n///\\ninterface IERC2981 {\\n    /// @notice Called with the sale price to determine how much royalty\\n    //          is owed and to whom.\\n    /// @param _tokenId - the NFT asset queried for royalty information\\n    /// @param _salePrice - the sale price of the NFT asset specified by _tokenId\\n    /// @return receiver - address of who should be sent the royalty payment\\n    /// @return royaltyAmount - the royalty payment amount for _salePrice\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/interfaces/IERC1155.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC1155/IERC1155.sol\\\";\\n\"\n    },\n    \"@openzeppelin/contracts/interfaces/IERC1155MetadataURI.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC1155/extensions/IERC1155MetadataURI.sol\\\";\\n\"\n    },\n    \"@openzeppelin/contracts/interfaces/IERC1155Receiver.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC1155/IERC1155Receiver.sol\\\";\\n\"\n    },\n    \"contracts/utils/introspection/IERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/interfaces/IERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\"\n    },\n    \"contracts/interfaces/IERC2981Holder.sol\": {\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC165.sol\\\";\\n\\n///\\n/// @dev interface for a holder (owner) of an ERC2981-enabled token\\n/// @dev to modify the fee amount as well as transfer ownership of\\n/// @dev royalty to someone else.\\n///\\ninterface IERC2981Holder {\\n\\n    /// @dev emitted when the roalty has changed\\n    event RoyaltyFeeChanged(\\n        address indexed operator,\\n        uint256 indexed _id,\\n        uint256 _fee\\n    );\\n\\n    /// @dev emitted when the roalty ownership has been transferred\\n    event RoyaltyOwnershipTransferred(\\n        uint256 indexed _id,\\n        address indexed oldOwner,\\n        address indexed newOwner\\n    );\\n\\n    /// @notice set the fee amount for the fee id\\n    /// @param _id  the fee id\\n    /// @param _fee the fee amount\\n    function setFee(uint256 _id, uint256 _fee) external;\\n\\n    /// @notice get the fee amount for the fee id\\n    /// @param _id  the fee id\\n    /// @return the fee amount\\n    function getFee(uint256 _id) external returns (uint256);\\n\\n    /// @notice get the owner address of the royalty\\n    /// @param _id  the fee id\\n    /// @return the owner address\\n    function royaltyOwner(uint256 _id) external returns (address);\\n\\n\\n    /// @notice transfer ownership of the royalty to someone else\\n    /// @param _id  the fee id\\n    /// @param _newOwner  the new owner address\\n    function transferOwnership(uint256 _id, address _newOwner) external;\\n\\n}\\n\"\n    },\n    \"contracts/utils/InterfaceChecker.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IERC165 } from \\\"@openzeppelin/contracts/interfaces/IERC165.sol\\\";\\nimport { IERC1155 } from \\\"@openzeppelin/contracts/interfaces/IERC1155.sol\\\";\\nimport { IERC721 } from \\\"@openzeppelin/contracts/interfaces/IERC721.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\nlibrary InterfaceChecker {\\n    function isERC1155(address check) external view returns(bool) {\\n        return IERC165(check).supportsInterface(type(IERC1155).interfaceId);\\n    }\\n    function isERC721(address check) external view returns(bool) {\\n        return IERC165(check).supportsInterface(type(IERC721).interfaceId);\\n    }\\n    function isERC20(address check) external view returns(bool) {\\n        return IERC165(check).supportsInterface(type(IERC20).interfaceId);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/interfaces/IERC721.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\"\n    },\n    \"@openzeppelin/contracts/interfaces/IERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0-rc.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0-rc.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\n    },\n    \"contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\n    },\n    \"contracts/facets/WithdrawalFacet.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"../interfaces/IWithdrawable.sol\\\";\\nimport \\\"../utils/InterfaceChecker.sol\\\";\\n\\nimport \\\"../diamond/LibAppStorage.sol\\\";\\n\\n/// @notice the manager of fees\\ncontract WithdrawalFacet is Modifiers, IWithdrawable {\\n\\n    /// @notice withdraw some amount of either a token or ether out of contract to caller\\n    /// @param token the erc20 token to withdraw or 0 for the base token (ether)\\n    /// @param id the token id to withdraw or 0 for the base token (ether)\\n    /// @param amount the amount to withdraw\\n    function withdraw(address recipient, address token, uint256 id, uint256 amount) external override payable onlyOwner {\\n        //withdraw some amount of either a token or ether out of contract to caller\\n        require(recipient != address(0), \\\"recipient is not allowed to be 0\\\");\\n        require(amount > 0, \\\"amount must be greater than 0\\\");\\n        // if the token is 0 then we are withdrawing ether\\n        if(token == address(0)) {\\n            payable(recipient).transfer(amount); // transfer ether\\n            emit TokenWithdrawn(recipient, address(0), 0, amount);\\n        } else {\\n            bool isErc20 = InterfaceChecker.isERC20(token);\\n            if(isErc20) {\\n                // if the token is an ERC20 token then we are withdrawing an ERC20 token\\n                require(IERC20(token).balanceOf(address(this)) >= amount, \\\"insufficient funds\\\");\\n                IERC20(token).transfer(recipient, amount); // transfer the token\\n                emit TokenWithdrawn(recipient, token, id, amount);\\n                return;\\n            }\\n            bool isErc721 = InterfaceChecker.isERC721(token);\\n            if(isErc721) {\\n                // if the token is an ERC721 token then we are withdrawing an ERC721 token\\n                require(IERC721(token).ownerOf(id) == address(this), \\\"insufficient funds\\\");\\n                IERC721(token).transferFrom(address(this), recipient, amount); // transfer the token\\n                emit TokenWithdrawn(recipient, token, id, 1);\\n                return;\\n            }\\n            bool isErc1155 = InterfaceChecker.isERC1155(token);\\n            if(isErc1155) {\\n                // if the token is an ERC1155 token then we are withdrawing an ERC1155 token\\n                require(IERC1155(token).balanceOf(address(this), id) >= amount, \\\"insufficient funds\\\");\\n                IERC1155(token).safeTransferFrom(address(this), recipient, id, amount, \\\"\\\"); // transfer the token\\n                emit TokenWithdrawn(recipient, token, id, amount);\\n                return;\\n            }\\n            \\n        }\\n    }\\n\\n\\n}\\n\"\n    },\n    \"contracts/interfaces/IWithdrawable.sol\": {\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\n/// @notice a contract that can be withdrawn from by some user\\ninterface IWithdrawable {\\n\\n    /// @notice withdraw some amount of either a token or ether\\n    /// @param token the erc20 token to withdraw or 0 for the base token (ether)\\n    /// @param id the token id to withdraw or 0 for the base token (ether)\\n    /// @param amount the amount to withdraw\\n    function withdraw(address recipient, address token, uint256 id, uint256 amount) external payable;\\n\\n    /// @notice emitted when a withdrawal is made\\n    event TokenWithdrawn(address recipient, address token, uint256 id, uint256 amount);\\n\\n}\\n\"\n    },\n    \"contracts/facets/MerkleAirdropFacet.sol\": {\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.0;\\n\\nimport \\\"../diamond/LibAppStorage.sol\\\";\\nimport \\\"../interfaces/IAirdrop.sol\\\";\\nimport \\\"../utils/MerkleProof.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\ninterface IMerkleAirdropRedeemer {\\n    function airdropRedeemed(\\n        uint256 tokenSaleId,\\n        uint256 drop,\\n        uint256 tokenHash,\\n        address recipient,\\n        uint256 amount\\n    ) external;\\n    function redeemAirdrop(\\n        uint256 drop,\\n        uint256 leaf,\\n        address recipient,\\n        uint256 amount,\\n        uint256 total,\\n        bytes32[] memory merkleProof\\n    ) external payable;\\n}\\n\\ncontract MerkleAirdropFacet is IAirdrop, Modifiers {\\n\\n    event AirdropAdded(\\n        uint256 tokenSaleId,\\n        uint256 drop\\n    );\\n\\n    /// @notice airdrops check to see if proof is redeemed\\n    /// @param drop the id of the airdrop\\n    /// @param redeemer the merkle proof\\n    /// @return isRedeemed the amount of tokens redeemed\\n    function airdropRedeemed(uint256 drop, address redeemer) external view override returns (bool isRedeemed) {\\n       isRedeemed = _airdropRedeemed(drop, redeemer);\\n    }\\n\\n    /// @notice airdrops check to see if proof is redeemed\\n    /// @param drop the id of the airdrop\\n    /// @param recipient the merkle proof\\n    /// @return isRedeemed the amount of tokens redeemed\\n    function _airdropRedeemed(uint256 drop, address recipient) internal view returns (bool isRedeemed) {\\n        uint256 red = s.merkleAirdropStorage._totalDataQuantities[drop][recipient];\\n        uint256 tot = s.merkleAirdropStorage._redeemedDataQuantities[drop][recipient]; // i\\n        return red != 0 && red == tot;\\n    }\\n\\n    /// @notice redeem tokens for airdrop\\n    /// @param drop the airdrop id\\n    /// @param leaf the index of the token in the airdrop\\n    /// @param recipient the beneficiary of the tokens\\n    /// @param amount tje amount of tokens to redeem\\n    /// @param merkleProof the merkle proof of the token\\n    function redeemAirdrop(\\n        uint256 drop,\\n        uint256 leaf,\\n        address recipient,\\n        uint256 amount,\\n        uint256 total,\\n        bytes32[] memory merkleProof\\n        ) external payable override onlyOwner {\\n\\n        // check to see if redeemed already\\n        uint256 _redeemedAmt = s.merkleAirdropStorage._redeemedDataQuantities[drop][recipient];\\n        uint256 _redeemedttl = s.merkleAirdropStorage._totalDataQuantities[drop][recipient];\\n        _redeemedttl = _redeemedAmt > 0 ? _redeemedttl : total;\\n\\n        require(_redeemedAmt + amount <= _redeemedttl, \\\"You have already redeemed this amount\\\");\\n        s.merkleAirdropStorage._totalDataQuantities[drop][recipient] = _redeemedttl;\\n        s.merkleAirdropStorage._redeemedDataQuantities[drop][recipient] += amount; // increment amount redeemed\\n\\n        bool valid = MerkleProof.verify(\\n            bytes32 (s.merkleAirdropStorage._settings[drop].whitelistHash),\\n            bytes32 (leaf),\\n            merkleProof\\n        );\\n\\n        // Check the merkle proof\\n        require(valid, \\\"Merkle proof failed\\\");\\n    }\\n\\n    /// @notice add a new airdrop\\n    /// @param _airdrop the id of the airdrop\\n    function addAirdrop(AirdropSettings memory _airdrop) public onlyOwner {\\n        require(s.merkleAirdropStorage._settings[uint256(_airdrop.whitelistId)].whitelistId != _airdrop.whitelistId, \\\"Airdrop already exists\\\");\\n        s.merkleAirdropStorage._settings[uint256(uint256(_airdrop.whitelistId))] = _airdrop;\\n    }\\n\\n    /// @notice Get the token sale settings\\n    /// @return settings the token sale settings\\n    function airdrop(uint256 drop) external view override returns (AirdropSettings memory settings) {\\n        require(s.merkleAirdropStorage._settings[drop].whitelistId == drop, \\\"Airdrop does not exist\\\");\\n        settings = s.merkleAirdropStorage._settings[drop];\\n    }\\n\\n    // init the airdrop, rejecting the tx if already initialized\\n    function initMerkleAirdrops(AirdropSettings[] calldata settingsList) public onlyOwner {\\n        require(s.merkleAirdropStorage.numSettings == 0, \\\"Airdrops already initialized\\\");\\n        require(settingsList.length > 0, \\\"No airdrops provided\\\");\\n\\n        for (uint256 i = 0; i < settingsList.length; i++) {\\n            addAirdrop(settingsList[i]);\\n        }\\n    }\\n\\n}\\n\"\n    },\n    \"contracts/utils/MerkleProof.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nlibrary MerkleProof {\\n\\n  function verify(\\n    bytes32 root,\\n    bytes32 leaf,\\n    bytes32[] memory proof\\n  )\\n    public\\n    pure\\n    returns (bool)\\n  {\\n    bytes32 computedHash = leaf;\\n\\n    for (uint256 i = 0; i < proof.length; i++) {\\n      bytes32 proofElement = proof[i];\\n\\n      if (computedHash <= proofElement) {\\n        // Hash(current computed hash + current element of the proof)\\n        computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n      } else {\\n        // Hash(current element of the proof + current computed hash)\\n        computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n      }\\n    }\\n\\n    // Check if the computed hash (root) is equal to the provided root\\n    return computedHash == root;\\n  }\\n\\n  function getHash(address a, uint256 b) public pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(a, b));\\n  }\\n\\n}\\n\"\n    },\n    \"hardhat/console.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\"\n    },\n    \"contracts/facets/AirdropTokenSaleFacet.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./MerkleAirdropFacet.sol\\\";\\n\\nimport \\\"../access/Controllable.sol\\\";\\n\\nimport \\\"../interfaces/IAirdrop.sol\\\";\\n\\nimport \\\"../interfaces/IERC1155Mint.sol\\\";\\n\\nimport \\\"../interfaces/IERC20Mint.sol\\\";\\n\\nimport \\\"../interfaces/IAirdropTokenSale.sol\\\";\\n\\nimport { IMerkleAirdropRedeemer } from \\\"./MerkleAirdropFacet.sol\\\";\\n\\ninterface IERC2981Setter {\\n  function setRoyalty(\\n    uint256 tokenId,\\n    address receiver,\\n    uint256 amount\\n  ) external;\\n}\\n\\ninterface IMerkleAirdropAdder {\\n  function addAirdrop(IAirdrop.AirdropSettings memory _airdrop) external;\\n}\\n\\ncontract AirdropTokenSaleFacet is ITokenSale, Modifiers {\\n  /// @notice emitted when a token is opened\\n  event TokenSaleOpen(\\n    uint256 tokenSaleId,\\n    IAirdropTokenSale.TokenSaleSettings tokenSale\\n  );\\n\\n  /// @notice emitted when a token is opened\\n  event TokenSaleClosed(\\n    uint256 tokenSaleId,\\n    IAirdropTokenSale.TokenSaleSettings tokenSale\\n  );\\n\\n  /// @notice emitted when a token is opened\\n  event TokenPurchased(\\n    uint256 tokenSaleId,\\n    address indexed purchaser,\\n    uint256 tokenId,\\n    uint256 quantity\\n  );\\n\\n  // token settings were updated\\n  event TokenSaleSettingsUpdated(\\n    uint256 tokenSaleId,\\n    IAirdropTokenSale.TokenSaleSettings tokenSale\\n  );\\n\\n  event TokensaleCreated(\\n    uint256 indexed tokensaleId,\\n    IAirdropTokenSale.TokenSaleSettings settings\\n  );\\n  event AirdropRedeemed(\\n    uint256 indexed airdropId,\\n    address indexed beneficiary,\\n    bytes32[] proof,\\n    uint256 amount\\n  );\\n\\n  using UInt256Set for UInt256Set.Set;\\n\\n  /// @notice intialize the contract. should be called by overriding contract\\n  /// @param tokenSaleInit struct with tokensale data\\n  function createTokenSale(\\n    IAirdropTokenSale.TokenSaleSettings memory tokenSaleInit\\n  ) public virtual returns (uint256 tokenSaleId) {\\n    // sanity check input values\\n    require(\\n      tokenSaleInit.token != address(0),\\n      \\\"Multitoken address must be set\\\"\\n    );\\n\\n    // set settings object\\n    tokenSaleId = uint256(\\n      keccak256(\\n        abi.encodePacked(s.airdropTokenSaleStorage.tsnonce, address(this))\\n      )\\n    );\\n    s.airdropTokenSaleStorage._tokenSales[uint256(tokenSaleId)] = tokenSaleInit;\\n    s\\n      .airdropTokenSaleStorage\\n      ._tokenSales[uint256(tokenSaleId)]\\n      .contractAddress = address(this);\\n    emit TokensaleCreated(tokenSaleId, tokenSaleInit);\\n  }\\n\\n  /// @notice Called to purchase some quantity of a token. Assumes no airdrop / no whitelist\\n  /// @param receiver - the address of the account receiving the item\\n  /// @param _drop - the seed\\n  function _purchase(\\n    uint256 tokenSaleId,\\n    uint256 _drop,\\n    address receiver,\\n    uint256 quantity\\n  ) internal returns (uint256) {\\n    // if the payment type is erc20, then transfer the tokens from the sender to the contract\\n    if (\\n      s.merkleAirdropStorage._settings[_drop].paymentType ==\\n      IAirdropTokenSale.PaymentType.TOKEN &&\\n      s.merkleAirdropStorage._settings[_drop].tokenAddress != address(0)\\n    ) {\\n      address tokenAddress = s\\n        .merkleAirdropStorage\\n        ._settings[_drop]\\n        .tokenAddress;\\n      uint256 price = s\\n        .merkleAirdropStorage\\n        ._settings[_drop]\\n        .initialPrice\\n        .price * quantity;\\n      IERC20(tokenAddress).transferFrom(msg.sender, address(this), price);\\n    }\\n\\n    // request (mint) the tokens. This method must be overridden\\n    uint256 tokenHash;\\n    if (_drop != 0) {\\n      require(\\n        s.merkleAirdropStorage._settings[_drop].whitelistId == _drop,\\n        \\\"Airdrop doesnt exist\\\"\\n      );\\n      tokenHash = s.merkleAirdropStorage._settings[_drop].tokenHash;\\n    } else {\\n      tokenHash = s.airdropTokenSaleStorage._tokenSales[tokenSaleId].tokenHash;\\n    }\\n\\n    // mint a token to the user\\n    this.airdropRedeemed(tokenSaleId, _drop, receiver, 1);\\n\\n    // increase total bought\\n    s.airdropTokenSaleStorage.totalPurchased[_drop] += 1;\\n    s.airdropTokenSaleStorage.purchased[_drop][receiver] += 1;\\n\\n    // emit a message about the purchase\\n    emit TokenPurchased(tokenSaleId, receiver, tokenHash, 1);\\n    return tokenHash;\\n  }\\n\\n  function purchase(\\n    uint256 tokenSaleId,\\n    address receiver,\\n    uint256 quantity,\\n    uint256 total,\\n    uint256 drop,\\n    uint256 index,\\n    bytes32[] memory merkleProof\\n  ) external payable {\\n    _purchaseToken(\\n      tokenSaleId,\\n      receiver,\\n      quantity,\\n      total,\\n      drop,\\n      index,\\n      merkleProof,\\n      msg.value\\n    );\\n  }\\n\\n  /// @notice Called to purchase some quantity of a token\\n  /// @param receiver - the address of the account receiving the item\\n  /// @param quantity - the seed\\n  /// @param drop - the seed\\n  /// @param leaf - the seed\\n  /// @param merkleProof - the seed\\n  function _purchaseToken(\\n    uint256 tokenSaleId,\\n    address receiver,\\n    uint256 quantity,\\n    uint256 total,\\n    uint256 drop,\\n    uint256 leaf,\\n    bytes32[] memory merkleProof,\\n    uint256 valueAttached\\n  ) internal {\\n    // only check for a non-zero drop id\\n    if (drop != 0) {\\n      IAirdrop.AirdropSettings storage _drop = s.merkleAirdropStorage._settings[\\n        drop\\n      ];\\n\\n      // check that the airdrop is valid\\n      require(_drop.whitelistId == drop, \\\"Airdrop doesnt exist\\\");\\n\\n      // check that the airdrop has not yet been redeemed by the user\\n      require(\\n        !IMerkleAirdrop(address(this)).airdropRedeemed(drop, receiver),\\n        \\\"Airdrop already redeemed\\\"\\n      );\\n\\n      // make sure there are still tokens to purchase\\n      require(\\n        _drop.maxQuantity == 0 ||\\n          (_drop.maxQuantity != 0 &&\\n            _drop.quantitySold + quantity <= _drop.maxQuantity),\\n        \\\"The maximum amount of tokens has been bought.\\\"\\n      );\\n\\n      // if the payment type is ETH (base token) ensure that enough price is attached\\n      if (_drop.paymentType == IAirdropTokenSale.PaymentType.ETH) {\\n        require(\\n          _drop.initialPrice.price * quantity <= valueAttached,\\n          \\\"Not enough price attached\\\"\\n        );\\n      }\\n\\n      // make sure the max qty per sale is not exceeded\\n      require(\\n        _drop.minQuantityPerSale == 0 ||\\n          (_drop.minQuantityPerSale != 0 &&\\n            quantity >= _drop.minQuantityPerSale),\\n        \\\"Minimum quantity per sale not met\\\"\\n      );\\n\\n      // make sure the max qty per sale is not exceeded\\n      require(\\n        _drop.maxQuantityPerSale == 0 ||\\n          (_drop.maxQuantityPerSale != 0 &&\\n            quantity <= _drop.maxQuantityPerSale),\\n        \\\"Maximum quantity per sale exceeded\\\"\\n      );\\n\\n      // make sure the token sale has started\\n      require(\\n        block.timestamp >= _drop.startTime || _drop.startTime == 0,\\n        \\\"The sale has not started yet\\\"\\n      );\\n\\n      // make sure token sale is not over\\n      require(\\n        block.timestamp <= _drop.endTime || _drop.endTime == 0,\\n        \\\"The sale has ended\\\"\\n      );\\n\\n      // only enforce the whitelist if explicitly set\\n      if (_drop.whitelistOnly) {\\n        // redeem the airdrop slot and then purchase an NFT\\n        IMerkleAirdropRedeemer(address(this)).redeemAirdrop(\\n          drop,\\n          leaf,\\n          receiver,\\n          quantity,\\n          total,\\n          merkleProof\\n        );\\n      }\\n\\n      // purchase the token and then emit an event about it\\n      _purchase(tokenSaleId, drop, receiver, quantity);\\n      emit AirdropRedeemed(drop, receiver, merkleProof, quantity);\\n    \\n    } else {\\n\\n      IAirdropTokenSale.TokenSaleSettings storage tokenSaleSettings = s\\n        .airdropTokenSaleStorage\\n        ._tokenSales[tokenSaleId];\\n\\n      // if the token sale is ETH make sure enough ETH is attached\\n      if (tokenSaleSettings.paymentType == IAirdropTokenSale.PaymentType.ETH) {\\n        require(\\n          tokenSaleSettings.initialPrice.price * quantity <= valueAttached,\\n          \\\"Not enough payment attached\\\"\\n        );\\n      }\\n\\n      // make sure there are still tokens to purchase\\n      require(\\n        tokenSaleSettings.maxQuantity == 0 ||\\n          (tokenSaleSettings.maxQuantity != 0 &&\\n            s.airdropTokenSaleStorage.totalPurchased[0] <\\n            tokenSaleSettings.maxQuantity),\\n        \\\"The maximum amount of tokens has been bought.\\\"\\n      );\\n\\n      // make sure the max qty per sale is not exceeded\\n      require(\\n        tokenSaleSettings.minQuantityPerSale == 0 ||\\n          (tokenSaleSettings.minQuantityPerSale != 0 &&\\n            quantity >= tokenSaleSettings.minQuantityPerSale),\\n        \\\"Minimum quantity per sale not met\\\"\\n      );\\n      \\n      // make sure the max qty per sale is not exceeded\\n      require(\\n        tokenSaleSettings.maxQuantityPerSale == 0 ||\\n          (tokenSaleSettings.maxQuantityPerSale != 0 &&\\n            quantity <= tokenSaleSettings.maxQuantityPerSale),\\n        \\\"Maximum quantity per sale exceeded\\\"\\n      );\\n\\n      // make sure token sale is started\\n      require(\\n        block.timestamp >= tokenSaleSettings.startTime ||\\n          tokenSaleSettings.startTime == 0,\\n        \\\"The sale has not started yet\\\"\\n      );\\n\\n      // make sure token sale is not over\\n      require(\\n        block.timestamp <= tokenSaleSettings.endTime ||\\n          tokenSaleSettings.endTime == 0,\\n        \\\"The sale has ended\\\"\\n      );\\n\\n      _purchase(tokenSaleId, drop, receiver, quantity);\\n    }\\n  }\\n\\n  // @notice Called to redeem some quantity of a token - same as purchase\\n  /// @param drop - the address of the account receiving the item\\n  /// @param leaf - the seed\\n  /// @param recipient - the seed\\n  /// @param amount - the seed\\n  /// @param merkleProof - the seed\\n  function redeemToken(\\n    uint256 tokenSaleId,\\n    uint256 drop,\\n    uint256 leaf,\\n    address recipient,\\n    uint256 amount,\\n    uint256 total,\\n    bytes32[] memory merkleProof\\n  ) public payable {\\n    _purchaseToken(\\n      tokenSaleId,\\n      recipient,\\n      amount,\\n      total,\\n      drop,\\n      leaf,\\n      merkleProof,\\n      msg.value\\n    );\\n  }\\n\\n  function airdropRedeemed(\\n    uint256 tokenSaleId,\\n    uint256,\\n    address recipient,\\n    uint256 amount\\n  ) external {\\n    // mint the token\\n    IERC20Mint(s.airdropTokenSaleStorage._tokenSales[tokenSaleId].token).mintTo(\\n      recipient,\\n      amount\\n    );\\n  }\\n\\n  /// @notice Get the token sale settings\\n  function getTokenSaleSettings(uint256 tokenSaleId)\\n    external\\n    view\\n    virtual\\n    returns (IAirdropTokenSale.TokenSaleSettings memory settings)\\n  {\\n    settings = IAirdropTokenSale.TokenSaleSettings(\\n      s.airdropTokenSaleStorage._tokenSales[tokenSaleId].contractAddress,\\n      s.airdropTokenSaleStorage._tokenSales[tokenSaleId].token,\\n      s.airdropTokenSaleStorage._tokenSales[tokenSaleId].tokenHash,\\n      s.airdropTokenSaleStorage._tokenSales[tokenSaleId].collectionHash,\\n      s.airdropTokenSaleStorage._tokenSales[tokenSaleId].owner,\\n      s.airdropTokenSaleStorage._tokenSales[tokenSaleId].payee,\\n      s.airdropTokenSaleStorage._tokenSales[tokenSaleId].symbol,\\n      s.airdropTokenSaleStorage._tokenSales[tokenSaleId].name,\\n      s.airdropTokenSaleStorage._tokenSales[tokenSaleId].description,\\n      s.airdropTokenSaleStorage._tokenSales[tokenSaleId].openState,\\n      s.airdropTokenSaleStorage._tokenSales[tokenSaleId].startTime,\\n      s.airdropTokenSaleStorage._tokenSales[tokenSaleId].endTime,\\n      s.airdropTokenSaleStorage._tokenSales[tokenSaleId].maxQuantity,\\n      s.airdropTokenSaleStorage._tokenSales[tokenSaleId].maxQuantityPerSale,\\n      s.airdropTokenSaleStorage._tokenSales[tokenSaleId].minQuantityPerSale,\\n      s.airdropTokenSaleStorage._tokenSales[tokenSaleId].maxQuantityPerAccount,\\n      s.airdropTokenSaleStorage._tokenSales[tokenSaleId].initialPrice,\\n      s.airdropTokenSaleStorage._tokenSales[tokenSaleId].paymentType,\\n      s.airdropTokenSaleStorage._tokenSales[tokenSaleId].tokenAddress\\n    );\\n  }\\n\\n  /// @notice Updates the token sale settings\\n  /// @param settings - the token sake settings\\n  function updateTokenSaleSettings(\\n    uint256 tokenSaleId,\\n    IAirdropTokenSale.TokenSaleSettings memory settings\\n  ) external onlyOwner {\\n    require(\\n      msg.sender == s.airdropTokenSaleStorage._tokenSales[tokenSaleId].owner,\\n      \\\"Only the owner can update the token sale settings\\\"\\n    );\\n    s.airdropTokenSaleStorage._tokenSales[tokenSaleId] = settings;\\n    emit TokenSaleSettingsUpdated(tokenSaleId, settings);\\n  }\\n\\n  /// @notice add a new airdrop\\n  /// @param _airdrop the id of the airdrop\\n  function newAirdrop(IAirdrop.AirdropSettings memory _airdrop)\\n    external\\n    onlyOwner\\n  {\\n    IMerkleAirdropAdder(address(this)).addAirdrop(_airdrop);\\n  }\\n}\\n\"\n    },\n    \"contracts/interfaces/IERC20Mint.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n/// implemented by erc1155 tokens to allow mminting\\ninterface IERC20Mint {\\n\\n    /// @notice event emitted when tokens are minted\\n    event Minted(\\n        address target,\\n        uint256 amount\\n    );\\n\\n    /// @notice mint tokens of specified amount to the specified address\\n    /// @param amount the amount to mint\\n    function mint(\\n        uint256 amount\\n    ) external;\\n\\n    /// @notice mint tokens of specified amount to the specified address\\n    /// @param recipient the mint target\\n    /// @param amount the amount to mint\\n    function mintTo(\\n        address recipient,\\n        uint256 amount\\n    ) external;\\n\\n    function setMintAllowance(address receiver, uint256 tokenId, uint256 amount) external;\\n\\n}\\n\"\n    },\n    \"contracts/interfaces/ILootbox.sol\": {\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IToken.sol\\\";\\n\\n/// @dev interface for a collection of tokens. lists members of collection,  allows for querying of collection members, and for minting and burning of tokens.\\ninterface ILootbox {\\n\\n    /// @notice describes a lootbox.\\n    struct LootboxSettings {\\n\\n        // the address of the lootbox contract\\n        address contractAddress;\\n\\n        // the minimum amount of loot per open\\n        uint8 minLootPerOpen;\\n\\n        // the maximum amount of loot per open\\n        uint8 maxLootPerOpen;\\n\\n        // the sum of all loot probabilities\\n        uint256 probabilitiesSum;\\n\\n    }\\n\\n    /// @notice describes the structure of the additional data that describes loot\\n    struct Loot {\\n\\n        // the item that is the loot\\n        IToken.TokenDefinition item;\\n\\n        uint256 id;\\n\\n        uint256 amount;\\n\\n        // probability of the item being awarded\\n        uint256 probability;\\n\\n         // the index of the probability in its array\\n        uint256 probabilityIndex;\\n\\n         // the index of the probability in its array\\n        uint256 probabilityRoll;\\n\\n    }\\n\\n    /// @notice emitted when lootbox tokens are minted\\n    event LootboxTokensMinted(\\n        address indexed minter,\\n        uint256 indexed hash,\\n        LootboxSettings mintedLootbox,\\n        uint256 mintedAmount\\n    );\\n\\n    /// @notice emitted when lootbox is opened\\n    event LootboxOpened(\\n        address indexed containerAddress,\\n        address indexed userAddress,\\n        LootboxSettings containerObject,\\n        Loot[] itemObjects\\n    );\\n\\n    /// @notice emitted when loot is minted\\n    event LootMinted(address indexed minter, uint256 indexed hash, LootboxSettings mintedLootbox, Loot mintedLoot);\\n\\n    event LootAdded(address indexed adder, uint256 indexed hash, LootboxSettings targetLootbox, Loot addedLoot);\\n\\n    /// @notice open the lootbox. mints loot according to lootbox data\\n    /// @return the the minted loot\\n    function getLootbox(uint256 lootboxHash) external view returns (LootboxSettings memory);\\n\\n    /// @notice open the lootbox. mints loot according to lootbox data\\n    /// @return the the minted loot\\n    function addLootbox(LootboxSettings memory lootbox) external payable returns (LootboxSettings memory);\\n\\n    /// @notice open the lootbox. mints loot according to lootbox data\\n    /// @return the the minted loot\\n    function open(uint256 lootboxHash) external payable returns (Loot[] memory);\\n\\n    /// @notice open the lootbox. mints loot according to lootbox data\\n    /// @return the the minted loot\\n    function buyToken(uint256 quantity) external payable returns (Loot[] memory);\\n\\n    /// @notice add a loot\\n    /// @param tokenDefinition the loot to add\\n    function addLoot(uint256 lootboxHash, IToken.TokenDefinition memory tokenDefinition) external;\\n\\n    /// @notice add a loot\\n    /// @param tokenDefinition the loot to add\\n    function setLoot(uint256 lootboxHash, IToken.TokenDefinition memory tokenDefinition) external;\\n\\n    /// @notice get all loot for lootbox\\n    /// @param lootboxHash the loot to add\\n    function loot(uint256 lootboxHash) external returns (Loot[] memory);\\n\\n    /// @notice get all lootboxes in system\\n    function lootboxes() external returns (LootboxSettings[] memory);\\n\\n    /// @notice a set of tokens.\\n    struct LootSet {\\n\\n        mapping(uint256 => uint256) keyPointers;\\n        uint256[] keyList;\\n        ILootbox.Loot[] valueList;\\n\\n    }\\n}\\n\"\n    },\n    \"contracts/interfaces/ICustody.sol\": {\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IToken.sol\\\";\\n\\n/// @notice interface takes custody of a array of tokens (erc20/erc721/erc1155) and releases custody of the tokens to the address that placed them in custody.\\ninterface ICustody {\\n\\n    struct CustodyItem {\\n        IToken.TokenType tokenType;\\n        address tokenAddress;\\n        uint256 tokenId;\\n        uint256 amount;\\n        address ownerAddress;\\n    }\\n\\n    function takeCustody(CustodyItem[] memory items) external returns (uint256 custodyReceipt);\\n    function releaseCustody(uint256 custodyReceipt) external;\\n\\n}\\n\"\n    },\n    \"contracts/interfaces/IERC721.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\n    },\n    \"contracts/interfaces/IERC721Metadata.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\n    },\n    \"contracts/interfaces/IERC721Enumerable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\n    },\n    \"contracts/interfaces/IERC1155Receiver.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\n    },\n    \"contracts/interfaces/IERC1155.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\n    },\n    \"contracts/interfaces/IERC1155MetadataURIBase.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURIBase {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uriBase() external view returns (string memory);\\n}\\n\"\n    },\n    \"contracts/interfaces/IERC1155MetadataURI.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\"\n    },\n    \"contracts/diamond/DiamondLoupeFacet.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\nimport { LibDiamond } from  \\\"./LibDiamond.sol\\\";\\nimport { IDiamondLoupe } from \\\"../interfaces/IDiamondLoupe.sol\\\";\\nimport { IERC165 } from \\\"../interfaces/IERC165.sol\\\";\\n\\ncontract DiamondLoupeFacet is IDiamondLoupe, IERC165 {\\n    // Diamond Loupe Functions\\n    ////////////////////////////////////////////////////////////////////\\n    /// These functions are expected to be called frequently by tools.\\n    //\\n    // struct Facet {\\n    //     address facetAddress;\\n    //     bytes4[] functionSelectors;\\n    // }\\n    /// @notice Gets all facets and their selectors.\\n    /// @return facets_ Facet\\n    function facets() external override view returns (Facet[] memory facets_) {\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\n        facets_ = new Facet[](ds.selectorCount);\\n        uint8[] memory numFacetSelectors = new uint8[](ds.selectorCount);\\n        uint256 numFacets;\\n        uint256 selectorIndex;\\n        // loop through function selectors\\n        for (uint256 slotIndex; selectorIndex < ds.selectorCount; slotIndex++) {\\n            bytes32 slot = ds.selectorSlots[slotIndex];\\n            for (uint256 selectorSlotIndex; selectorSlotIndex < 8; selectorSlotIndex++) {\\n                selectorIndex++;\\n                if (selectorIndex > ds.selectorCount) {\\n                    break;\\n                }\\n                bytes4 selector = bytes4(slot << (selectorSlotIndex << 5));\\n                address facetAddress_ = address(bytes20(ds.facets[selector]));\\n                bool continueLoop = false;\\n                for (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\\n                    if (facets_[facetIndex].facetAddress == facetAddress_) {\\n                        facets_[facetIndex].functionSelectors[numFacetSelectors[facetIndex]] = selector;\\n                        // probably will never have more than 256 functions from one facet contract\\n                        require(numFacetSelectors[facetIndex] < 255);\\n                        numFacetSelectors[facetIndex]++;\\n                        continueLoop = true;\\n                        break;\\n                    }\\n                }\\n                if (continueLoop) {\\n                    continueLoop = false;\\n                    continue;\\n                }\\n                facets_[numFacets].facetAddress = facetAddress_;\\n                facets_[numFacets].functionSelectors = new bytes4[](ds.selectorCount);\\n                facets_[numFacets].functionSelectors[0] = selector;\\n                numFacetSelectors[numFacets] = 1;\\n                numFacets++;\\n            }\\n        }\\n        for (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\\n            uint256 numSelectors = numFacetSelectors[facetIndex];\\n            bytes4[] memory selectors = facets_[facetIndex].functionSelectors;\\n            // setting the number of selectors\\n            assembly {\\n                mstore(selectors, numSelectors)\\n            }\\n        }\\n        // setting the number of facets\\n        assembly {\\n            mstore(facets_, numFacets)\\n        }\\n    }\\n\\n    /// @notice Gets all the function selectors supported by a specific facet.\\n    /// @param _facet The facet address.\\n    /// @return _facetFunctionSelectors The selectors associated with a facet address.\\n    function facetFunctionSelectors(address _facet) external override view returns (bytes4[] memory _facetFunctionSelectors) {\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\n        uint256 numSelectors;\\n        _facetFunctionSelectors = new bytes4[](ds.selectorCount);\\n        uint256 selectorIndex;\\n        // loop through function selectors\\n        for (uint256 slotIndex; selectorIndex < ds.selectorCount; slotIndex++) {\\n            bytes32 slot = ds.selectorSlots[slotIndex];\\n            for (uint256 selectorSlotIndex; selectorSlotIndex < 8; selectorSlotIndex++) {\\n                selectorIndex++;\\n                if (selectorIndex > ds.selectorCount) {\\n                    break;\\n                }\\n                bytes4 selector = bytes4(slot << (selectorSlotIndex << 5));\\n                address facet = address(bytes20(ds.facets[selector]));\\n                if (_facet == facet) {\\n                    _facetFunctionSelectors[numSelectors] = selector;\\n                    numSelectors++;\\n                }\\n            }\\n        }\\n        // Set the number of selectors in the array\\n        assembly {\\n            mstore(_facetFunctionSelectors, numSelectors)\\n        }\\n    }\\n\\n    /// @notice Get all the facet addresses used by a diamond.\\n    /// @return facetAddresses_\\n    function facetAddresses() external override view returns (address[] memory facetAddresses_) {\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\n        facetAddresses_ = new address[](ds.selectorCount);\\n        uint256 numFacets;\\n        uint256 selectorIndex;\\n        // loop through function selectors\\n        for (uint256 slotIndex; selectorIndex < ds.selectorCount; slotIndex++) {\\n            bytes32 slot = ds.selectorSlots[slotIndex];\\n            for (uint256 selectorSlotIndex; selectorSlotIndex < 8; selectorSlotIndex++) {\\n                selectorIndex++;\\n                if (selectorIndex > ds.selectorCount) {\\n                    break;\\n                }\\n                bytes4 selector = bytes4(slot << (selectorSlotIndex << 5));\\n                address facetAddress_ = address(bytes20(ds.facets[selector]));\\n                bool continueLoop = false;\\n                for (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\\n                    if (facetAddress_ == facetAddresses_[facetIndex]) {\\n                        continueLoop = true;\\n                        break;\\n                    }\\n                }\\n                if (continueLoop) {\\n                    continueLoop = false;\\n                    continue;\\n                }\\n                facetAddresses_[numFacets] = facetAddress_;\\n                numFacets++;\\n            }\\n        }\\n        // Set the number of facet addresses in the array\\n        assembly {\\n            mstore(facetAddresses_, numFacets)\\n        }\\n    }\\n\\n    /// @notice Gets the facet that supports the given selector.\\n    /// @dev If facet is not found return address(0).\\n    /// @param _functionSelector The function selector.\\n    /// @return facetAddress_ The facet address.\\n    function facetAddress(bytes4 _functionSelector) external override view returns (address facetAddress_) {\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\n        facetAddress_ = address(bytes20(ds.facets[_functionSelector]));\\n    }\\n\\n    // This implements ERC-165.\\n    function supportsInterface(bytes4 _interfaceId) external override view returns (bool) {\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\n        return ds.supportedInterfaces[_interfaceId];\\n    }\\n}\\n\"\n    },\n    \"contracts/utils/introspection/ERC165Checker.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface,\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            _supportsERC165Interface(account, type(IERC165).interfaceId) &&\\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && _supportsERC165Interface(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in _interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n        (bool success, bytes memory result) = account.staticcall{gas: 30000}(encodedParams);\\n        if (result.length < 32) return false;\\n        return success && abi.decode(result, (bool));\\n    }\\n}\\n\"\n    },\n    \"contracts/utils/introspection/ERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\n    },\n    \"contracts/utils/introspection/ERC165Storage.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Storage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC165.sol\\\";\\n\\n/**\\n * @dev Storage based implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165Storage is ERC165 {\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return super.supportsInterface(interfaceId) || _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\"\n    },\n    \"contracts/diamond/DiamondCutFacet.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\nimport { LibDiamond } from \\\"./LibDiamond.sol\\\";\\n\\ncontract DiamondCutFacet is IDiamondCut {\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external override {\\n        LibDiamond.enforceIsContractOwner();\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\n        uint256 originalSelectorCount = ds.selectorCount;\\n        uint256 selectorCount = originalSelectorCount;\\n        bytes32 selectorSlot;\\n        // Check if last selector slot is not full\\n        // \\\"selectorCount & 7\\\" is a gas efficient modulo by eight \\\"selectorCount % 8\\\"\\n        if (selectorCount & 7 > 0) {\\n            // get last selectorSlot\\n            // \\\"selectorCount >> 3\\\" is a gas efficient division by 8 \\\"selectorCount / 8\\\"\\n            selectorSlot = ds.selectorSlots[selectorCount >> 3];\\n        }\\n        // loop through diamond cut\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            (selectorCount, selectorSlot) = LibDiamond.addReplaceRemoveFacetSelectors(\\n                selectorCount,\\n                selectorSlot,\\n                _diamondCut[facetIndex].facetAddress,\\n                _diamondCut[facetIndex].action,\\n                _diamondCut[facetIndex].functionSelectors\\n            );\\n        }\\n        if (selectorCount != originalSelectorCount) {\\n            ds.selectorCount = uint16(selectorCount);\\n        }\\n        // If last selector slot is not full\\n        // \\\"selectorCount & 7\\\" is a gas efficient modulo by eight \\\"selectorCount % 8\\\"\\n        if (selectorCount & 7 > 0) {\\n            // \\\"selectorCount >> 3\\\" is a gas efficient division by 8 \\\"selectorCount / 8\\\"\\n            ds.selectorSlots[selectorCount >> 3] = selectorSlot;\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        LibDiamond.initializeDiamondCut(_init, _calldata);\\n    }\\n}\\n\"\n    },\n    \"contracts/diamond/Diamond.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n*\\n* Implementation of a diamond.\\n/******************************************************************************/\\n\\nimport { LibDiamond } from \\\"./LibDiamond.sol\\\";\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\ncontract Diamond {\\n\\n    constructor(address _contractOwner, address _diamondCutFacet) payable {\\n        LibDiamond.setContractOwner(_contractOwner);\\n\\n        // Add the diamondCut external function from the diamondCutFacet\\n        IDiamondCut.FacetCut[] memory cut = new IDiamondCut.FacetCut[](1);\\n        bytes4[] memory functionSelectors = new bytes4[](1);\\n        functionSelectors[0] = IDiamondCut.diamondCut.selector;\\n        cut[0] = IDiamondCut.FacetCut({\\n            facetAddress: _diamondCutFacet,\\n            action: IDiamondCut.FacetCutAction.Add,\\n            functionSelectors: functionSelectors\\n        });\\n        LibDiamond.diamondCut(cut, address(0), \\\"\\\");\\n    }\\n\\n    // Find facet for function that is called and execute the\\n    // function if a facet is found and return any value.\\n    fallback() external payable {\\n        LibDiamond.DiamondStorage storage ds;\\n        bytes32 position = LibDiamond.DIAMOND_STORAGE_POSITION;\\n        // get diamond storage\\n        assembly {\\n            ds.slot := position\\n        }\\n        // get facet from function selector\\n        address facet = address(bytes20(ds.facets[msg.sig]));\\n        require(facet != address(0), \\\"Diamond: Function does not exist\\\");\\n        // Execute external function from facet using delegatecall and return any value.\\n        assembly {\\n            // copy function selector and any arguments\\n            calldatacopy(0, 0, calldatasize())\\n            // execute function call using the facet\\n            let result := delegatecall(gas(), facet, 0, calldatasize(), 0, 0)\\n            // get any return value\\n            returndatacopy(0, 0, returndatasize())\\n            // return any return value or error back to the caller\\n            switch result\\n                case 0 {\\n                    revert(0, returndatasize())\\n                }\\n                default {\\n                    return(0, returndatasize())\\n                }\\n        }\\n    }\\n\\n    receive() external payable {}\\n}\\n\"\n    }\n  },\n  \"settings\": {\n    \"optimizer\": {\n      \"enabled\": true,\n      \"runs\": 5\n    },\n    \"outputSelection\": {\n      \"*\": {\n        \"*\": [\n          \"abi\",\n          \"evm.bytecode\",\n          \"evm.deployedBytecode\",\n          \"evm.methodIdentifiers\",\n          \"metadata\",\n          \"devdoc\",\n          \"userdoc\",\n          \"storageLayout\",\n          \"evm.gasEstimates\"\n        ],\n        \"\": [\n          \"ast\"\n        ]\n      }\n    },\n    \"metadata\": {\n      \"useLiteralContent\": true\n    }\n  }\n}",
      "solcInputHash": "d19790c16acbde8458c6a134d997a7c1",
      "transactionHash": "0xfda6032be3d4083422a7eacbffd625efae52852192ba7ccbf027340f5effc655",
      "args": []
    },
    "decoded": {
      "from": "0x97AEd3F8aaCbcB22b374aC49bC2354374f17235a",
      "gasPrice": "1515778064",
      "maxFeePerGas": "1515778064",
      "maxPriorityFeePerGas": "1500000000",
      "gasLimit": "1602822",
      "to": null,
      "value": "0",
      "nonce": 1100,
      "data": "0x60806040523480156200001157600080fd5b506000805460ff191690556200002733620000c4565b62000050336001600160a01b03166000908152600360205260409020805460ff19166001179055565b600b805461ffff19166101011790556040805180820182526007808252665465737444414960c81b6020808401919091528351808501909452908352665445535444414960c81b90830152620000a69162000116565b620000be336b033b2e3c9fd0803ce8000000620001aa565b6200065f565b600280546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60098054620001259062000622565b1590506200017a5760405162461bcd60e51b815260206004820152601c60248201527f455243323020746f6b656e206e616d6520616c7265616479207365740000000060448201526064015b60405180910390fd5b81516200018f90600990602085019062000555565b508051620001a590600a90602084019062000555565b505050565b6000620001b660055490565b1115620002325760055481620001d66200032560201b620004881760201c565b620001e29190620005fb565b1115620002325760405162461bcd60e51b815260206004820152601960248201527f45524332304361707065643a2063617020657863656564656400000000000000604482015260640162000171565b6001600160a01b0382166200028a5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640162000171565b62000298600083836200032b565b8060086000828254620002ac9190620005fb565b90915550506001600160a01b03821660009081526006602052604081208054839290620002db908490620005fb565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b60085490565b60005460ff1615620003805760405162461bcd60e51b815260206004820152601b60248201527f746f6b656e207472616e73666572207768696c65207061757365640000000000604482015260640162000171565b6001600160a01b03831615620001a5576001600160a01b0383166000908152600760209081526040808320909152902054620001a5908490819084906000198114620004275781811015620004185760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640162000171565b6200042784848484036200042d565b50505050565b6001600160a01b038316620004915760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840162000171565b6001600160a01b038216620004f45760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840162000171565b6001600160a01b0383811660008181526007602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b828054620005639062000622565b90600052602060002090601f016020900481019282620005875760008555620005d2565b82601f10620005a257805160ff1916838001178555620005d2565b82800160010185558215620005d2579182015b82811115620005d2578251825591602001919060010190620005b5565b50620005e0929150620005e4565b5090565b5b80821115620005e05760008155600101620005e5565b600082198211156200061d57634e487b7160e01b600052601160045260246000fd5b500190565b600181811c908216806200063757607f821691505b602082108114156200065957634e487b7160e01b600052602260045260246000fd5b50919050565b61189a806200066f6000396000f3fe608060405234801561001057600080fd5b50600436106101805760003560e01c806306fdde0314610185578063095ea7b3146101a357806318160ddd146101c65780631b8dca74146101d857806323b872dd146101e3578063313ce567146101f6578063355274ea1461020557806335e061fc1461020d578063395093511461021d57806342966c6814610230578063449a52f81461024557806347786d37146102585780634cd88b761461026b5780635c975abb1461027e5780635e81078d1461028957806370a082311461029c578063715018a6146102c557806379cc6790146102cd5780638d222f36146102e05780638da5cb5b146102f357806395d89b4114610313578063a0712d681461031b578063a457c2d71461032e578063a7fc7a0714610341578063a9059cbb14610354578063b429afeb14610367578063b93ea6a11461037a578063dd62ed3e1461038a578063e1c28bef1461039d578063e26c6f1b146103a5578063f2fde38b146103b8578063fa02c4b7146103cb575b600080fd5b61018d6103de565b60405161019a9190611640565b60405180910390f35b6101b66101b1366004611578565b610470565b604051901515815260200161019a565b6008545b60405190815260200161019a565b600b5460ff166101b6565b6101b66101f136600461153c565b61048e565b6040516012815260200161019a565b6005546101ca565b600b54610100900460ff166101b6565b6101b661022b366004611578565b6104b2565b61024361023e366004611627565b6104d4565b005b610243610253366004611578565b610511565b610243610266366004611627565b6105a2565b6102436102793660046115c4565b6105e3565b60005460ff166101b6565b6102436102973660046115a2565b61065c565b6101ca6102aa3660046114e7565b6001600160a01b031660009081526006602052604090205490565b6102436106ce565b6102436102db366004611578565b610709565b6101b66102ee3660046114e7565b610745565b6102fb610768565b6040516001600160a01b03909116815260200161019a565b61018d610777565b610243610329366004611627565b610786565b6101b661033c366004611578565b610813565b61024361034f3660046114e7565b61088e565b6101b6610362366004611578565b610917565b6101b66103753660046114e7565b610925565b600054610100900460ff166101b6565b6101ca610398366004611509565b610946565b610243610971565b6102436103b33660046115a2565b6109da565b6102436103c63660046114e7565b610a51565b6101b66103d9366004611578565b610af6565b6060600980546103ed906117dd565b80601f0160208091040260200160405190810160405280929190818152602001828054610419906117dd565b80156104665780601f1061043b57610100808354040283529160200191610466565b820191906000526020600020905b81548152906001019060200180831161044957829003601f168201915b5050505050905090565b60003361047e818585610b6b565b5060019392505050565b60085490565b60003361049c858285610c8f565b6104a7858585610d09565b506001949350505050565b60003361047e8185856104c58383610946565b6104cf91906117ae565b610b6b565b600b54610100900460ff166105045760405162461bcd60e51b81526004016104fb90611749565b60405180910390fd5b61050e3382610ed0565b50565b3360009081526003602052604090205460ff1615156001148061053357503033145b806105565750610541610768565b6001600160a01b0316306001600160a01b0316145b6105725760405162461bcd60e51b81526004016104fb9061177a565b600b5460ff166105945760405162461bcd60e51b81526004016104fb90611718565b61059e8282611018565b5050565b600554156105de5760405162461bcd60e51b8152602060048201526009602482015268696d6d757461626c6560b81b60448201526064016104fb565b600555565b60006105ef6001611163565b90508015610607576004805461ff0019166101001790555b61061183836111f2565b8015610657576004805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b3360009081526003602052604090205460ff1615156001148061067e57503033145b806106a1575061068c610768565b6001600160a01b0316306001600160a01b0316145b6106bd5760405162461bcd60e51b81526004016104fb9061177a565b600b805460ff191682151517905550565b336106d7610768565b6001600160a01b0316146106fd5760405162461bcd60e51b81526004016104fb906116e3565b6107076000611274565b565b600b54610100900460ff166107305760405162461bcd60e51b81526004016104fb90611749565b61073b823383610c8f565b61059e8282610ed0565b6001600160a01b03811660009081526001602052604081205460ff165b92915050565b6002546001600160a01b031690565b6060600a80546103ed906117dd565b3360009081526003602052604090205460ff161515600114806107a857503033145b806107cb57506107b6610768565b6001600160a01b0316306001600160a01b0316145b6107e75760405162461bcd60e51b81526004016104fb9061177a565b600b5460ff166108095760405162461bcd60e51b81526004016104fb90611718565b61050e3382611018565b600033816108218286610946565b9050838110156108815760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016104fb565b6104a78286868403610b6b565b3360009081526003602052604090205460ff161515600114806108b057503033145b806108d357506108be610768565b6001600160a01b0316306001600160a01b0316145b6108ef5760405162461bcd60e51b81526004016104fb9061177a565b61050e816001600160a01b03166000908152600360205260409020805460ff19166001179055565b60003361047e818585610d09565b6001600160a01b03811660009081526003602052604081205460ff16610762565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205490565b3360009081526003602052604090205460ff1615156001148061099357503033145b806109b657506109a1610768565b6001600160a01b0316306001600160a01b0316145b6109d25760405162461bcd60e51b81526004016104fb9061177a565b6107076112c6565b3360009081526003602052604090205460ff161515600114806109fc57503033145b80610a1f5750610a0a610768565b6001600160a01b0316306001600160a01b0316145b610a3b5760405162461bcd60e51b81526004016104fb9061177a565b600b805461ff0019166101008315150217905550565b33610a5a610768565b6001600160a01b031614610a805760405162461bcd60e51b81526004016104fb906116e3565b6001600160a01b038116610ae55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104fb565b610aee81611274565b61050e6112c6565b3360009081526003602052604081205460ff16151560011480610b1857503033145b80610b3b5750610b26610768565b6001600160a01b0316306001600160a01b0316145b610b575760405162461bcd60e51b81526004016104fb9061177a565b610b62838484610b6b565b50600192915050565b6001600160a01b038316610bcd5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016104fb565b6001600160a01b038216610c2e5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016104fb565b6001600160a01b0383811660008181526007602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000610c9b8484610946565b90506000198114610d035781811015610cf65760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016104fb565b610d038484848403610b6b565b50505050565b6001600160a01b038316610d6d5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016104fb565b6001600160a01b038216610dcf5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016104fb565b610dda838383611340565b6001600160a01b03831660009081526006602052604090205481811015610e525760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016104fb565b6001600160a01b03808516600090815260066020526040808220858503905591851681529081208054849290610e899084906117ae565b92505081905550826001600160a01b0316846001600160a01b031660008051602061184583398151915284604051610ec391815260200190565b60405180910390a3610d03565b6001600160a01b038216610f305760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016104fb565b610f3c82600083611340565b6001600160a01b03821660009081526006602052604090205481811015610fb05760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016104fb565b6001600160a01b0383166000908152600660205260408120838303905560088054849290610fdf9084906117c6565b90915550506040518281526000906001600160a01b038516906000805160206118458339815191529060200160405180910390a3505050565b600061102360055490565b111561108a576005548161103660085490565b61104091906117ae565b111561108a5760405162461bcd60e51b8152602060048201526019602482015278115490cc8c10d85c1c19590e8818d85c08195e18d959591959603a1b60448201526064016104fb565b6001600160a01b0382166110e05760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016104fb565b6110ec60008383611340565b80600860008282546110fe91906117ae565b90915550506001600160a01b0382166000908152600660205260408120805483929061112b9084906117ae565b90915550506040518181526001600160a01b038316906000906000805160206118458339815191529060200160405180910390a35050565b600454600090610100900460ff16156111ac578160ff1660011480156111885750303b155b6111a45760405162461bcd60e51b81526004016104fb90611695565b506000919050565b60045460ff8084169116106111d35760405162461bcd60e51b81526004016104fb90611695565b506004805460ff191660ff92909216919091179055600190565b919050565b600980546111ff906117dd565b15905061124d5760405162461bcd60e51b815260206004820152601c60248201527b115490cc8c081d1bdad95b881b985b5948185b1c9958591e481cd95d60221b60448201526064016104fb565b81516112609060099060208501906113ab565b50805161065790600a9060208401906113ab565b600280546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b3360009081526003602052604090205460ff161515600114806112e857503033145b8061130b57506112f6610768565b6001600160a01b0316306001600160a01b0316145b6113275760405162461bcd60e51b81526004016104fb9061177a565b336000908152600360205260409020805460ff19169055565b60005460ff16156113915760405162461bcd60e51b815260206004820152601b60248201527a1d1bdad95b881d1c985b9cd9995c881dda1a5b19481c185d5cd959602a1b60448201526064016104fb565b6001600160a01b0383161561065757610657838483610c8f565b8280546113b7906117dd565b90600052602060002090601f0160209004810192826113d9576000855561141f565b82601f106113f257805160ff191683800117855561141f565b8280016001018555821561141f579182015b8281111561141f578251825591602001919060010190611404565b5061142b92915061142f565b5090565b5b8082111561142b5760008155600101611430565b80356001600160a01b03811681146111ed57600080fd5b600082601f83011261146c57600080fd5b81356001600160401b03808211156114865761148661182e565b604051601f8301601f19908116603f011681019082821181831017156114ae576114ae61182e565b816040528381528660208588010111156114c757600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000602082840312156114f957600080fd5b61150282611444565b9392505050565b6000806040838503121561151c57600080fd5b61152583611444565b915061153360208401611444565b90509250929050565b60008060006060848603121561155157600080fd5b61155a84611444565b925061156860208501611444565b9150604084013590509250925092565b6000806040838503121561158b57600080fd5b61159483611444565b946020939093013593505050565b6000602082840312156115b457600080fd5b8135801515811461150257600080fd5b600080604083850312156115d757600080fd5b82356001600160401b03808211156115ee57600080fd5b6115fa8683870161145b565b9350602085013591508082111561161057600080fd5b5061161d8582860161145b565b9150509250929050565b60006020828403121561163957600080fd5b5035919050565b600060208083528351808285015260005b8181101561166d57858101830151858201604001528201611651565b8181111561167f576000604083870101525b50601f01601f1916929092016040019392505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526017908201527636b4b73a34b7339034b9903737ba1030b63637bbb2b21760491b604082015260600190565b602080825260179082015276213ab93734b7339034b9903737ba1030b63637bbb2b21760491b604082015260600190565b6020808252601a908201527931b0b63632b91034b9903737ba10309031b7b73a3937b63632b960311b604082015260600190565b600082198211156117c1576117c1611818565b500190565b6000828210156117d8576117d8611818565b500390565b600181811c908216806117f157607f821691505b6020821081141561181257634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220a3b00e10cd093354a835a227a41378fb1603ed59adca0bb17c63196201ca0f3b64736f6c63430008060033",
      "r": "0x3fcc183758e4c4e316e2c51283aa5552644b25595a1de0b8117265814ef3868c",
      "s": "0x5e4c60105a017672655f8f0b58d4541b7902dcae5191deeba76af854d040d767",
      "v": 0,
      "chainId": 4
    }
  }
}