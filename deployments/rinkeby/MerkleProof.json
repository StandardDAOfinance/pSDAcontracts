{
  "address": "0xe2f6D7E396B31d50dc5d11aD23c17859aDc95bB3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "a",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "b",
          "type": "uint256"
        }
      ],
      "name": "getHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "root",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "leaf",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "name": "verify",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x0197037a3666597be5c72aed77f2c6ef0958b8f8450bee265501e847901f2571",
  "receipt": {
    "to": null,
    "from": "0x97AEd3F8aaCbcB22b374aC49bC2354374f17235a",
    "contractAddress": "0xe2f6D7E396B31d50dc5d11aD23c17859aDc95bB3",
    "transactionIndex": 3,
    "gasUsed": "224030",
    "logsBloom": "0x
    "blockHash": "0xfdfa13baac2295d3e8a6ca778f013f52653a50b7a54f7389d5f7a2e3050058e3",
    "transactionHash": "0x0197037a3666597be5c72aed77f2c6ef0958b8f8450bee265501e847901f2571",
    "logs": [],
    "blockNumber": 10568991,
    "cumulativeGasUsed": "1824130",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "af54060ac13cd822e4c3f0f7494b07aa",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"getHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/utils/MerkleProof.sol\":\"MerkleProof\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5},\"remappings\":[]},\"sources\":{\"contracts/utils/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nlibrary MerkleProof {\\n\\n  function verify(\\n    bytes32 root,\\n    bytes32 leaf,\\n    bytes32[] memory proof\\n  )\\n    public\\n    pure\\n    returns (bool)\\n  {\\n    bytes32 computedHash = leaf;\\n\\n    for (uint256 i = 0; i < proof.length; i++) {\\n      bytes32 proofElement = proof[i];\\n\\n      if (computedHash <= proofElement) {\\n        // Hash(current computed hash + current element of the proof)\\n        computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n      } else {\\n        // Hash(current element of the proof + current computed hash)\\n        computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n      }\\n    }\\n\\n    // Check if the computed hash (root) is equal to the provided root\\n    return computedHash == root;\\n  }\\n\\n  function getHash(address a, uint256 b) public pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(a, b));\\n  }\\n\\n}\\n\",\"keccak256\":\"0xff1263d1cb07a5013ee685cd9a0f4c00c02c74671c78162a392fe6666b342b5d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61031661003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c80633423e54814610045578063ed05582b1461006d575b600080fd5b6100586100533660046101b2565b6100cb565b60405190151581526020015b60405180910390f35b6100bd61007b36600461017a565b6040516001600160601b0319606084901b1660208201526034810182905260009060540160405160208183030381529060405280519060200120905092915050565b604051908152602001610064565b600082815b835181101561016f5760008482815181106100ed576100ed6102b4565b6020026020010151905080831161012f57604080516020810185905290810182905260600160405160208183030381529060405280519060200120925061015c565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b50806101678161028b565b9150506100d0565b509093149392505050565b6000806040838503121561018d57600080fd5b82356001600160a01b03811681146101a457600080fd5b946020939093013593505050565b6000806000606084860312156101c757600080fd5b83359250602080850135925060408501356001600160401b03808211156101ed57600080fd5b818701915087601f83011261020157600080fd5b813581811115610213576102136102ca565b8060051b604051601f19603f83011681018181108582111715610238576102386102ca565b604052828152858101935084860182860187018c101561025757600080fd5b600095505b8386101561027a57803585526001959095019493860193860161025c565b508096505050505050509250925092565b60006000198214156102ad57634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220abf55977bcacc89959c59ae95129a6774531e002755204697c89edc1256c939c64736f6c63430008060033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c80633423e54814610045578063ed05582b1461006d575b600080fd5b6100586100533660046101b2565b6100cb565b60405190151581526020015b60405180910390f35b6100bd61007b36600461017a565b6040516001600160601b0319606084901b1660208201526034810182905260009060540160405160208183030381529060405280519060200120905092915050565b604051908152602001610064565b600082815b835181101561016f5760008482815181106100ed576100ed6102b4565b6020026020010151905080831161012f57604080516020810185905290810182905260600160405160208183030381529060405280519060200120925061015c565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b50806101678161028b565b9150506100d0565b509093149392505050565b6000806040838503121561018d57600080fd5b82356001600160a01b03811681146101a457600080fd5b946020939093013593505050565b6000806000606084860312156101c757600080fd5b83359250602080850135925060408501356001600160401b03808211156101ed57600080fd5b818701915087601f83011261020157600080fd5b813581811115610213576102136102ca565b8060051b604051601f19603f83011681018181108582111715610238576102386102ca565b604052828152858101935084860182860187018c101561025757600080fd5b600095505b8386101561027a57803585526001959095019493860193860161025c565b508096505050505050509250925092565b60006000198214156102ad57634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220abf55977bcacc89959c59ae95129a6774531e002755204697c89edc1256c939c64736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}